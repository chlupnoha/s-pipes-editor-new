@prefix ff:    <http://vfn.cz/ontologies/fss-form/> .
@prefix :      <http://vfn.cz/ontologies/fss-form-generation-0.123/> .
@prefix e-m-i: <http://onto.fel.cvut.cz/ontologies/eccairs/model/instance#> .
@prefix e-m:   <http://onto.fel.cvut.cz/ontologies/eccairs/model/> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix fn:    <http://www.w3.org/2005/xpath-functions#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix smf:   <http://topbraid.org/sparqlmotionfunctions#> .
@prefix spif:  <http://spinrdf.org/spif#> .
@prefix fssgen: <http://vfn.cz/ontologies/fss-form-generation-0.123/> .
@prefix sml:   <http://topbraid.org/sparqlmotionlib#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix arg:   <http://spinrdf.org/arg#> .
@prefix sm:    <http://topbraid.org/sparqlmotion#> .
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix km-param: <http://onto.fel.cvut.cz/ontologies/lib/module-param/> .
@prefix afn:   <http://jena.hpl.hp.com/ARQ/function#> .
@prefix spl:   <http://spinrdf.org/spl#> .
@prefix form-lt: <http://onto.fel.cvut.cz/ontologies/form-layout/> .
@prefix form-fss-gen-0.1: <http://vfn.cz/ontologies/fss-form-generation-0.123/> .
@prefix daml:  <http://www.daml.org/2001/03/daml+oil#> .
@prefix form:  <http://onto.fel.cvut.cz/ontologies/form/> .
@prefix spr:   <http://spinrdf.org/spr#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix spin:  <http://spinrdf.org/spin#> .
@prefix doc:   <http://onto.fel.cvut.cz/ontologies/documentation/> .

sml:CreateSWPDocument
        a                sm:Module ;
        rdfs:comment     "Evaluates a given SWP document (sml:view) and assigns the resulting document to a given string variable (sm:outputVariable). The new variable can then be saved to a file or processed otherwise. All incoming variables of this SM module will be bound in the SWP expression.\n\nNote that in order to insert an SWP view for a given resource (using ui:instanceView etc), you can use the snippet <ui:resourceView ui:resource=\"{= ?varName }\" />.\n\nAlso note that in order to use HTML or SVG tags in the sml:view, you will need to import the html.ttl or svg.ttl from the SWP ontologies into the script." ;
        rdfs:label       "Create SWP document" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The UISPIN snippet to evaluate." ;
                           spl:predicate  sml:view ;
                           spl:valueType  <http://uispin.org/ui#Node>
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "True to only create a UISPIN snippet, e.g. without head/body." ;
                           spl:optional   true ;
                           spl:predicate  sml:snippet ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the output variable that will contain the resulting document (as a string)." ;
                           spl:defaultValue  "doc" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

spl:Test-instanceOf-rdfsClass-false
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:versionInfo ;
                              sp:arg2  rdfs:Class
                            ] ;
        spl:testResult      false .

sp:Construct  a          rdfs:Class ;
        rdfs:comment     "A CONSTRUCT-type query that can be used to construct new triples from template triples (head) that use variable bindings from the match patterns (body)." ;
        rdfs:label       "Construct" ;
        rdfs:subClassOf  spin:Rule , sp:Query .

sp:abs  a                spin:Function ;
        rdfs:comment     "Returns the absolute value of arg. An error is raised if arg is not a numeric value." ;
        rdfs:label       "abs" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-abs> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input value." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "abs" .

sml:modelName  a    rdf:Property ;
        rdfs:label  "modelName" ;
        rdfs:range  xsd:string .

sp:where  a                 rdf:Property ;
        rdfs:comment        "The WHERE clause of a Query." ;
        rdfs:label          "where" ;
        rdfs:range          sp:ElementList ;
        rdfs:subPropertyOf  sp:systemProperty .

form-fss-gen-0.1:generate-fss-form
        a                sm:Function ;
        rdfs:subClassOf  sm:Functions ;
        sm:returnModule  <http://onto.fel.cvut.cz/ontologies/vfn-form-mod/generate-study-form_Return> .

sp:sub  a                spin:Function ;
        rdfs:comment     "Returns the arithmetic difference of its operands." ;
        rdfs:label       "sub" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "-" .

sp:Sample  a             rdfs:Class ;
        rdfs:comment     "Represents SAMPLE aggregations" ;
        rdfs:label       "SAMPLE" ;
        rdfs:subClassOf  sp:Aggregation .

spif:hasAllObjects  a    spin:Function ;
        rdfs:comment     "Checks whether a given subject/predicate combination has all values enumerated from a given rdf:List. In other words, for each member ?object of the rdf:List, the triple (?arg1, ?arg2, ?object) must be in the model to return true. If the list is empty, true will also be returned." ;
        rdfs:label       "has all objects" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the match predicate" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "an rdf:List containing the match objects" ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  rdf:List
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the match subject" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:returnType  xsd:boolean .

sm:kbss-adapter-module
        a                sm:Module ;
        rdfs:label       "KBSS adapter module" ;
        rdfs:subClassOf  kbss-module:generic-kbss-modules .

sp:Load  a               rdfs:Class ;
        rdfs:comment     "A LOAD Update operation. The document to load is specified using sp:document, and the (optional) target graph using sp:into." ;
        rdfs:label       "Load" ;
        rdfs:subClassOf  sp:Update .

spl:min  a               spin:Function ;
        rdfs:comment     "Takes two arguments and returns the smaller one of them." ;
        rdfs:label       "min" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:lt ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  spin:_arg2
                                                                             ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal .

sp:offset  a                rdf:Property ;
        rdfs:comment        "The OFFSET solution modifier of a Query." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "offset" ;
        rdfs:range          xsd:long ;
        rdfs:subPropertyOf  sp:systemProperty .

spl:subPropertyOf  a     spin:Function ;
        rdfs:comment     "Checks whether a given property (?arg1) is a (transitive) sub-property of another property (?arg2)." ;
        rdfs:label       "sub property of" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subPropertyOf
                                                     ] ;
                                         sp:subject  spin:_arg1
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential sub-property." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential super-property." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  xsd:boolean .

sml:dataPath  a     rdf:Property ;
        rdfs:label  "data path" .

spl:StringFunctions  a   spin:Function ;
        rdfs:comment     "A collection of functions that return strings." ;
        rdfs:label       "String functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spif:buildUniqueURI  a   spin:Function ;
        rdfs:comment     "A variation of smf:buildURI that also makes sure that the created URI is unique in the current graph (that is, no triple contains the URI as either subject, predicate or object). This function is particularly useful for ontology mapping from a legacy data source into an RDF model." ;
        rdfs:label       "build unique URI" ;
        rdfs:subClassOf  spl:URIFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URI template such as \"<http://my.com/Instance-{?index}>\". If the template contains a full URI, then it must be wrapped by <...>, otherwise the system will treat it as a qname." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Resource .

sml:ImportModules  a     sm:Module ;
        rdfs:comment     "Modules that import information from some data source. Examples include modules to load files, to get XML from web sources and to take user input." ;
        rdfs:label       "Import" ;
        rdfs:subClassOf  sm:Modules ;
        spin:abstract    true ;
        composite:index  "0"^^xsd:int .

sp:orderBy  a               rdf:Property ;
        rdfs:comment        "Links a query with an ORDER BY clause where the values are rdf:List containing OrderByConditions or expressions. While the domain of this property is sp:Query, only Describe and Select queries can have values of it." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "order by" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:arg  a             rdf:Property ;
        rdfs:comment  "Abstract superproperty for the enumerated arg1, arg2 etc." ;
        rdfs:label    "arg" .

sp:year  a               spin:Function ;
        rdfs:comment     "Extracts the year from a date/time literal." ;
        rdfs:label       "year" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The date or dateTime argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "year" .

sp:replace  a            spin:Function ;
        rdfs:comment     "Replaces each non-overlapping occurrence of a regular expression pattern with a replacement string. Regular expession matching may involve modifier flags." ;
        rdfs:label       "replace" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-replace> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Additional flags for the replacement." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg4 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The pattern to replace.\n" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The replacement string." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "REPLACE" .

kbss-module:su-time  a   sm:Module ;
        rdfs:label       "SUTime " ;
        rdfs:subClassOf  sm:kbss-adapter-module .

sp:insertPattern  a         rdf:Property ;
        rdfs:comment        "Points to a list of sp:TripleTemplates or sp:NamedGraphs in a modify command." ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "insert pattern" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:sql  a          rdf:Property ;
        rdfs:label  "sql" .

sml:ConcatenateText  a   sm:Module ;
        rdfs:comment     "Executes a SPARQL Select query and creates a single long text string by concatenating all result variable bindings. This can be used, for example, to create a single \"fullName\" value from \"firstName\" and \"lastName\" properties (in which case the order of variables in the SELECT clause is relevant. Another use case is to build a single long string from multiple property values of the same kind, e.g. to concatenate all text bodies of all RSS items in a newsfeed. The resulting text can then be further processed by text processing modules such as text miners." ;
        rdfs:label       "Concatenate text" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The SPARQL Select query that will deliver the individual values that shall be concatenated." ;
                           spl:predicate  sml:selectQuery ;
                           spl:valueType  sp:Select
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "An optional separator that will be inserted between the text units." ;
                           spl:optional   true ;
                           spl:predicate  sml:separator
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the output variable that will contain the concatenated text string. Default: text." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable
                         ] .

sp:_type  a         sp:Variable ;
        sp:varName  "type" .

sml:FilterByConstruct
        a                sm:Module ;
        rdfs:comment     "Uses SPARQL CONSTRUCT queries to enumerate triples that shall be dropped from the input triple stream. The output triples of this module contain all input triples except those enumerated by the construct query. For example, if you want to drop all rdfs:comment triples from the input graph, then use a query such as CONSTRUCT {?s rdfs:comment ?o} WHERE {?s rdfs:comment ?o}." ;
        rdfs:label       "Filter by construct" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "A SPARQL Construct query delivering the triples that shall be dropped." ;
                           spl:minCount   "1"^^xsd:int ;
                           spl:predicate  sml:constructQuery
                         ] .

spl:instance  a             rdf:Property ;
        rdfs:domain         sp:ModuleCall ;
        rdfs:label          "instance" ;
        rdfs:subPropertyOf  sp:arg .

spr:cellFunction  a         rdf:Property ;
        rdfs:domain         spr:TableClass ;
        rdfs:label          "cell function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sp:Filter  a             rdfs:Class ;
        rdfs:comment     "A constraint element that evaluates a given expression to true or false." ;
        rdfs:label       "Filter" ;
        rdfs:subClassOf  sp:Element .

sml:xmlType  a      rdf:Property ;
        rdfs:label  "xmlType" ;
        rdfs:range  []  .

sml:askQuery  a             rdf:Property ;
        rdfs:label          "askQuery" ;
        rdfs:range          sp:Ask ;
        rdfs:subPropertyOf  spin:query .

sml:ExportModules  a     sm:Module ;
        rdfs:comment     "Modules that create some output, such as files or UI components." ;
        rdfs:label       "Export" ;
        rdfs:subClassOf  sm:Modules ;
        spin:abstract    true ;
        composite:index  "2"^^xsd:int .

spin:AskTemplate  a      rdfs:Class ;
        rdfs:comment     "A SPIN template that wraps an ASK query." ;
        rdfs:label       "Ask template" ;
        rdfs:subClassOf  spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The ASK query wrapped by this template." ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Ask
                         ] .

sml:Merge  a             sm:Module ;
        rdfs:comment     "This module type can be used to merge the variables and RDF triples from multiple input modules. The same is done by any other SPARQLMotion script that has multiple input modules. So while the sml:Merge module basically does not do anything at all, it can be useful to create a clean structure in your script, particularly if you have a case when you want to merge multiple graphs and then have multiple outgoing sm:next links from the merged graph." ;
        rdfs:label       "Merge" ;
        rdfs:subClassOf  sml:ControlFlowModules .

sml:propertyPrefix  a  rdf:Property ;
        rdfs:label  "propertyPrefix" ;
        rdfs:range  xsd:string .

sml:BindLiteralVariable
        a                sm:Module ;
        rdfs:comment     "Binds the output variable with a constant of a given datatype, or with a value derived from one or more other input variable values. The template could be as simple as {?varName} to insert the variable's value or more complex such as {?firstName} {?lastName}. This module can also be used to convert the datatype, e.g. to convert a xsd:string into a xsd:float." ;
        rdfs:label       "Bind literal variable" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the template string" ;
                           spl:predicate  sml:template
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The name of the output variable." ;
                           spl:predicate  sm:outputVariable
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The target datatype, e.g. xsd:string or xsd:int. Default: xsd:string." ;
                           spl:defaultValue  xsd:string ;
                           spl:predicate     sml:datatype ;
                           spl:valueType     rdfs:Datatype
                         ] .

spif:convertSPINRDFToString
        a                spin:Function ;
        rdfs:comment     "Converts a SPARQL query encoded in SPIN RDF format to a SPARQL string in textual form. The SPIN query must be well-formed in the context graph at execution time, and the provided argument must be the root of the expression (e.g., an instance of sp:Select).\n\nThis function is available as part of the TopBraid SPIN Libraries." ;
        rdfs:label       "convert SPIN RDF to string" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the root of the SPIN RDF query" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  sp:Query
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "true to embed HTML markup into the output" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:string .

sp:Max  a                rdfs:Class ;
        rdfs:comment     "Represents MAX aggregations." ;
        rdfs:label       "MAX" ;
        rdfs:subClassOf  sp:Aggregation .

sp:isURI  a              spin:Function ;
        rdfs:comment     "Checks whether a node is a URI." ;
        rdfs:label       "isURI" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node to check" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isURI" .

#try to get rid of sping construct - just keep s
spl:Attribute  a            spin:ConstructTemplate ;
        rdfs:comment        "Defines an \"attribute\" of a class. Attribute definitions bundle common modeling patterns known from object-oriented languages like UML. Each attribute can have min and max cardinality, a value type and a default value. The attribute links a class with one RDF property. This template should be used as spin:constraints on a class to make sure that classes meet the expected cardinalities and valueType constraints.\nIf a model wants to use spl:defaultValue, then it should instantiate the spl:ConstructDefaultValues as a spin:constructor at some root class, such as rdfs:Resource." ;
        rdfs:label          "Attribute" ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b0
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b0
                                              ]
                                              [ sp:object     [ sp:varName  "predicate" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b0
                                              ]
                                            ) ;
                              sp:where      ( [ a            sp:Union ;
                                                sp:elements  ( ( [ a              sp:Filter ;
                                                                   sp:expression  [ a        sp:and ;
                                                                                    sp:arg1  [ a        sp:bound ;
                                                                                               sp:arg1  [ sp:varName  "minCount" ]
                                                                                             ] ;
                                                                                    sp:arg2  [ a        sp:lt ;
                                                                                               sp:arg1  [ a        spl:objectCount ;
                                                                                                          sp:arg1  spin:_this ;
                                                                                                          sp:arg2  [ sp:varName  "predicate" ]
                                                                                                        ] ;
                                                                                               sp:arg2  [ sp:varName  "minCount" ]
                                                                                             ]
                                                                                  ]
                                                                 ]
                                                               ) ( [ a              sp:Filter ;
                                                                     sp:expression  [ a        sp:and ;
                                                                                      sp:arg1  [ a        sp:bound ;
                                                                                                 sp:arg1  [ sp:varName  "maxCount" ]
                                                                                               ] ;
                                                                                      sp:arg2  [ a        sp:gt ;
                                                                                                 sp:arg1  [ a        spl:objectCount ;
                                                                                                            sp:arg1  spin:_this ;
                                                                                                            sp:arg2  [ sp:varName  "predicate" ]
                                                                                                          ] ;
                                                                                                 sp:arg2  [ sp:varName  "maxCount" ]
                                                                                               ]
                                                                                    ]
                                                                   ]
                                                                 ) ( [ a              sp:Filter ;
                                                                       sp:expression  [ a        sp:bound ;
                                                                                        sp:arg1  [ sp:varName  "valueType" ]
                                                                                      ]
                                                                     ]
                                                                     [ sp:object     [ sp:varName  "value" ] ;
                                                                       sp:predicate  [ sp:varName  "predicate" ] ;
                                                                       sp:subject    spin:_this
                                                                     ]
                                                                     [ a              sp:Filter ;
                                                                       sp:expression  [ a        sp:not ;
                                                                                        sp:arg1  [ a        spl:instanceOf ;
                                                                                                   sp:arg1  [ sp:varName  "value" ] ;
                                                                                                   sp:arg2  [ sp:varName  "valueType" ]
                                                                                                 ]
                                                                                      ]
                                                                     ]
                                                                   ) )
                                              ]
                                            )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the default value of the attribute" ;
                              spl:optional   true ;
                              spl:predicate  spl:defaultValue
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "a comment describing the meaning of this attribute" ;
                              spl:optional   true ;
                              spl:predicate  rdfs:comment ;
                              spl:valueType  xsd:string
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the maximum number of values permitted for the property" ;
                              spl:optional   true ;
                              spl:predicate  spl:maxCount ;
                              spl:valueType  xsd:integer
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the RDF property holding the attribute value" ;
                              spl:predicate  spl:predicate ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the type that all values of the property must have" ;
                              spl:optional   true ;
                              spl:predicate  spl:valueType ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the minimum number of values permitted for the property" ;
                              spl:optional   true ;
                              spl:predicate  spl:minCount ;
                              spl:valueType  xsd:integer
                            ] ;
        spin:labelTemplate  "Attribute {?predicate} : {?valueType} [{?minCount},{?maxCount}]" .

spin:update  a              rdf:Property ;
        rdfs:comment        "Can be used to point from any resource to an Update." ;
        rdfs:label          "update" ;
        rdfs:range          sp:Update ;
        rdfs:subPropertyOf  spin:command .

sml:RenameFile  a        sm:Module ;
        rdfs:label       "Rename file" ;
        rdfs:subClassOf  sml:FileProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The new name of the file (excluding the path)." ;
                           spl:predicate  sml:newFileName ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to the file that shall be renamed." ;
                           spl:predicate  sml:filePath ;
                           spl:valueType  xsd:string
                         ] .

sp:str  a                spin:Function ;
        rdfs:comment     "Returns the lexical form of ?arg1 (a literal); returns the codepoint representation of ?arg1 (an IRI). This is useful for examining parts of an IRI, for instance, the host-name." ;
        rdfs:label       "str" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node to convert to string" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "str" .

spl:isUntypedLiteral  a  spin:Function ;
        rdfs:comment     "Checks whether a given literal is untyped. This function was introduced because the built-in datatype operand in SPARQL casts untyped literals to xsd:string, making it impossible to check it this way. This function here uses a work-around using sameTerm instead." ;
        rdfs:label       "isUntypedLiteral" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a              sp:Filter ;
                                         sp:expression  [ a        sp:and ;
                                                          sp:arg1  [ a        sp:isLiteral ;
                                                                     sp:arg1  spin:_arg1
                                                                   ] ;
                                                          sp:arg2  [ a        sp:not ;
                                                                     sp:arg1  [ a        sp:sameTerm ;
                                                                                sp:arg1  spin:_arg1 ;
                                                                                sp:arg2  [ a        xsd:string ;
                                                                                           sp:arg1  spin:_arg1
                                                                                         ]
                                                                              ]
                                                                   ]
                                                        ]
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The literal to test." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean .

sp:divide  a             spin:Function ;
        rdfs:comment     "Returns the arithmetic quotient of its operands." ;
        rdfs:label       "divide" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal ;
        spin:symbol      "/" .

sp:usingNamed  a            rdf:Property ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "using named" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

spl:ExistencePropertyPairConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:label          "Existence property pair constraint" ;
        rdfs:subClassOf     spl:PropertyPairConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b1
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b1
                                              ]
                                              [ sp:object     [ sp:varName  "property" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b1
                                              ]
                                              [ sp:object     [ sp:varName  "message" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b1
                                              ]
                                            ) ;
                              sp:where      ( [ a              sp:Filter ;
                                                sp:expression  [ a            sp:exists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "someValue" ] ;
                                                                                  sp:predicate  [ sp:varName  "otherProperty" ] ;
                                                                                  sp:subject    spin:_this
                                                                                ]
                                                                              )
                                                               ]
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a            sp:notExists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "object" ] ;
                                                                                  sp:predicate  [ sp:varName  "property" ] ;
                                                                                  sp:subject    spin:_this
                                                                                ]
                                                                              )
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  "Property must have a value because " ;
                                                                 sp:arg2  [ sp:varName  "otherProperty" ] ;
                                                                 sp:arg3  " has"
                                                               ] ;
                                                sp:variable    [ sp:varName  "message" ]
                                              ]
                                            )
                            ] ;
        spin:labelTemplate  "The property {?property} must have a value whenever {?otherProperty} has a value" .

spl:instanceOf  a           spin:Function ;
        rdfs:comment        "Checks whether a given resource (?arg1) has a given type (?arg2). In order to fulfill this condition, there must either be a triple ?arg1 rdf:type ?arg2, or ?instance rdf:type ?subClass where ?subClass is a subclass of ?arg2. If the first argument is a literal, then the second argument must be the matching XSD datatype." ;
        rdfs:label          "instanceOf" ;
        rdfs:subClassOf     spl:BooleanFunctions ;
        spin:body           [ a         sp:Ask ;
                              sp:where  ( [ a            sp:Union ;
                                            sp:elements  ( ( ( [ a              sp:Filter ;
                                                                 sp:expression  [ a        sp:or ;
                                                                                  sp:arg1  [ a        sp:isIRI ;
                                                                                             sp:arg1  spin:_arg1
                                                                                           ] ;
                                                                                  sp:arg2  [ a        sp:isBlank ;
                                                                                             sp:arg1  spin:_arg1
                                                                                           ]
                                                                                ]
                                                               ]
                                                             )
                                                             [ a           sp:TriplePath ;
                                                               sp:object   spin:_arg2 ;
                                                               sp:path     [ a           sp:ModPath ;
                                                                             sp:modMax   -2 ;
                                                                             sp:modMin   0 ;
                                                                             sp:subPath  rdfs:subClassOf
                                                                           ] ;
                                                               sp:subject  [ sp:varName  "class" ]
                                                             ]
                                                             [ sp:object     [ sp:varName  "class" ] ;
                                                               sp:predicate  rdf:type ;
                                                               sp:subject    spin:_arg1
                                                             ]
                                                           ) ( ( [ a              sp:Filter ;
                                                                   sp:expression  [ a        sp:isLiteral ;
                                                                                    sp:arg1  spin:_arg1
                                                                                  ]
                                                                 ]
                                                               )
                                                               [ a              sp:Bind ;
                                                                 sp:expression  [ a        sp:datatype ;
                                                                                  sp:arg1  spin:_arg1
                                                                                ] ;
                                                                 sp:variable    [ sp:varName  "datatype" ]
                                                               ]
                                                               [ a              sp:Filter ;
                                                                 sp:expression  [ a        sp:or ;
                                                                                  sp:arg1  [ a        sp:or ;
                                                                                             sp:arg1  [ a        sp:eq ;
                                                                                                        sp:arg1  [ sp:varName  "datatype" ] ;
                                                                                                        sp:arg2  spin:_arg2
                                                                                                      ] ;
                                                                                             sp:arg2  [ a        sp:eq ;
                                                                                                        sp:arg1  spin:_arg2 ;
                                                                                                        sp:arg2  rdfs:Literal
                                                                                                      ]
                                                                                           ] ;
                                                                                  sp:arg2  [ a        sp:and ;
                                                                                             sp:arg1  [ a        sp:or ;
                                                                                                        sp:arg1  [ a        sp:not ;
                                                                                                                   sp:arg1  [ a        sp:bound ;
                                                                                                                              sp:arg1  [ sp:varName  "datatype" ]
                                                                                                                            ]
                                                                                                                 ] ;
                                                                                                        sp:arg2  [ a        sp:eq ;
                                                                                                                   sp:arg1  rdf:langString ;
                                                                                                                   sp:arg2  [ sp:varName  "datatype" ]
                                                                                                                 ]
                                                                                                      ] ;
                                                                                             sp:arg2  [ a        sp:eq ;
                                                                                                        sp:arg1  spin:_arg2 ;
                                                                                                        sp:arg2  xsd:string
                                                                                                      ]
                                                                                           ]
                                                                                ]
                                                               ]
                                                             ) )
                                          ]
                                        )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the instance being tested" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the type that the instance must have" ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:labelTemplate  "{?arg1} instance of {?arg2}" ;
        spin:returnType     xsd:boolean ;
        owl:versionInfo     "Note that in TopBraid this function has been implemented in native Java code, for performance reasons." .

sml:ReturnSWPDocument
        a                sm:Module ;
        rdfs:comment     "Creates an SWP document using the current variable bindings and returns the resulting document as HTML, XML, SVG or text to the caller of the web service.\n\nNote that in order to insert a SWP view for a given resource (using ui:instanceView etc), you can use the snippet <ui:resourceView ui:resource=\"{= ?varName }\" />.\n\nAlso note that in order to use HTML or SVG tags in the sml:view, you will need to import the html.ttl or svg.ttl from the SWP ontologies into the script." ;
        rdfs:label       "Return SWP document" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A UISPIN document to render. This document may reference the bound variables of this module." ;
                           spl:predicate  sml:view ;
                           spl:valueType  <http://uispin.org/ui#Node>
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "True to only create a UISPIN snippet, e.g. without head/body." ;
                           spl:optional   true ;
                           spl:predicate  sml:snippet ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Overrides the default mime type returned by the UISPIN engine." ;
                           spl:optional   true ;
                           spl:predicate  sml:mimeType ;
                           spl:valueType  xsd:string
                         ] .

sp:distinct  a              rdf:Property ;
        rdfs:comment        "A marker property to indicate that a Select query is of type SELECT DISTINCT." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "distinct" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:expression  a            rdf:Property ;
        rdfs:comment        "Points to an expression, for example in a Filter or Assignment." ;
        rdfs:label          "expression" ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:IterateWhile  a      sm:Module ;
        rdfs:comment     "Repeats a sub-script (specified as body) as long as a SPARQL ASK query returns true. The output of each iteration is the input to the next. The output of the whole module is the result of the last iteration. No variable bindings are passed into or out of the body." ;
        rdfs:label       "Iterate while" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "An ASK query that is executed prior to each iteration. If the query returns false, the iteration stops and the most recent result graph will be returned." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:askQuery
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The start of the script that shall be executed as body in each iteration. The body must end with a single target module." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sm:body
                         ] .

sp:text  a                  rdf:Property ;
        rdfs:comment        "Can be attached to sp:Queries to store a textual representation of the query. This can be useful for tools that do not have a complete SPIN Syntax parser available." ;
        rdfs:label          "text" ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:ConstructNTFile  a   sm:Module ;
        rdfs:comment     "Executes a CONSTRUCT query in a streaming fashion and writes all resulting triples into a given N-Triples file. The resulting file can then be used as input to databases, e.g. using the TDB import wizard of TopBraid Composer. This module has a smaller memory foot-print than sml:ApplyConstruct, in which all constructed triples need to fit into memory." ;
        rdfs:label       "Construct NT file" ;
        rdfs:subClassOf  sml:ExportToLocalModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SPARQL Construct queries that deliver the triples that shall be added." ;
                           spl:minCount   1 ;
                           spl:predicate  sml:constructQuery
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to the target file path." ;
                           spl:predicate  sml:targetFilePath ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "True to overwrite the NT file. False to append." ;
                           spl:optional   true ;
                           spl:predicate  sml:replace ;
                           spl:valueType  xsd:boolean
                         ] .

sp:path  a                  rdf:Property ;
        rdfs:comment        "Points from a TriplePath to its path." ;
        rdfs:domain         sp:TriplePath ;
        rdfs:label          "path" ;
        rdfs:range          sp:Path ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:onCommit  a     rdf:Property ;
        rdfs:label  "on commit" ;
        rdfs:range  xsd:boolean .

spr:stepFunction  a         rdf:Property ;
        rdfs:comment        "The URI of the SPIN Function that shall be called at each step." ;
        rdfs:domain         spr:Aggregator ;
        rdfs:label          "step function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sp:document  a              rdf:Property ;
        rdfs:comment        "The URI of the document to load using a LOAD Update operation." ;
        rdfs:domain         sp:Load ;
        rdfs:label          "document" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:ModPath  a            rdfs:Class ;
        rdfs:comment     "A modified path such as rdfs:subClassOf*." ;
        rdfs:label       "Mod path" ;
        rdfs:subClassOf  sp:Path .

sp:iri  a                spin:Function ;
        rdfs:comment     "Creates a IRI resource (node) from a given IRI string (?arg1)." ;
        rdfs:label       "IRI" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The IRI string to convert to a resource." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Resource ;
        spin:symbol      "IRI" .

spl:objectSubProp  a     spin:Function ;
        rdfs:comment     "Gets the object of a given subject (?arg1) / predicate (?arg2) combination, also taking the sub-properties of ?arg2 into account. Note that if multiple values are present then the result might be unpredictably random." ;
        rdfs:label       "object sub prop" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "object" ]
                                               ) ;
                           sp:where            ( [ a           sp:TriplePath ;
                                                   sp:object   spin:_arg2 ;
                                                   sp:path     [ a           sp:ModPath ;
                                                                 sp:modMax   -2 ;
                                                                 sp:modMin   0 ;
                                                                 sp:subPath  rdfs:subPropertyOf
                                                               ] ;
                                                   sp:subject  [ sp:varName  "property" ]
                                                 ]
                                                 [ sp:object     [ sp:varName  "object" ] ;
                                                   sp:predicate  [ sp:varName  "property" ] ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The subject to get the object from." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate to get the object of (including sub-properties of it)." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] .

spl:Test-instanceOf-rdfsClass
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:Thing ;
                              sp:arg2  rdfs:Class
                            ] ;
        spl:testResult      true .

kbss-module:has-target-module-flag
        a                   rdf:Property ;
        rdfs:label          "has target module flag" ;
        rdfs:subPropertyOf  spin:query .

sp:fromNamed  a             rdf:Property ;
        rdfs:comment        "Specifies a named RDF Dataset used by a Query (FROM NAMED syntax in SPARQL). Values of this property must be URI resources." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "from named" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

spif:mod  a              spin:Function ;
        rdfs:comment     "The mathematical modulo operator, aka % in Java." ;
        rdfs:label       "mod" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first operand." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:returnType  xsd:integer .

spin:Warning  a       spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is a problem that may not have to be fixed but may lead to issues in the future." ;
        rdfs:label    "Warning" .

spin:SelectTemplates  a  spin:SelectTemplate ;
        rdfs:comment     "Suggested abstract base class for all SelectTemplates." ;
        rdfs:label       "Select templates" ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spin:fix  a                 rdf:Property ;
        rdfs:comment        "Can be used to link a ConstraintViolation with one or more UPDATE Templates that would help fix the violation." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "fix" ;
        rdfs:range          spin:UpdateTemplate ;
        rdfs:subPropertyOf  spin:systemProperty .

sml:ImportFileFromURL
        a                sm:Module ;
        rdfs:comment     "Downloads any file from a given URL and saves it to a location indicated by the targetFilePath argument. The destination directory is created if it does not exist. If the destination file exists, then this method will overwrite it." ;
        rdfs:label       "Import file from URL" ;
        rdfs:subClassOf  sml:ImportFromRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URL to download the file from" ;
                           spl:predicate  sml:url ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path the file will be downloaded to" ;
                           spl:predicate  sml:targetFilePath ;
                           spl:valueType  xsd:string
                         ] .

sml:datatype  a     rdf:Property ;
        rdfs:label  "datatype" ;
        rdfs:range  rdfs:Datatype .

kbss-module:cli  a       sm:Module ;
        rdfs:label       "Command-line" ;
        rdfs:subClassOf  sm:kbss-adapter-module .

sp:lt   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 < ?arg2." ;
        rdfs:label       "lt" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "<" .

spin:_arg3  a       sp:Variable ;
        sp:varName  "arg3" .

form-fss-gen-0.1:retrieve-saved-data
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "retrieve saved data" ;
        sm:next             <http://onto.fel.cvut.cz/ontologies/vfn-form-mod/bind-saved-data-root-question> ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "o" ] ;
                                                sp:predicate  [ sp:varName  "p" ] ;
                                                sp:subject    [ sp:varName  "s" ]
                                              ]
                                            ) ;
                              sp:text       "CONSTRUCT {\n    ?s ?p ?o .\n}\nWHERE {\n    SERVICE ?studySavedDataServiceUrl {\n           ?s ?p ?o .\n    }\n}" ;
                              sp:where      ( [ a              sp:Service ;
                                                sp:elements    ( [ sp:object     [ sp:varName  "o" ] ;
                                                                   sp:predicate  [ sp:varName  "p" ] ;
                                                                   sp:subject    [ sp:varName  "s" ]
                                                                 ]
                                                               ) ;
                                                sp:serviceURI  [ sp:varName  "studySavedDataServiceUrl" ]
                                              ]
                                            )
                            ] ;
        sml:replace         true .

spl:hasValue  a          spin:Function ;
        rdfs:comment     "Checks whether a given resource (?arg1) has a given value (?arg3) for a given property (?arg2) or one of the sub-properties of it." ;
        rdfs:label       "hasValue" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subPropertyOf
                                                     ] ;
                                         sp:subject  [ sp:varName  "p" ]
                                       ]
                                       [ sp:object     spin:_arg3 ;
                                         sp:predicate  [ sp:varName  "p" ] ;
                                         sp:subject    spin:_arg1
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject that is expected to have the value" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the property that is expected to hold the value" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the expected value" ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:returnType  xsd:boolean .

spin:SelectTemplate  a   rdfs:Class ;
        rdfs:comment     "A SPIN template that wraps a SELECT query." ;
        rdfs:label       "Select template" ;
        rdfs:subClassOf  spin:TableDataProvider , spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SELECT query wrapped by this template." ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Select
                         ] .

spl:Test-instanceOf-lingualString
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test"@en ;
                              sp:arg2  xsd:string
                            ] ;
        spl:testResult      true .

sm:Functions  a          sm:Function ;
        rdfs:comment     "An abstract superclass grouping together SPARQLMotion Functions." ;
        rdfs:label       "Functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:resultVariables  a       rdf:Property ;
        rdfs:comment        "An rdf:List of variables that are returned by a Select query." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "result variables" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

arg:datatype  a             rdf:Property ;
        rdfs:label          "datatype" ;
        rdfs:subPropertyOf  sp:arg .

sp:Desc  a               rdfs:Class ;
        rdfs:comment     "Marker to indicate descending order." ;
        rdfs:label       "Desc" ;
        rdfs:subClassOf  sp:OrderByCondition .

spl:Test-instanceOf-rdfsClassInheritance
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:Restriction ;
                              sp:arg2  rdfs:Class
                            ] ;
        spl:testResult      true .

sml:inputVariable  a  rdf:Property ;
        rdfs:label  "input variable" ;
        rdfs:range  xsd:string .

sml:BranchByAsk  a       sm:Module ;
        rdfs:comment     "Runs a SPARQL Ask query and, depending on the resulting boolean, either continues with the sm:if or the sm:else branch. Both branches can be sub-scripts, and the sm:if and sm:else should point to the entry points of those sub-scripts. Those entry modules will be passed the same RDF triples and variable bindings as passed to theBranchByAsk module itself. The result of the execution will be the target module (last module in the sub-script) of the selected branch. All variable bindings of the result module will also be passed on as output to the next module(s). Both branches must have exactly one target module. If a branch is empty then the module's input will be passed on unchanged." ;
        rdfs:label       "Branch by ask" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SPARQL Ask query that delivers true (sm:if) or false (sm:else) to determine the branching condition." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:askQuery
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The start of the child script that shall be executed if the ask query evaluates to true." ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  sm:if
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The start of the child script that shall be executed if the ask query evaluates to false." ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  sm:else
                         ] .

sml:RDFProcessingModules
        a                sm:Module ;
        rdfs:label       "RDF Processing" ;
        rdfs:subClassOf  sml:ProcessingModules ;
        spin:abstract    true .

spif:name  a             spin:Function ;
        rdfs:comment     "Gets a human-readable string representation from an RDF node. If it's a literal, the function will return the literal's lexical text. If it's a resource the system will use the rdfs:label (if exists) or otherwise use the qname." ;
        rdfs:label       "name" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node (literal or resource) that shall be rendered into a string" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string .

spif:currentTimeMillis
        a                spin:Function ;
        rdfs:comment     "Returns the current time in milliseconds. See System.currentTimeMillis() in Java." ;
        rdfs:label       "current time millis" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:returnType  xsd:long .

sp:now  a                spin:Function ;
        rdfs:comment     "Gets the current date and time as an xsd:dateTime literal." ;
        rdfs:label       "now" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:returnType  xsd:dateTime ;
        spin:symbol      "now" .

sp:Modify  a             rdfs:Class ;
        rdfs:comment     "Represents a MODIFY (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns are stored in sp:deletePattern and sp:insertPattern. The WHERE clause is represented using sp:where." ;
        rdfs:label       "Modify" ;
        rdfs:subClassOf  spin:Rule , sp:Update .

spl:NonExistencePropertyPairConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:label          "Non-existence property pair constraint" ;
        rdfs:subClassOf     spl:PropertyPairConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b2
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b2
                                              ]
                                              [ sp:object     [ sp:varName  "property" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b2
                                              ]
                                              [ sp:object     [ sp:varName  "message" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b2
                                              ]
                                            ) ;
                              sp:where      ( [ a              sp:Filter ;
                                                sp:expression  [ a            sp:notExists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "someValue" ] ;
                                                                                  sp:predicate  [ sp:varName  "otherProperty" ] ;
                                                                                  sp:subject    spin:_this
                                                                                ]
                                                                              )
                                                               ]
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a            sp:exists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "object" ] ;
                                                                                  sp:predicate  [ sp:varName  "property" ] ;
                                                                                  sp:subject    spin:_this
                                                                                ]
                                                                              )
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  "Property must have no values because " ;
                                                                 sp:arg2  [ sp:varName  "otherProperty" ] ;
                                                                 sp:arg3  " has none"
                                                               ] ;
                                                sp:variable    [ sp:varName  "message" ]
                                              ]
                                            )
                            ] ;
        spin:labelTemplate  "The property {?property} must have no values as long as {?otherProperty} has none" .

sml:FileProcessingModules
        a                sm:Module ;
        rdfs:label       "File Processing" ;
        rdfs:subClassOf  sml:ProcessingModules ;
        spin:abstract    true .

sp:rand  a               spin:Function ;
        rdfs:comment     "Returns a number between 0 (inclusive) and 1.0e0 (exclusive). Different numbers can be produced every time this function is invoked. Numbers should be produced with approximately equal probability." ;
        rdfs:label       "rand" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#idp3722352> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:returnType  xsd:double ;
        spin:symbol      "RAND" .

spin:constructor  a         rdf:Property ;
        rdfs:comment        "Can be used to attach a \"constructor\" to a class. A constructor is a SPARQL CONSTRUCT query or INSERT/DELETE Update operation that can add initial values to the current instance. At execution time, the variable ?this is bound to the current instance. Tools can call constructors of a class and its superclasses when an instance of a class has been created. Constructors will also be used to initialize resources that have received a new rdf:type triple as a result of spin:rules firing." ;
        rdfs:domain         rdfs:Class ;
        rdfs:label          "constructor" ;
        rdfs:range          spin:Rule ;
        rdfs:subPropertyOf  spin:command .

arg:maxCount  a             rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sml:CheckConstraints  a  sm:Module ;
        rdfs:comment     "Runs all SPIN constraints defined in the current input graph. The output of this module will be a new RDF graph that only contains the spin:ConstraintViolation instances. If the SELECT query is specified, then only the selected resources will be checked, not the whole model." ;
        rdfs:label       "Check constraints" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "An (optional) SPARQL SELECT query that delivers the resources that shall be checked." ;
                           spl:optional   true ;
                           spl:predicate  sml:selectQuery ;
                           spl:valueType  sp:Select
                         ] .

sp:langMatches  a        spin:Function ;
        rdfs:comment     "Returns true if language-tag (first argument) matches language-range (second argument) per the basic filtering scheme defined in [RFC4647] section 3.3.1." ;
        rdfs:label       "langMatches" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the literal that is expected to have ?arg2 as language tag" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the language tag that ?arg1 must have" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "langMatches" .

sml:variable  a     rdf:Property ;
        rdfs:label  "variable" ;
        rdfs:range  xsd:string .

sp:round  a              spin:Function ;
        rdfs:comment     "Returns the number with no fractional part that is closest to the argument. If there are two such numbers, then the one that is closest to positive infinity is returned. An error is raised if ?arg1 is not a numeric value." ;
        rdfs:label       "round" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-round> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The number to round." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "round" .

sp:substr  a             spin:Function ;
        rdfs:comment     "Gets the sub-string of a given string. The index of the first character is 1." ;
        rdfs:label       "substr" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-substr> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The end index." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The start index." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SUBSTR" .

form-fss-gen-0.1:bind-fss-model-service-url
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind FSS model service url" ;
        sm:next            form-fss-gen-0.1:attach-possible-values-hook , form-fss-gen-0.1:retrieve-model ;
        sm:outputVariable  "studyModelServiceUrl" ;
        sml:value          [ a        sp:iri ;
                             sp:arg1  [ a        sp:concat ;
                                        sp:arg1  [ a        sp:str ;
                                                   sp:arg1  [ sp:varName  "studyEndpointUrl" ]
                                                 ] ;
                                        sp:arg2  "?default-graph-uri=" ;
                                        sp:arg3  [ a        sp:encode_for_uri ;
                                                   sp:arg1  [ a        sp:str ;
                                                              sp:arg1  [ sp:varName  "studyModelUri" ]
                                                            ]
                                                 ]
                                      ]
                           ] .

sp:le   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 <= ?arg2." ;
        rdfs:label       "le" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "<=" .

sp:arg4  a                  rdf:Property ;
        rdfs:comment        "The forth argument of a function call." ;
        rdfs:label          "arg4" ;
        rdfs:subPropertyOf  sp:arg .

sp:regex  a              spin:Function ;
        rdfs:comment     "Returns true if a string (?arg1) matches the regular expression supplied as a pattern (?arg2) as influenced by the value of flags (?arg3), otherwise returns false." ;
        rdfs:label       "regex" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-regex> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the match pattern" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the flags" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "regex" .

arg:otherProperty  a        rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sml:ModifyPrefixes  a    sm:Module ;
        rdfs:comment     "Can be used to add or delete namespace prefix declarations from the input RDF stream so that these new prefixes are visible down stream of this module." ;
        rdfs:label       "Modify prefixes" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The prefix(es) to delete, e.g. \"my\"." ;
                           spl:minCount   "0"^^xsd:int ;
                           spl:predicate  sml:deletedPrefix
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "Namespaces to add, in the format \"prefix namespace\", i.e. the prefix must be followed by a space. Example: \"my http://my.com#\"." ;
                           spl:minCount   "0"^^xsd:int ;
                           spl:predicate  sml:addedPrefix
                         ] .

spr:colWidth  a          spin:Function ;
        rdfs:comment     "Gets the width (in pixels) of a given column. This may have been derived from spin:Columns attached to the table data provider." ;
        rdfs:label       "column width" ;
        rdfs:subClassOf  spr:ColWidthFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "function" ] ;
                                                   sp:predicate  spr:colWidthFunction ;
                                                   sp:subject    [ sp:varName  "tableClass" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spif:invoke ;
                                                                    sp:arg1  [ sp:varName  "function" ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:returnType  xsd:integer .

form-fss-gen-0.1:retrieve-model
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "Retrieve model" ;
        sm:next             form-fss-gen-0.1:construct-possible-values ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "o" ] ;
                                                sp:predicate  [ sp:varName  "p" ] ;
                                                sp:subject    [ sp:varName  "s" ]
                                              ]
                                            ) ;
                              sp:text       "CONSTRUCT {\n    ?s ?p ?o .\n}\nWHERE {\n    SERVICE ?studyModelServiceUrl {\n           ?s ?p ?o .\n    }\n}" ;
                              sp:where      ( [ a              sp:Service ;
                                                sp:elements    ( [ sp:object     [ sp:varName  "o" ] ;
                                                                   sp:predicate  [ sp:varName  "p" ] ;
                                                                   sp:subject    [ sp:varName  "s" ]
                                                                 ]
                                                               ) ;
                                                sp:serviceURI  [ sp:varName  "studyModelServiceUrl" ]
                                              ]
                                            )
                            ] ;
        sml:replace         true .

km-param:has-resource-uri
        a           rdf:Property ;
        rdfs:label  "has resource uri" .

sml:className  a    rdf:Property ;
        rdfs:label  "className" ;
        rdfs:range  xsd:string .

spin:ConstructTemplates
        a                spin:ConstructTemplate ;
        rdfs:comment     "Suggested abstract base class for all ConstructTemplates." ;
        rdfs:label       "Construct templates" ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spl:subjectCount  a      spin:Function ;
        rdfs:comment     "Gets the number of values of a given property (?arg1) at a given object (?arg2). The result is the number of matches of (?subject, ?arg1, ?arg2)." ;
        rdfs:label       "subjectCount" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:expression  [ a              sp:Count ;
                                                                    sp:expression  [ sp:varName  "subject" ]
                                                                  ] ;
                                                   sp:varName     "result"
                                                 ]
                                               ) ;
                           sp:where            ( [ sp:object     spin:_arg2 ;
                                                   sp:predicate  spin:_arg1 ;
                                                   sp:subject    [ sp:varName  "subject" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the predicate to get the number of subjects of" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the object to get the number of subjects of" ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:returnType  xsd:integer .

form-fss-gen-0.1:bind-fss-model-uri_Clone
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind FSS static form uri" ;
        sm:next            form-fss-gen-0.1:bind-fss-model-service-url_Clone ;
        sm:outputVariable  "studyStaticFormUri" ;
        sml:value          "http://vfn.cz/ontologies/fss-form-static" .

spl:count  a                rdf:Property ;
        rdfs:label          "count" ;
        rdfs:subPropertyOf  sp:arg .

form-fss-gen-0.1:bind-fss-endpoint-url
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind FSS endpoint url" ;
        sm:next            form-fss-gen-0.1:bind-fss-model-service-url , form-fss-gen-0.1:bind-fss-model-service-url_Clone , form-fss-gen-0.1:bind-fss-sample-service-url ;
        sm:outputVariable  "studyEndpointUrl" ;
        sml:value          [ sp:varName  "formGenRepositoryUrl" ] .

spl:Test-instanceOf-untypedString
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test" ;
                              sp:arg2  xsd:string
                            ] ;
        spl:testResult      true .

sml:ReturnUISPINDocument
        a                owl:DeprecatedClass , sm:Module ;
        rdfs:comment     "Deprecated: use sml:ReturnSWPDocument instead." ;
        rdfs:label       "Return UISPIN document" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A UISPIN document to render. This document may reference the bound variables of this module." ;
                           spl:predicate  sml:view ;
                           spl:valueType  <http://uispin.org/ui#Node>
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "True to only create a UISPIN snippet, e.g. without head/body." ;
                           spl:optional   true ;
                           spl:predicate  sml:snippet ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Overrides the default mime type returned by the UISPIN engine." ;
                           spl:optional   true ;
                           spl:predicate  sml:mimeType ;
                           spl:valueType  xsd:string
                         ] .

sml:javaClass  a    rdf:Property ;
        rdfs:label  "java class" .

spl:objectCount  a       spin:Function ;
        rdfs:comment     "Gets the number of values of a given property (?arg2) at a given subject (?arg1). The result is the number of matches of (?arg1, ?arg2, ?object)." ;
        rdfs:label       "objectCount" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:expression  [ a              sp:Count ;
                                                                    sp:expression  [ sp:varName  "object" ]
                                                                  ] ;
                                                   sp:varName     "result"
                                                 ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "object" ] ;
                                                   sp:predicate  spin:_arg2 ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject to get the number of objects of" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the property to get the number of values of" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  xsd:integer .

spin:violationValue  a      rdf:Property ;
        rdfs:comment        "An optional attribute of ConstraintViolations to point at a specific RDF node that caused the violation. Should be accessible from the root via the violationPath." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation value" ;
        rdfs:subPropertyOf  spin:systemProperty .

sml:CatchExceptions  a   sm:Module ;
        rdfs:comment     "Runs a sub-script (sm:body) and catches any errors (Java Exceptions) that happened within it. Normally, the SPARQLMotion engine exits on hitting any Exception, but this module provides a level of error handling. If an error occurs, then the result variable (sm:outputVariable) will contain the error message, and the result graph will be the same as the input of the module itself. Otherwise, the output graph will be the last module of the nested body script, and any variable bindings from the body will be applied to the next modules. As an option, the full stack trace can be bound to a variable as well." ;
        rdfs:label       "Catch exceptions" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The head of the script to execute. Must have a single end module." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sm:body ;
                           spl:valueType  sm:Modules
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The name of a variable that shall contain the full stack trace." ;
                           spl:optional   true ;
                           spl:predicate  sml:stackTraceVariable ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the output variable that shall hold the error message." ;
                           spl:defaultValue  "error" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

sp:resultNodes  a           rdf:Property ;
        rdfs:comment        "Contains the result nodes (URI resources or Variables) of a Describe query." ;
        rdfs:domain         sp:Describe ;
        rdfs:label          "result nodes" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:importToInputGraph
        a           rdf:Property ;
        rdfs:label  "import to input graph" ;
        rdfs:range  xsd:boolean .

spif:replaceAll  a       spin:Function ;
        rdfs:comment     "Does a string replacement based on the Java function String.replaceAll()." ;
        rdfs:label       "replace all" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The string to operate on." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The regular expression to search for." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The replacement string." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

sp:encode_for_uri  a     spin:Function ;
        rdfs:label       "encode_for_uri" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The string to convert." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "ENCODE_FOR_URI" .

spif:regex  a            spin:Function ;
        rdfs:comment     "An input string is converted into a result string by applying a match and replacement expressions.\nFor example, the input string \"semantic web\" with the match expression \"([A-z]+) ([A-z]+)\" and the replacement expression \"The $1 life\" returns the string \"The semantic life\".\nAn optional input string is returned, if no match occurs. If this string is empty and no match occurs, then the result string is unbound." ;
        rdfs:label       "regex" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The optional string returned as result string if no match occurs. If this string is empty and no match occurs, then the result string is unbound." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg4 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The replacement expression" ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

sp:or   a                spin:Function ;
        rdfs:comment     "Returns the logical OR between two (boolean) operands." ;
        rdfs:label       "or" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "||" .

sp:Clear  a              rdfs:Class ;
        rdfs:comment     "An Update operation that removes all triples from a specified graph. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent." ;
        rdfs:label       "Clear" ;
        rdfs:subClassOf  sp:Update .

spl:ConstraintTemplate
        a                rdfs:Class ;
        rdfs:comment     "Metaclass for CONSTRUCT templates that create spin:ConstraintViolations and can be used as values of spin:constraint." ;
        rdfs:label       "Constraint template" ;
        rdfs:subClassOf  spin:ConstructTemplate .

sp:Avg  a                rdfs:Class ;
        rdfs:comment     "Represents AVG aggregations." ;
        rdfs:label       "AVG" ;
        rdfs:subClassOf  sp:Aggregation .

sp:all  a                   rdf:Property ;
        rdfs:comment        "Used in DROP and CLEAR." ;
        rdfs:label          "all" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

spin:private  a             rdf:Property ;
        rdfs:comment        "Can be set to true to indicate that a SPIN function or template is only meant to be used as a helper of other modules, but not directly. Among others, this allows user interfaces to filter out private modules. Furthermore, it tells potential users of this module that they should avoid using this module, as it may not be stable." ;
        rdfs:domain         spin:Module ;
        rdfs:label          "private" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

arg:pattern  a              rdf:Property ;
        rdfs:label          "pattern" ;
        rdfs:subPropertyOf  sp:arg .

form-fss-gen-0.1:bind-fss-model-service-url_Clone
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind FSS static" ;
        sm:next            form-fss-gen-0.1:retrieve-static-form ;
        sm:outputVariable  "studyStaticFormServiceUrl" ;
        sml:value          [ a        sp:iri ;
                             sp:arg1  [ a        sp:concat ;
                                        sp:arg1  [ a        sp:str ;
                                                   sp:arg1  [ sp:varName  "studyEndpointUrl" ]
                                                 ] ;
                                        sp:arg2  "?default-graph-uri=" ;
                                        sp:arg3  [ a        sp:encode_for_uri ;
                                                   sp:arg1  [ a        sp:str ;
                                                              sp:arg1  [ sp:varName  "studyStaticFormUri" ]
                                                            ]
                                                 ]
                                      ]
                           ] .

sp:bnode  a              spin:Function ;
        rdfs:comment     "Constructs a blank node that is distinct from all blank nodes in the dataset being queried and distinct from all blank nodes created by calls to this constructor for other query solutions. If the no argument form is used, every call results in a distinct blank node. If the form with a simple literal is used, every call results in distinct blank nodes for different simple literals, and the same blank node for calls with the same simple literal within expressions for one solution mapping. This functionality is compatible with the treatment of blank nodes in SPARQL CONSTRUCT templates." ;
        rdfs:label       "bnode" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-bnode> ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A literal input node." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "BNODE" .

sp:Update  a             rdfs:Class ;
        rdfs:comment     "Abstract base class to group the various SPARQL UPDATE commands." ;
        rdfs:label       "Update" ;
        rdfs:subClassOf  sp:Command .

sp:SubQuery  a           rdfs:Class ;
        rdfs:comment     "A nested SELECT query inside of an element list. The query is stored in sp:query." ;
        rdfs:label       "Sub query" ;
        rdfs:subClassOf  sp:Element .

sml:ImportFromLocalModules
        a                sm:Module ;
        rdfs:comment     "Modules that import data from a data source on the user's local machine." ;
        rdfs:label       "Import from Local" ;
        rdfs:subClassOf  sml:ImportModules ;
        spin:abstract    true .

sml:filterGraph  a    rdf:Property ;
        rdfs:comment  "Links a filter module with a predecessor module to mark the predecessor module graph to be used for filtering in the filter module." ;
        rdfs:label    "filterGraph" ;
        rdfs:range    spin:Modules .

sml:CreateMatrix  a      sm:Module ;
        rdfs:comment     "Creates a matrix (spreadsheet) and binds it as a text value to a given output variable.\n\nThe rows and columns of the matrix are specified by two SPARQL queries. These queries must deliver variable bindings to enumerate the resources that shall be used as rows and columns. The cell values are then computed using a third query (cellQuery) that should reference the bound variable names from the row and column queries." ;
        rdfs:label       "Create matrix" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "A SPARQL Select query that delivers the resources or literals that define the rows. The query should have a single result variable, and this variable should be used in the cell query." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:rowQuery
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "A SPARQL Select query that delivers the resources or literals that define the columns. The query should have a single result variable, and this variable should be used in the cell query." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:columnQuery
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "A SPARQL Select query that is executed for each cell in the matrix. The query should reference the result variables of column and row queries (these will be bound automatically by the engine)." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:cellQuery
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The variable that will contain the resulting matrix as an xsd:string literal. Default: text." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable
                         ] .

sp:Tuple  a              rdfs:Class ;
        rdfs:comment     "Abstract base class for things that have subject and object." ;
        rdfs:label       "Tuple" ;
        rdfs:subClassOf  sp:SystemClass .

sml:xpath  a          rdf:Property ;
        rdfs:comment  "An XPath expression." ;
        rdfs:label    "xpath" ;
        rdfs:range    xsd:string .

spin:Function  a         rdfs:Class ;
        rdfs:comment     "Metaclass for functions that can be used in SPARQL expressions (e.g. FILTER or BIND). The function themselves are classes that are instances of this metaclass. Function calls are instances of the function classes, with property values for the arguments." ;
        rdfs:label       "Function" ;
        rdfs:subClassOf  spin:Module ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "the body of the function" ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body
                         ] .

sml:SerializeSPARQLResults
        a                sm:Module ;
        rdfs:comment     "Executes a SPARQL SELECT query and serializes its result to either XML or JSON format." ;
        rdfs:label       "Serialize SPARQLResults" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The SELECT query to execute." ;
                           spl:predicate  sml:selectQuery ;
                           spl:valueType  sp:Select
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the output variable that will contain the result." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The serialization format." ;
                           spl:defaultValue  sm:XML ;
                           spl:optional      true ;
                           spl:predicate     sml:serialization ;
                           spl:valueType     sm:ValueType
                         ] .

spin:Info  a          spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is a not a problem. This level can be used for diagnostic and debugging purposes." ;
        rdfs:label    "Info" .

sml:RenameResources  a   sm:Module ;
        rdfs:comment     "\"Renames\" a given set of resources so that all the triples they appear in are changed to a use a different URI to downstream modules. Old and new resources are specified by a SELECT query that has two result variables: \"old\" (the resources to rename) and \"new\" to specify a new URI (either as a literal or URI resource).\n\nNote that this module does not change the actual input graph, but only installs a filter above it. This filter may slow down succeeding operations, and you may want to \"assert\" the new graph (e.g., with a sml:ApplyConstruct) following this module." ;
        rdfs:label       "Rename resources" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A SELECT query with two result variables, \"new\" and \"old\"." ;
                           spl:predicate  sml:selectQuery ;
                           spl:valueType  sp:Select
                         ] .

sp:bound  a              spin:Function ;
        rdfs:comment     "Returns true if ?arg1 is bound to a value. Returns false otherwise. Variables with the value NaN or INF are considered bound." ;
        rdfs:label       "bound" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the variable or expression that is checked" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "bound" .

sml:ConvertStringToSPINRDF
        a                sm:Module ;
        rdfs:comment     "Converts a SPARQL query (in textual form) to a SPIN RDF syntax resource. The resulting output graph will contain exactly the triples of the SPIN query. These triples can then be used, for example, to analyze the structure of a SPARQL query dynamically. The inverse operation can be achieved using the SPARQL function smf:convertSPINRDFToString." ;
        rdfs:label       "Convert string to SPIN RDF" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the SPARQL query in textual form; with or without namespace prefixes" ;
                           spl:predicate  sml:text ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the URI of the query to create (either xsd:string or resource)" ;
                           spl:optional   true ;
                           spl:predicate  sml:uri
                         ] .

spl:RunTestCases  a      spin:SelectTemplate ;
        rdfs:comment     "Runs all spl:TestCases on the current model." ;
        rdfs:label       "Run test cases" ;
        rdfs:subClassOf  spin:SelectTemplates ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "testCase" ]
                                                 [ sp:varName  "expected" ]
                                                 [ sp:varName  "actual" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "expr" ] ;
                                                   sp:predicate  spl:testExpression ;
                                                   sp:subject    [ sp:varName  "testCase" ]
                                                 ]
                                                 [ a            sp:Optional ;
                                                   sp:elements  ( [ sp:object     [ sp:varName  "expected" ] ;
                                                                    sp:predicate  spl:testResult ;
                                                                    sp:subject    [ sp:varName  "testCase" ]
                                                                  ]
                                                                )
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spin:eval ;
                                                                    sp:arg1  [ sp:varName  "expr" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "actual" ]
                                                 ]
                                                 [ a              sp:Filter ;
                                                   sp:expression  [ a        sp:or ;
                                                                    sp:arg1  [ a        sp:ne ;
                                                                               sp:arg1  [ a        sp:bound ;
                                                                                          sp:arg1  [ sp:varName  "expected" ]
                                                                                        ] ;
                                                                               sp:arg2  [ a        sp:bound ;
                                                                                          sp:arg1  [ sp:varName  "actual" ]
                                                                                        ]
                                                                             ] ;
                                                                    sp:arg2  [ a        sp:and ;
                                                                               sp:arg1  [ a        sp:bound ;
                                                                                          sp:arg1  [ sp:varName  "expected" ]
                                                                                        ] ;
                                                                               sp:arg2  [ a        sp:ne ;
                                                                                          sp:arg1  [ sp:varName  "actual" ] ;
                                                                                          sp:arg2  [ sp:varName  "expected" ]
                                                                                        ]
                                                                             ]
                                                                  ]
                                                 ]
                                               )
                         ] .

sml:xml  a          rdf:Property ;
        rdfs:label  "xml" ;
        rdfs:range  rdf:XMLLiteral .

sml:ImportTextFile  a    sm:Module ;
        rdfs:comment     "Imports a text file into the xsd:string variable sm:outputVariable." ;
        rdfs:label       "Import text file" ;
        rdfs:subClassOf  sml:ImportFromLocalModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to a text file. The path can be relative to the current script's folder (e.g., myFolder/test.txt) or absolute to the workspace root /myProject/myFolder/test.txt." ;
                           spl:predicate  sml:sourceFilePath ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the variable that will contain the text of the file as an xsd:string literal. Default: text." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

spin:Error  a         spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is an error that should be fixed." ;
        rdfs:label    "Error" .

form-fss-gen-0.1:bind-attribute-query
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "bind-attribute-query" ;
        sm:next            form-fss-gen-0.1:attach-possible-values-hook ;
        sm:outputVariable  "attributePossibleValuesQueryTemplate" ;
        sml:value          "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX form: <http://onto.fel.cvut.cz/ontologies/form/> \nPREFIX stm: <http://vfn.cz/ontologies/study-model/> \n\nCONSTRUCT {\n     ?value rdfs:label ?label ;\n                 rdfs:comment ?explanation .\n     ?ValidNAValue rdfs:label ?NALabel ;\n                 rdfs:comment ?NAExplanation .\n     ?ValidNoneValue rdfs:label ?NoneLabel ;\n                 rdfs:comment ?NoneExplanation .\n      # Ordering within data\n      ?value1 form:has-preceding-value ?value2 . \n      # Other\n      ?otherValue form:has-preceding-value ?regularValue . \n      # None\n      ?ValidNoneValue form:has-preceding-value ?value ;\n                      form:has-preceding-value ?otherValue .\n      # N/A\n     ?ValidNAValue form:has-preceding-value  ?value ;\n                      form:has-preceding-value ?otherValue ;\n                      form:has-preceding-value ?ValidNoneValue .\n}\nWHERE {\n        {\n           ?value a ?questionOrigin .\n           ?value rdfs:label ?label .\n           OPTIONAL {\n                ?value rdfs:comment ?explanation .\n           }         \n        } UNION {\n\t\t   ?value1 a ?questionOrigin .\n\t\t   ?value2 a ?questionOrigin .\n\t\t   ?value1 stm:has-fss-preceding-entity ?value2 .\n        }UNION {\n            ?NAValue rdfs:label ?NALabel .\n            OPTIONAL {\n                 ?NAValue rdfs:comment ?NAExplanation .\n            }\n        } UNION {\n            ?NoneValue rdfs:label ?NoneLabel .\n            OPTIONAL {\n                ?NoneValue rdfs:comment ?NoneExplanation .\n            }\n       } UNION {\n                ?otherValue a ?questionOrigin .\n                ?regularValue a ?questionOrigin . \n\t\t\t    ?disjClass a  owl:Class .\n                ?disjClass (owl:disjointWith|^owl:disjointWith)?/owl:oneOf ?otherValueList .\n                ?otherValueList rdf:first ?otherValue ;\n    \t\t\t\t\t\t               rdf:rest rdf:nil .\n                ?disjClass (owl:disjointWith|^owl:disjointWith)?/owl:oneOf ?regularValueList .\n                ?regularValueList rdf:rest*/rdf:first ?regularValue .\n               FILTER NOT EXISTS {\n                      ?regularValueList rdf:rest rdf:nil .\n               }\t\n       }\n       BIND(IF(?NoneValue != <http://null>, ?NoneValue, ?notBoundVar) as ?ValidNoneValue)\n       BIND(IF(?NAValue != <http://null>, ?NAValue, ?notBoundVar) as ?ValidNAValue)\n} VALUES (?questionOrigin ?NAValue ?NoneValue) {\n     (<XXX_QO>  <XXX_NAValue> <XXX_NoneValue>)\n}" .

spr:resultFunction  a       rdf:Property ;
        rdfs:comment        "The URI of the SPIN Function that shall be called at the end of the steps." ;
        rdfs:domain         spr:Aggregator ;
        rdfs:label          "result function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sml:ApplyConstruct  a    sm:Module ;
        sm:icon	         "gamepad" ;
        rdfs:comment     "Runs one or more SPARQL Construct queries on the input triples. The output RDF will consist of the constructed triples and (unless sml:replace is true) the input triples." ;
        rdfs:label       "Apply Construct" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SPARQL Construct queries that deliver the triples that shall be added." ;
                           spl:minCount   1 ;
                           spl:predicate  sml:constructQuery
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "If set to true, the output triples will only contain the constructed triples. If no values or false are specified, the output will be the union of the input triples and the constructed triples." ;
                           spl:optional   true ;
                           spl:predicate  sml:replace
                         ] .

spin:UpdateTemplate  a   rdfs:Class ;
        rdfs:comment     "A SPIN template that has an UPDATE command as its body." ;
        rdfs:label       "Update template" ;
        rdfs:subClassOf  spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The UPDATE command wrapped by this template." ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Update
                         ] .

spif:Test-parseDate-hhmm
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "hhmm" ;
                              sp:arg1      "1830"
                            ] ;
        spl:testResult      "18:30:00"^^xsd:time .

sp:floor  a              spin:Function ;
        rdfs:comment     "Returns the largest (closest to positive infinity) number with no fractional part that is not greater than the value of ?arg1. An error is raised if ?arg1 is not a numeric value." ;
        rdfs:label       "floor" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-floor> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The value to get the floor of." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "floor" .

spr:startValue  a           rdf:Property ;
        rdfs:domain         spr:Aggregator ;
        rdfs:label          "start value" ;
        rdfs:subPropertyOf  spr:systemProperty .

sml:maxThreadCount  a  rdf:Property ;
        rdfs:label  "max thread count" .

sml:ReturnText  a        sm:Module ;
        rdfs:comment     "Represents the exit point of a function that returns text (mimetype: text). The function can be referenced from the outside (e.g., as a web service) by its URI or local name. When called from TBE, the resulting text will be displayed to the user in a pop-up dialog." ;
        rdfs:label       "Return text" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The text that shall be returned." ;
                           spl:optional   true ;
                           spl:predicate  sml:text
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The (optional) mime type of the result stream." ;
                           spl:defaultValue  "text" ;
                           spl:optional      true ;
                           spl:predicate     sml:mimeType
                         ] .

sp:graphNameNode  a         rdf:Property ;
        rdfs:comment        "The name (URI or Variable) of a NamedGraph." ;
        rdfs:domain         sp:NamedGraph ;
        rdfs:label          "graph name node" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

spin:MagicProperty  a    rdfs:Class ;
        rdfs:label       "Magic property" ;
        rdfs:subClassOf  spin:Function , rdf:Property .

sp:Path  a               rdfs:Class ;
        rdfs:comment     "The base class of SPARQL property path expressions. Paths are used by sp:TriplePath triple paths." ;
        rdfs:label       "Path" ;
        rdfs:subClassOf  sp:SystemClass .

spr:visitRow  a          spin:Function ;
        rdfs:comment     "Visits a given row ?arg2 of Table ?arg1 with a given spr:AggregatorStepFunction (?arg5) and then calls itself recursively until the last value index (?arg4) has been reached. ?arg6 is the result of the previous step." ;
        rdfs:label       "visit row" ;
        rdfs:subClassOf  spr:Functions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  [ a        spr:cell ;
                                                                    sp:arg1  spin:_arg1 ;
                                                                    sp:arg2  spin:_arg2 ;
                                                                    sp:arg3  spin:_arg3
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "value" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:bound ;
                                                                               sp:arg1  [ sp:varName  "value" ]
                                                                             ] ;
                                                                    sp:arg2  [ a        spif:invoke ;
                                                                               sp:arg1  spin:_arg5 ;
                                                                               sp:arg2  [ sp:varName  "arg6" ] ;
                                                                               sp:arg3  [ sp:varName  "value" ]
                                                                             ] ;
                                                                    sp:arg3  [ sp:varName  "arg6" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "next" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:lt ;
                                                                               sp:arg1  [ a        sp:add ;
                                                                                          sp:arg1  spin:_arg3 ;
                                                                                          sp:arg2  1
                                                                                        ] ;
                                                                               sp:arg2  spin:_arg4
                                                                             ] ;
                                                                    sp:arg2  [ a        spr:visitRow ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  spin:_arg2 ;
                                                                               sp:arg3  [ a        sp:add ;
                                                                                          sp:arg1  spin:_arg3 ;
                                                                                          sp:arg2  1
                                                                                        ] ;
                                                                               sp:arg4  spin:_arg4 ;
                                                                               sp:arg5  spin:_arg5 ;
                                                                               sp:arg6  [ sp:varName  "next" ]
                                                                             ] ;
                                                                    sp:arg3  [ sp:varName  "next" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The row to iterate over." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The step function." ;
                           spl:predicate  sp:arg5 ;
                           spl:valueType  spin:Function
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The current aggregate value." ;
                           spl:predicate  sp:arg6
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The spr:Table to iterate over." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The current step index." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The max number of steps to make." ;
                           spl:predicate  sp:arg4 ;
                           spl:valueType  xsd:integer
                         ] .

sm:nodeX  a           rdf:Property ;
        rdfs:comment  "The x coordinate of a module on a diagram." ;
        rdfs:label    "node x" ;
        rdfs:range    xsd:integer .

sml:NTriple  a      sml:RDFSerialization ;
        rdfs:label  "NTriple" .

sml:bindVariables  a  rdf:Property ;
        rdfs:label  "bind variables" ;
        rdfs:range  xsd:boolean .

spl:object  a            spin:Function ;
        rdfs:comment     "Gets the object of a given subject (?arg1) / predicate (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random." ;
        rdfs:label       "object" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "object" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "object" ] ;
                                                   sp:predicate  spin:_arg2 ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The subject to get the object from." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate to get the object of." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        owl:versionInfo  "Note that in TopBraid this function has been implemented in native Java code, for performance reasons." .

spr:systemProperty  a  rdf:Property ;
        rdfs:comment  "An \"abstract\" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience." ;
        rdfs:label    "system property" .

spr:Table  a          spr:TableClass ;
        rdfs:comment  "Base class of table classes. Must define the URIs of low-level SPARQL functions that are used by SPR to access individual table cells and table meta data." ;
        rdfs:label    "Table" .

kbss-module:bind-rdf-content-hash
        a                sm:Module ;
        rdfs:comment     "Bind hash that is computed from input rdf data" ;
        rdfs:label       "Bind rdf content hash" ;
        rdfs:subClassOf  sm:kbss-adapter-module ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Output variable to store computed hash" ;
                           spl:optional   false ;
                           spl:predicate  sm:outputVariable
                         ] .

sp:Variable  a           rdfs:Class ;
        rdfs:comment     "A variable mentioned in a Triple or expression. Variables are often blank nodes with the variable name stored in ts:name. Variables can also be supplied with a URI in which case the system will attempt to reuse the same variable instance across multiple query definitions." ;
        rdfs:label       "Variable" ;
        rdfs:subClassOf  sp:SystemClass .

sml:databaseType  a  rdf:Property ;
        rdfs:label  "database type" ;
        rdfs:range  sml:DatabaseType .

sp:mul  a                spin:Function ;
        rdfs:comment     "Returns the arithmetic product of its operands." ;
        rdfs:label       "mul" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "*" .

sml:template  a     rdf:Property ;
        rdfs:label  "template" ;
        rdfs:range  xsd:string .

spin:violationRoot  a       rdf:Property ;
        rdfs:comment        "The root resource of the violation (often ?this in the constraint body)." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation root" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  spin:systemProperty .

sp:ElementList  a        rdfs:Class ;
        rdfs:comment     "A list of Elements. This class is never instantiated directly as SPIN will use plain rdf:Lists to store element lists." ;
        rdfs:label       "Element list" ;
        rdfs:subClassOf  sp:ElementGroup , rdf:List .

sp:TripleTemplate  a     rdfs:Class ;
        rdfs:comment     "A prototypical triple used as template in the head of a Construct query. May contain variables." ;
        rdfs:label       "Triple template" ;
        rdfs:subClassOf  sp:Triple .

sml:inferencingMode  a  rdf:Property ;
        rdfs:label  "inferencingMode" .

km-sesame:p-sesame-repository-name
        a           rdf:Property ;
        rdfs:label  "Sesame repository name" .

spif:titleCase  a        spin:Function ;
        rdfs:comment     "Converts an input string to title case.\nFor example, \"germany\" becomes \"Germany\".\nAn optional matching expression can be given to only convert the matched characters." ;
        rdfs:label       "title case" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

spif:split  a            spin:MagicProperty ;
        rdfs:comment     "Splits a given sting and iterates over all sub-strings. An unbound variable must be placed on the left side of this magic property. A list with two members must be on the right. The first is the string to split, and the second is a regular expression.\n\nFor example, ?str spif:split (\"Hello World\", \" \") will bind ?str to \"Hello\" and \"World\"." ;
        rdfs:label       "split" ;
        rdfs:subClassOf  spin:MagicProperties .

spin:select  a           spin:MagicProperty ;
        rdfs:comment     "Executes a given SELECT or ASK query (or a corresponding SPIN template call) and binds its result rows to the variables specified on the right hand side. May also pre-bind variables for the query execution, using name-value pairs on the left hand side.\n\nExample:\n\n    (?query \"this\" owl:Thing) spin:select (?a ?b)\n\nwill execute the sp:Select or sp:Ask that ?query points to and pre-bind ?this with the value of owl:Thing for the execution of the query. The first result variable of the query's result set will be bound to ?a, the second to ?b etc. If the nodes on the right are bound (or constants) then it will match with the values from the result set." ;
        rdfs:label       "select" ;
        rdfs:subClassOf  spin:MagicProperties .

sp:Create  a             rdfs:Class ;
        rdfs:comment     "An Update operation that creates a new empty graph with a name specified by sp:graphIRI. May have sp:silent set to true." ;
        rdfs:label       "Create" ;
        rdfs:subClassOf  sp:Update .

spl:Test-instanceOf-typedString
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test" ;
                              sp:arg2  xsd:string
                            ] ;
        spl:testResult      true .

spin:systemProperty  a  rdf:Property ;
        rdfs:comment  "An \"abstract\" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience." ;
        rdfs:label    "system property" .

sml:predicate  a    rdf:Property ;
        rdfs:label  "predicate" ;
        rdfs:range  rdf:Property .

spin:_arg1  a       sp:Variable ;
        sp:varName  "arg1" .

sp:coalesce  a           spin:Function ;
        rdfs:comment     "Takes any number of arguments, and returns the first bound argument, starting at the left." ;
        rdfs:label       "COALESCE" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:symbol      "COALESCE" .

spr:colName  a           spin:Function ;
        rdfs:comment     "Gets the name of a column in a given result set. The name is usually derived from the variable name, but may also originate from spin:Columns attached to the table data provider." ;
        rdfs:label       "column name" ;
        rdfs:subClassOf  spr:ColNameFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "function" ] ;
                                                   sp:predicate  spr:colNameFunction ;
                                                   sp:subject    [ sp:varName  "tableClass" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spif:invoke ;
                                                                    sp:arg1  [ sp:varName  "function" ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:returnType  xsd:string .

sp:hours  a              spin:Function ;
        rdfs:comment     "Extracts the hours from a date/time literal." ;
        rdfs:label       "hours" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The dateTime or time argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "hours" .

sp:NotExists  a          rdfs:Class ;
        rdfs:comment     "A NOT EXISTS element group." ;
        rdfs:label       "Not exists" ;
        rdfs:subClassOf  sp:ElementGroup .

sp:strlang  a            spin:Function ;
        rdfs:comment     "Takes a string (?arg1) and a language (?arg2) and constructs a literal with a corresponding language tag." ;
        rdfs:label       "strlang" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strlang> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The string value." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The language tag, e.g. \"en-AU\"." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdf:PlainLiteral ;
        spin:symbol      "STRLANG" .

sml:ignoreDoctype  a  rdf:Property ;
        rdfs:label  "ignore document type" ;
        rdfs:range  xsd:boolean .

sp:InsertData  a         rdfs:Class ;
        rdfs:comment     "An Update operation to insert specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs." ;
        rdfs:label       "Insert data" ;
        rdfs:subClassOf  sp:Update .

spif:invoke  a           spin:Function ;
        rdfs:comment     "Calls another SPARQL function specified by a URI resource (?arg1), with additional arguments passed into from ?arg2 onwards. This can be used to dynamically call functions, the URI of which is now known statically. The result of the function call will be passed on as result of the invoke call.\n\nThe function can also be a binary built-in SPARQL function using the SPIN function identifiers from the SPL ontology. For example, sp:gt will be executed as ?left > ?right." ;
        rdfs:label       "invoke" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The forth argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg5
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The third argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg4
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URI resource defining the function to call." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spin:Function
                         ] .

spin:body  a                rdf:Property ;
        rdfs:comment        "The body of a Function or Template. This points to a Query instance. For Functions, this is limited to either ASK or SELECT type queries. If the body is the ASK function then the return value is xsd:boolean. Otherwise, the SELECT query must have a single return variable. The first binding of this SELECT query will be returned as result of the function call." ;
        rdfs:label          "body" ;
        rdfs:range          sp:Command ;
        rdfs:subPropertyOf  spin:systemProperty .

spif:lowerCase  a        spin:Function ;
        rdfs:comment     "Converts an input string into lower case. \nFor example, \"SEMANTIC Web\" becomes \"semantic web\".\nAn optional matching expression can be given to only convert the matched characters." ;
        rdfs:label       "lower case" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

sml:filePath  a     rdf:Property ;
        rdfs:label  "file path" ;
        rdfs:range  xsd:string .

spin:columnIndex  a         rdf:Property ;
        rdfs:comment        "The index of a column (from left to right) starting at 0." ;
        rdfs:domain         spin:Column ;
        rdfs:label          "column index" ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  spin:systemProperty .

sml:ExportToLocalModules
        a                sm:Module ;
        rdfs:label       "Export to Local" ;
        rdfs:subClassOf  sml:ExportModules ;
        spin:abstract    true .

<http://onto.fel.cvut.cz/ontologies/vfn-form-mod/bind-root-question>
        sml:selectQuery  [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "rootQuestion" ]
                                               ) ;
                           sp:text             "SELECT ?rootQuestion \nWHERE {\n    BIND(ff:fertility-saving-study-q as ?rootQuestion)\n}" ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  ff:fertility-saving-study-q ;
                                                   sp:variable    [ sp:varName  "rootQuestion" ]
                                                 ]
                                               )
                         ] .

spr:AggregatorFunctions
        a                spin:Function ;
        rdfs:label       "Aggregator functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The aggregator to perform." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Aggregator
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The spr:Table to iterate over." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  spr:Table
                         ] .

sml:RDFXML  a       sml:RDFSerialization ;
        rdfs:label  "RDF/XML" .

sp:Optional  a           rdfs:Class ;
        rdfs:comment     "An optional element in a query." ;
        rdfs:label       "Optional" ;
        rdfs:subClassOf  sp:ElementGroup .

sp:object  a                rdf:Property ;
        rdfs:comment        "An RDF Node or Variable describing the object of a triple." ;
        rdfs:domain         sp:Tuple ;
        rdfs:label          "object" ;
        rdfs:subPropertyOf  sp:systemProperty .

spin:cachable  a            rdf:Property ;
        rdfs:comment        "Can be set to true to instruct the SPIN engine that it may cache the results of all calls to the associated function. Functions should only be marked as cachable if the same combination of input arguments always returns the same result. Functions that query a graph or other background data that may change over time should not be cached. Caching can significantly improve performance of frequently needed functions." ;
        rdfs:domain         spin:Function ;
        rdfs:label          "cachable" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

sml:class  a        rdf:Property ;
        rdfs:label  "class" ;
        rdfs:range  rdfs:Class .

spl:maxCount  a             rdf:Property ;
        rdfs:subPropertyOf  spl:count .

sm:returnModule  a    rdf:Property ;
        rdfs:comment  "Can be attached to user-defined SPARQLMotion functions to define the return module of the function's SPARQLMotion script. The result of the function will depend on the selected return module type." ;
        rdfs:domain   spin:Function ;
        rdfs:label    "return module" ;
        rdfs:range    sm:Modules .

sml:ReturnXML  a         sm:Module ;
        rdfs:comment     "Represents the exit point of a function that returns XML. The function can be referenced from the outside (e.g., as a web service) by its URI or local name." ;
        rdfs:label       "Return XML" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The XML document that shall be returned." ;
                           spl:predicate  sml:xml
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The (optional) mime type of the result stream." ;
                           spl:defaultValue  "text/xml" ;
                           spl:optional      true ;
                           spl:predicate     sml:mimeType
                         ] .

spif:buildString  a      spin:Function ;
        rdfs:comment     "Constructs a new string by inserting the existing variable bindings into a template. The template can mention variable names in curly braces, such as \"Hello {?index}\" would create \"Hello 42\" is ?index has the value 42. As an alternative to variable names, the function can take additional arguments after the template, the variables of which can be accessed using {?1}, {?2} etc. For example: smf:buildString(\"Hello-{?1}-{?2}\", ?day, ?month) would insert day and month at places {?1} and {?2}." ;
        rdfs:label       "build string" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the template string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

spif:camelCase  a        spin:Function ;
        rdfs:comment     "Converts an input string into camel case. \nFor example, \"semantic web\" becomes \"SemanticWeb\".\nAn optional matching expression can be given to only convert the matched characters." ;
        rdfs:label       "camel case" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

sp:isNumeric  a          spin:Function ;
        rdfs:comment     "Returns true if arg1 is a numeric value. Returns false otherwise. term is numeric if it has an appropriate datatype (see the section Operand Data Types) and has a valid lexical form, making it a valid argument to functions and operators taking numeric arguments." ;
        rdfs:label       "is numeric" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-isNumeric> ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The node to check whether it's numeric.\n" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "isNumeric" .

sp:Sum  a                rdfs:Class ;
        rdfs:comment     "Represents sum aggregations, e.g. SELECT SUM(?varName)..." ;
        rdfs:label       "SUM" ;
        rdfs:subClassOf  sp:Aggregation .

sp:arg2  a                  rdf:Property ;
        rdfs:comment        "The second argument of a function call." ;
        rdfs:label          "arg2" ;
        rdfs:subPropertyOf  sp:arg .

sml:value  a        rdf:Property ;
        rdfs:label  "value" .

sm:Module  a             rdfs:Class ;
        rdfs:comment     "The metaclass of SPARQLMotion modules. SPARQLMotion modules are SPIN Modules that can perform some arbitrary data processing task.\nThe instances of this metaclass define the input properties that are used to control the behavior. In order to declare a property, the following two SPIN templates must be used (attached to the class via spin:constraint):\n- spl:Argument: this is the most common case for single-valued properties that are configured by the user. In addition to concrete RDF nodes, spl:Arguments can also point to a SPARQL SELECT query (sp:Select), a SPIN Template call, or a SPARQL expression. In those cases, the value of the property will be computed dynamically at execution time. The nested SPARQL expressions can access any pre-bound input variable.\n- spl:Attribute: this should be used for any other value, such as SPARQL queries that drive the behavior of the module. No inline queries are supported for spl:Attributes." ;
        rdfs:label       "Module" ;
        rdfs:subClassOf  spin:Module .

sp:strdt  a              spin:Function ;
        rdfs:comment     "Constructs a literal with lexical form and type as specified by the arguments." ;
        rdfs:label       "strdt" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strdt> ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The lexical form of the new literal." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The datatype of the new literal." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Datatype
                         ] ;
        spin:symbol      "STRDT" .

sp:UUID  a               spin:Function ;
        rdfs:comment     "Returns a fresh IRI from the UUID URN scheme. Each call of UUID() returns a different UUID. It must not be the \"nil\" UUID (all zeroes). The variant and version of the UUID is implementation dependent." ;
        rdfs:label       "UUID" ;
        rdfs:subClassOf  spl:URIFunctions ;
        spin:returnType  rdfs:Resource ;
        spin:symbol      "UUID" .

composite:parent  a    owl:ObjectProperty ;
        rdfs:comment   "The object is the parent of the subject." ;
        owl:inverseOf  composite:child .

sml:constructQuery  a       rdf:Property ;
        rdfs:label          "constructQuery" ;
        rdfs:range          sp:Construct ;
        rdfs:subPropertyOf  spin:query .

kbss-module:has-output-graph-constraint
        a                   rdf:Property ;
        rdfs:label          "has output graph constraint" ;
        rdfs:subPropertyOf  spin:query .

spin:labelTemplate  a       rdf:Property ;
        rdfs:comment        "A template string for displaying instantiations of a module in human-readable form. The template may contain the argument variable names in curly braces to support substitution. For example, \"The number of values of the {?arg1} property.\"" ;
        rdfs:domain         spin:Template ;
        rdfs:label          "label template" ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:_this  a         sp:Variable ;
        rdfs:comment  "A system variable representing the current context instance in a rule or constraint." ;
        rdfs:label    "_this" ;
        sp:varName    "this" .

spl:subject  a           spin:Function ;
        rdfs:comment     "Gets the \"first\" subject of a given predicate (?arg1)/object (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random." ;
        rdfs:label       "subject" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "subject" ]
                                               ) ;
                           sp:where            ( [ sp:object     spin:_arg2 ;
                                                   sp:predicate  spin:_arg1 ;
                                                   sp:subject    [ sp:varName  "subject" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The object." ;
                           spl:predicate  sp:arg2
                         ] .

sp:md5  a                spin:Function ;
        rdfs:comment     "Returns the MD5 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case." ;
        rdfs:label       "md5" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-md5> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "MD5" .

arg:max  a                  rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sp:predicate  a             rdf:Property ;
        rdfs:comment        "A resource or Variable describing the predicate of a triple." ;
        rdfs:domain         sp:Triple ;
        rdfs:label          "predicate" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Let  a                rdfs:Class , owl:DeprecatedClass ;
        rdfs:comment     "Deprecated: use sp:Bind instead.\n\nA variable assignment (LET (?<varName> := <expression>)). Not part of the SPARQL 1.0 standard, but (for example) ARQ." ;
        rdfs:label       "Let" ;
        rdfs:subClassOf  sp:Bind .

spin:column  a              rdf:Property ;
        rdfs:comment        "Can link a TableDataProvider (esp. SelectTemplate) with one or more columns that provide metadata for rendering purposes. Columns can be sorted by their spin:columnIndex (which must align with the ordering of variables in the SELECT query starting with 0). Not all result variables of the underlying query need to have a matching spin:Column." ;
        rdfs:domain         spin:TableDataProvider ;
        rdfs:label          "column" ;
        rdfs:range          spin:Column ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:query  a               rdf:Property ;
        rdfs:comment        "Can be used to point from any resource to a Query." ;
        rdfs:label          "query" ;
        rdfs:range          sp:Query ;
        rdfs:subPropertyOf  spin:command .

form-fss-gen-0.1:bind-fss-sample-service-url
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind FSS sample form service url" ;
        sm:next            <http://onto.fel.cvut.cz/ontologies/vfn-form-mod/retrieve-sample-form> ;
        sm:outputVariable  "studySampleFormServiceUrl" ;
        sml:value          [ a        sp:iri ;
                             sp:arg1  [ a        sp:concat ;
                                        sp:arg1  [ a        sp:str ;
                                                   sp:arg1  [ sp:varName  "studyEndpointUrl" ]
                                                 ] ;
                                        sp:arg2  "?default-graph-uri=" ;
                                        sp:arg3  [ a        sp:encode_for_uri ;
                                                   sp:arg1  [ a        sp:str ;
                                                              sp:arg1  [ sp:varName  "studySampleFormUri" ]
                                                            ]
                                                 ]
                                      ]
                           ] .

sm:child  a           rdf:Property ;
        rdfs:comment  "Links a parent module with a child module that marks the start of a nested sub-script. This property is not meant to be used directly, but its primary function is to serve as superproperty of sm:body, sm:if and sm:else." ;
        rdfs:label    "child" ;
        rdfs:range    spin:Modules .

spin:columnType  a          rdf:Property ;
        rdfs:comment        "The datatype or resource type of a spin:Column. For example this is useful as metadata to inform a rendering engine that numeric columns (e.g. xsd:float) need to be right-aligned." ;
        rdfs:domain         spin:Column ;
        rdfs:label          "column type" ;
        rdfs:range          rdfs:Class ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:rule  a                spin:RuleProperty ;
        rdfs:comment        "An inferencing rule attached to a class. Rules are expressed as CONSTRUCT queries or INSERT/DELETE operations where the variable ?this will be bound to the current instance of the class. These inferences can be used to derive new values from existing values at the instance." ;
        rdfs:domain         rdfs:Class ;
        rdfs:label          "rule" ;
        rdfs:range          spin:Rule ;
        rdfs:subPropertyOf  spin:command .

sm:outputVariable  a  rdf:Property ;
        rdfs:comment  "The name of the declared output variable of a module. This is typically used by modules to enable script users to bind the output of a module with matching variables in the target module." ;
        rdfs:label    "outputVariable" ;
        rdfs:range    xsd:string .

sp:SystemClass  a        rdfs:Class ;
        rdfs:comment     "An \"artificial\" root class that groups all SP classes. This makes them look much less overwhelming in UI tools. Typical end users don't need to see those classes anyway." ;
        rdfs:label       "SP System class" ;
        rdfs:subClassOf  rdfs:Resource .

spr:aggregateRow  a      spin:Function ;
        rdfs:comment     "Applies the spr:Aggregator ?arg1 to all columns of row ?arg3 of spr:Table ?arg2." ;
        rdfs:label       "aggregate row" ;
        rdfs:subClassOf  spr:AggregatorFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "stepFunction" ] ;
                                                   sp:predicate  spr:stepFunction ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "startValue" ] ;
                                                   sp:predicate  spr:startValue ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ a            sp:Optional ;
                                                   sp:elements  ( [ sp:object     [ sp:varName  "resultFunction" ] ;
                                                                    sp:predicate  spr:resultFunction ;
                                                                    sp:subject    spin:_arg1
                                                                  ]
                                                                )
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spr:colCount ;
                                                                    sp:arg1  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "colCount" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spr:visitRow ;
                                                                    sp:arg1  spin:_arg2 ;
                                                                    sp:arg2  spin:_arg3 ;
                                                                    sp:arg3  0 ;
                                                                    sp:arg4  [ a        sp:sub ;
                                                                               sp:arg1  [ sp:varName  "colCount" ] ;
                                                                               sp:arg2  1
                                                                             ] ;
                                                                    sp:arg5  [ sp:varName  "stepFunction" ] ;
                                                                    sp:arg6  [ sp:varName  "startValue" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "stepped" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:bound ;
                                                                               sp:arg1  [ sp:varName  "resultFunction" ]
                                                                             ] ;
                                                                    sp:arg2  [ a        spif:invoke ;
                                                                               sp:arg1  [ sp:varName  "resultFunction" ] ;
                                                                               sp:arg2  [ sp:varName  "stepped" ] ;
                                                                               sp:arg3  [ sp:varName  "colCount" ]
                                                                             ] ;
                                                                    sp:arg3  [ sp:varName  "stepped" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The row index." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] .

sp:into  a                  rdf:Property ;
        rdfs:comment        "The (optional) target of a LOAD Update operation." ;
        rdfs:domain         sp:Load ;
        rdfs:label          "into" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:modMax  a                rdf:Property ;
        rdfs:domain         sp:ModPath ;
        rdfs:label          "mod max" ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  sp:systemProperty .

spif:upperCase  a        spin:Function ;
        rdfs:comment     "Converts an input string into upper case. \nFor example, \"semantic web\" becomes \"SEMANTIC WEB\".\nAn optional matching expression can be given to only convert the matched characters." ;
        rdfs:label       "upper case" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

spin:Module  a           rdfs:Class ;
        rdfs:comment     "An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints." ;
        rdfs:label       "Module" ;
        rdfs:subClassOf  rdfs:Class .

sml:ControlFlowModules
        a                sm:Module ;
        rdfs:label       "Control Flow" ;
        rdfs:subClassOf  sml:ProcessingModules ;
        spin:abstract    true .

sml:sourceFilePath  a  rdf:Property ;
        rdfs:comment  "The path to a file relative in the execution context (workspace). Values can be relative to the currently executing script (e.g., subFolder/file.txt) or absolute to the workspace root (starting with /)." ;
        rdfs:label    "sourceFilePath" ;
        rdfs:range    xsd:string .

spr:RowCountFunctions
        a                spin:Function ;
        rdfs:label       "Row count functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The spr:Table to get the number of rows for." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] .

spif:encodeURL  a        spin:Function ;
        rdfs:comment     "Encodes a URL string, for example so that it can be passed as an argument to REST services." ;
        rdfs:label       "encode URL" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The (optional) encoding. Defaults to UTF-8." ;
                           spl:defaultValue  "UTF-8" ;
                           spl:optional      true ;
                           spl:predicate     sp:arg2 ;
                           spl:valueType     xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URL to encode." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

sp:default  a               rdf:Property ;
        rdfs:comment        "Used in DROP and CLEAR." ;
        rdfs:label          "default" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

spif:countMatches  a     spin:Function ;
        rdfs:comment     "Counts all occurrences of a triple pattern based on subject (?arg1), predicate (?arg2) and object (?arg3) input. Any of those can be unbound variables.\n\nThis function is available as part of the TopBraid SPIN Libraries." ;
        rdfs:label       "count matches" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject in the match triple, or an unbound variable for a wildcard" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the object in the match triple, or an unbound variable for a wildcard" ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the predicate in the match triple, or an unbound variable for a wildcard" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  xsd:integer .

spr:ColNameFunctions  a  spin:Function ;
        rdfs:label       "Column name functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The table to get the column name for." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The column index, starting at zero." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] .

sml:selectedResource  a  rdf:Property ;
        rdfs:comment  "The suggested default property to use in conjunction with sml:SelectedResourceArgument." ;
        rdfs:label    "selected resource" .

sp:as   a                   rdf:Property ;
        rdfs:comment        "Points to a Variable used in an AS statement such as COUNT aggregates." ;
        rdfs:label          "as" ;
        rdfs:range          sp:Variable ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:ConvertTextToRDFList
        a                sm:Module ;
        rdfs:comment     "Takes a comma-separated list of URIs as input and creates an rdf:List from it which is then visible to all modules downstream. The rdf:List will be a blank node (or rdf:nil) and the provided output variable will point to it. Note that the RDF output of this module consists of the rdf:List triples only, i.e. the input triples are not passed through.\nAmong others, this module can be used by web services that take lists as input." ;
        rdfs:label       "Convert text to RDFList" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the comma-separated list of URIs" ;
                           spl:predicate  sml:text ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "the name of the output variable that will contain the rdf:List" ;
                           spl:defaultValue  "list" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

sp:with  a                  rdf:Property ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "with" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Describe  a           rdfs:Class ;
        rdfs:comment     "A DESCRIBE-type Query." ;
        rdfs:label       "Describe" ;
        rdfs:subClassOf  sp:Query .

spl:ObjectCountPropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:comment        "Represents a constraint that can be attached to a class to specify that a given property must have between min and max values." ;
        rdfs:label          "Object count property constraint" ;
        rdfs:subClassOf     spl:CountPropertyConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b3
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b3
                                              ]
                                              [ sp:object     [ sp:varName  "property" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b3
                                              ]
                                              [ sp:object     [ sp:varName  "message" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b3
                                              ]
                                            ) ;
                              sp:where      ( [ a              sp:Bind ;
                                                sp:expression  [ a        spl:objectCount ;
                                                                 sp:arg1  spin:_this ;
                                                                 sp:arg2  [ sp:varName  "property" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "objectCount" ]
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a        sp:or ;
                                                                 sp:arg1  [ a        sp:and ;
                                                                            sp:arg1  [ a        sp:bound ;
                                                                                       sp:arg1  [ sp:varName  "minCount" ]
                                                                                     ] ;
                                                                            sp:arg2  [ a        sp:lt ;
                                                                                       sp:arg1  [ sp:varName  "objectCount" ] ;
                                                                                       sp:arg2  [ sp:varName  "minCount" ]
                                                                                     ]
                                                                          ] ;
                                                                 sp:arg2  [ a        sp:and ;
                                                                            sp:arg1  [ a        sp:bound ;
                                                                                       sp:arg1  [ sp:varName  "maxCount" ]
                                                                                     ] ;
                                                                            sp:arg2  [ a        sp:gt ;
                                                                                       sp:arg1  [ sp:varName  "objectCount" ] ;
                                                                                       sp:arg2  [ sp:varName  "maxCount" ]
                                                                                     ]
                                                                          ]
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  "Invalid number of values: " ;
                                                                 sp:arg2  [ sp:varName  "objectCount" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "message" ]
                                              ]
                                            )
                            ] ;
        spin:labelTemplate  "The property {?property} must have between {?minCount} and {?maxCount} values" .

sp:ReversePath  a        rdfs:Class ;
        rdfs:comment     "A path with reversed direction." ;
        rdfs:label       "Reverse path" ;
        rdfs:subClassOf  sp:Path .

sm:icon  a            rdf:Property ;
        rdfs:comment  "Can link a sm:Module subclass with an image URL so that the module can be displayed in visual editors. Images should be 48x48 pixels and in PNG, GIF or JPG format." ;
        rdfs:label    "icon" .

spl:MiscFunctions  a     spin:Function ;
        rdfs:comment     "A collection of functions that are difficult to categorize." ;
        rdfs:label       "Misc functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:notExists  a          spin:Function ;
        rdfs:comment     "The filter function NOT EXISTS. The graph pattern is stored in sp:elements." ;
        rdfs:label       "NOT EXISTS" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "NOT EXISTS" .

sp:ElementGroup  a       rdfs:Class ;
        rdfs:comment     "Abstract base class of group patterns." ;
        rdfs:label       "Element group" ;
        rdfs:subClassOf  sp:Element .

spl:subClassOf  a        spin:Function ;
        rdfs:comment     "Checks whether a given class (?arg1) is a (transitive) sub-class of another class (?arg2)." ;
        rdfs:label       "sub class of" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subClassOf
                                                     ] ;
                                         sp:subject  spin:_arg1
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential sub-class." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Class
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential super-class." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Class
                         ] ;
        spin:returnType  xsd:boolean .

sml:ImportRDFFromURL  a  sm:Module ;
        rdfs:comment     "Gets RDF data from a given URL. The URL may just point to an RDF file on the web, or call a web service with REST-style parameters to receive RDF back. No other format beside RDF/XML or Turtle is supported by this module - use sml:ImportRDFFromWorkspace for other file types." ;
        rdfs:label       "Import RDF from URL" ;
        rdfs:subClassOf  sml:ImportFromRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URL of the RDF source. May contain variable bindings such as {?varName}." ;
                           spl:predicate  sml:url
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "User name for BASIC Authentication, if specified this module will make a BASIC auth HTTP call to the server" ;
                           spl:optional   true ;
                           spl:predicate  sml:userName ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The serialization type expected from the server. Defaults to RDF/XML if not specified." ;
                           spl:optional   true ;
                           spl:predicate  sml:serialization ;
                           spl:valueType  sml:RDFSerialization
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Password for basic authentication, if specified this module will make a BASIC auth HTTP call to the server" ;
                           spl:optional   true ;
                           spl:predicate  sml:password ;
                           spl:valueType  xsd:string
                         ] .

spin:ConstraintViolationLevel
        a                rdfs:Class ;
        rdfs:comment     "The type of the supported levels of constraint violations, including spin:Error and spin:Warning." ;
        rdfs:label       "Constraint violation level" ;
        rdfs:subClassOf  rdfs:Resource .

sml:N3  a             sml:RDFSerialization ;
        rdfs:comment  "The N3 serialization format. In TopBraid this is only supported as the equivalent of Turtle and may be deleted in future versions." ;
        rdfs:label    "N3" .

spr:colNameFunction  a      rdf:Property ;
        rdfs:domain         spr:TableClass ;
        rdfs:label          "colName function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

spif:canInvoke  a        spin:Function ;
        rdfs:comment     "Checks whether a given SPIN function (?arg1) can be invoked with a given list of argument (?arg2, ?arg3, ...) without violating any of its declared SPIN constraints. In addition to the usual argument declarations, the SPIN function may declare ASK and CONSTRUCT queries to check additional pre-conditions." ;
        rdfs:label       "can invoke" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The third argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg4
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The forth argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg5
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument of the function call." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The function to check." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spin:Function
                         ] ;
        spin:returnType  xsd:boolean .

sm:if   a                   rdf:Property ;
        rdfs:comment        "Links a branching module with its \"true\" branch, i.e. the branch that shall be executed if the condition is true." ;
        rdfs:label          "if" ;
        rdfs:range          spin:Modules ;
        rdfs:subPropertyOf  sm:child .

sp:limit  a                 rdf:Property ;
        rdfs:comment        "The LIMIT solution modifier of a Query." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "limit" ;
        rdfs:range          xsd:long ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:useUnderscore  a  rdf:Property ;
        rdfs:label  "useUnderscore" ;
        rdfs:range  xsd:boolean .

spin:rulePropertyMaxIterationCount
        a                   rdf:Property ;
        rdfs:comment        "Can be attached to spin:rule (or subclasses thereof) to instruct a SPIN rules engine that it shall only execute the rules max times. If no value is specified, then the rules will be executed with no specific limit." ;
        rdfs:domain         spin:RuleProperty ;
        rdfs:label          "rule property max iteration count" ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  spin:systemProperty .

km-sesame:p-sesame-server-url
        a           rdf:Property ;
        rdfs:label  "Sesame server URL" .

sp:TriplePath  a         rdfs:Class ;
        rdfs:comment     "Similar to a TriplePattern, but with a path expression as its predicate. For example, this can be used to express transitive sub-class relationships (?subClass rdfs:subClassOf* ?superClass)." ;
        rdfs:label       "Triple path" ;
        rdfs:subClassOf  sp:Element , sp:Tuple .

sm:ValueType  a          rdfs:Class ;
        rdfs:comment     "A value type such as XML or JSON." ;
        rdfs:label       "value type" ;
        rdfs:subClassOf  rdfs:Resource .

spl:optional  a             rdf:Property ;
        rdfs:label          "optional" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:arg .

spl:CountPropertyConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract superclass of property constraints that compare the number of values with either min or max count." ;
        rdfs:label       "Count property constraint templates" ;
        rdfs:subClassOf  spl:PropertyConstraintTemplates ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The maximum number of values that the property must have." ;
                           spl:optional   true ;
                           spl:predicate  arg:maxCount ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The minimum number of values that the property must have." ;
                           spl:optional   true ;
                           spl:predicate  arg:minCount ;
                           spl:valueType  xsd:integer
                         ] .

sp:uri  a                spin:Function ;
        rdfs:comment     "Equivalent to IRI." ;
        rdfs:label       "URI" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The IRI string to convert to a resource." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Resource ;
        spin:symbol      "URI" .

sp:_restriction  a  sp:Variable ;
        sp:varName  "restriction" .

sp:Union  a              rdfs:Class ;
        rdfs:comment     "A UNION group." ;
        rdfs:label       "Union" ;
        rdfs:subClassOf  sp:ElementGroup .

kbss-module:inbas-modules
        a                rdfs:Class ;
        rdfs:label       "INBAS modules" ;
        rdfs:subClassOf  kbss-module:kbss-modules .

sp:Insert  a             rdfs:Class , owl:DeprecatedClass ;
        rdfs:comment     "Deprecated - use sp:Modify instead.\n\nRepresents a INSERT INTO (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:insertPattern. The WHERE clause is represented using sp:where." ;
        rdfs:label       "Insert" ;
        rdfs:subClassOf  sp:Modify .

sml:ruleBaseName  a  rdf:Property ;
        rdfs:label  "ruleBaseName" ;
        rdfs:range  xsd:string .

sm:XML  a           sm:ValueType ;
        rdfs:label  "XML" .

sp:minutes  a            spin:Function ;
        rdfs:comment     "Extracts the minutes from a date/time literal." ;
        rdfs:label       "minutes" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The dateTime or time argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "minutes" .

<http://onto.fel.cvut.cz/ontologies/vfn-form-mod/attach-initial-origin-paths>
        sm:next  form-fss-gen-0.1:retrieve-saved-data .

spif:parseDate  a        spin:Function ;
        rdfs:comment     "Converts a string in a semi-structured format into a xsd:date, xsd:dateTime or xsd:time literal. The input string must be in a given template format, e.g. \"yyyy.MM.dd G 'at' HH:mm:ss z\" for strings such as 2001.07.04 AD at 12:08:56 PDT." ;
        rdfs:label       "parse date" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The template of the input string. This must conform to the pattern language implemented by the Java SimpleDateFormat class (http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html)." ;
                           spl:predicate  arg:pattern ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input text" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Literal .

spr:Functions  a         spin:Function ;
        rdfs:comment     "Base class of various SPR related functions." ;
        rdfs:label       "SPR Functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spl:class  a                rdf:Property ;
        rdfs:label          "class" ;
        rdfs:subPropertyOf  sp:arg .

sml:password  a     rdf:Property ;
        rdfs:label  "password" ;
        rdfs:range  xsd:string .

form-fss-gen-0.1:bind-fss-model-uri
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind FSS model uri" ;
        sm:next            form-fss-gen-0.1:bind-fss-model-service-url ;
        sm:outputVariable  "studyModelUri" ;
        sml:value          "http://vfn.cz/ontologies/fss-study-model" .

sml:cellQuery  a            rdf:Property ;
        rdfs:label          "cellQuery" ;
        rdfs:range          sp:Select ;
        rdfs:subPropertyOf  spin:query .

sml:ConvertTextToRDF  a  sm:Module ;
        rdfs:comment     "Converts a text in one of the RDF serializations into an RDF graph. In a typical scenario, the text would be passed into the script as external (web service) input. The result of this module is the input RDF triples plus the parsed triples." ;
        rdfs:label       "Convert text to RDF" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The text to parse." ;
                           spl:predicate  sml:text
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The (optional) serialization format, e.g. XML, Turtle or NTriple. Default: Turtle." ;
                           spl:defaultValue  sml:Turtle ;
                           spl:optional      true ;
                           spl:predicate     sml:serialization ;
                           spl:valueType     sml:RDFSerialization
                         ] .

sp:Element  a            rdfs:Class ;
        rdfs:comment     "An abstract base class for all pattern elements." ;
        rdfs:label       "Element" ;
        rdfs:subClassOf  sp:SystemClass .

form-fss-gen-0.1:create-follow-up-procedure
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "create-follow-up-procedure" ;
        sm:next             form-fss-gen-0.1:attach-possible-values-hook ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "yearUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "procedureUri" ]
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "yearRoutinelyUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "yearIfClinicalyIndicatedUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     "answerable" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     "checkbox" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     "section" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "yearLabel" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     _:b4 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "yearUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b4
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b4
                                              ]
                                              [ sp:object     [ sp:varName  "procedureUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b4
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "yearRoutinelyFrequencyUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     "answerable" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     "checkbox" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     "section" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     "Routinely" ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     _:b5 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b5
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b5
                                              ]
                                              [ sp:object     [ sp:varName  "yearUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b5
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "yearRoutinelyFrequencyUri" ]
                                              ]
                                              [ sp:object     "type-ahead" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearRoutinelyFrequencyUri" ]
                                              ]
                                              [ sp:object     <http://vfn.cz/ontologies/study-model/follow-up-procedure-frequency> ;
                                                sp:predicate  form:has-question-origin ;
                                                sp:subject    [ sp:varName  "yearRoutinelyFrequencyUri" ]
                                              ]
                                              [ sp:object     "Frequency every" ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "yearRoutinelyFrequencyUri" ]
                                              ]
                                              [ sp:object     _:b6 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "yearRoutinelyFrequencyUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b6
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b6
                                              ]
                                              [ sp:object     [ sp:varName  "yearRoutinelyUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b6
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "yearIfClinicalyIndicatedUri" ]
                                              ]
                                              [ sp:object     "checkbox" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "yearIfClinicalyIndicatedUri" ]
                                              ]
                                              [ sp:object     "If clinically indicated" ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "yearIfClinicalyIndicatedUri" ]
                                              ]
                                              [ sp:object     _:b7 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "yearIfClinicalyIndicatedUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b7
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b7
                                              ]
                                              [ sp:object     [ sp:varName  "yearUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b7
                                              ]
                                              [ sp:object     _:b8 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "yearUriCopy" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b8
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b8
                                              ]
                                              [ sp:object     [ sp:varName  "previousYearUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b8
                                              ]
                                            ) ;
                              sp:text       "CONSTRUCT {\n   ?procedureUri doc:has_related_question ?yearUri .\n   ?yearUri\n        rdf:type doc:question ;\n        doc:has_related_question ?yearRoutinelyUri ;\n        doc:has_related_question ?yearIfClinicalyIndicatedUri ;\n        form-lt:has-layout-class \"answerable\" ;\n        form-lt:has-layout-class \"checkbox\" ;\n        form-lt:has-layout-class \"section\" ;\n        rdfs:label ?yearLabel ;\n        form:is-relevant-if [\n            rdf:type form:condition ; \n            form:accepts-answer-value \"true\"^^xsd:boolean ;\n            form:has-tested-question ?procedureUri ;\n        ] ;\n  .\n  ?yearRoutinelyUri\n        rdf:type doc:question ;\n        doc:has_related_question ?yearRoutinelyFrequencyUri ;\n        form-lt:has-layout-class \"answerable\" ;\n        form-lt:has-layout-class \"checkbox\" ;\n        form-lt:has-layout-class \"section\" ;\n        rdfs:label \"Routinely\" ;\n        form:is-relevant-if [\n             rdf:type form:condition ;\n             form:accepts-answer-value \"true\"^^xsd:boolean ;\n             form:has-tested-question ?yearUri ;\n        ] ;\n  .\n  ?yearRoutinelyFrequencyUri\n        rdf:type doc:question ;\n        form-lt:has-layout-class \"type-ahead\" ;\n        form:has-question-origin stm:follow-up-procedure-frequency ;\n        rdfs:label \"Frequency every\" ;\n        form:is-relevant-if [\n              rdf:type form:condition ;\n              form:accepts-answer-value \"true\"^^xsd:boolean ;\n              form:has-tested-question ?yearRoutinelyUri ;\n        ] ;\n  .\n  ?yearIfClinicalyIndicatedUri \n        rdf:type doc:question ;\n        form-lt:has-layout-class \"checkbox\" ;\n        rdfs:label \"If clinically indicated\" ;\n        form:is-relevant-if [\n              rdf:type form:condition ;\n              form:accepts-answer-value \"true\"^^xsd:boolean ;\n              form:has-tested-question ?yearUri ;\n        ] ;\n  .\n# hiding if not previous year \n  ?yearUriCopy\n        form:is-relevant-if [\n              rdf:type form:condition ;\n              form:accepts-answer-value \"true\"^^xsd:boolean ;\n              form:has-tested-question ?previousYearUri ;\n       ] ;\n  .\n}\nWHERE {\n    { \n         SELECT ?year ?previousYear \n         WHERE { }\n         VALUES (?year ?previousYear) {\n               (\"1\" UNDEF)\n               (\"2\" \"1\")\n               (\"3\" \"2\")\n               (\"4\" \"3\")\n               (\"5\" \"4\")\n          }\n    }\n    ff:follow-up-and-recurrence--follow-up-procedure doc:has_related_question ?procedureUri .\n    FILTER(?procedureUri != ff:follow-up-and-recurrence--follow-up-procedure--others)\n    BIND(concat(str(?year), \". year\") as ?yearLabel)\n    BIND(str(?procedureUri) as ?procedureStr) \n    BIND(concat(?procedureStr, \"--\", ?year, \"-year\") as ?yearUriStr)\n    BIND(concat(?yearUriStr, \"--routinely\") as ?yearRoutinelyUriStr)\n    BIND(concat(?yearRoutinelyUriStr, \"--frequency\") as ?yearRoutinelyFrequencyUriStr)\n    BIND(concat(?yearUriStr, \"--if-clinically-indicated\") as ?yearIfClinicalyIndicatedUriStr)\n# str -> uri\n    BIND(URI(?yearUriStr) as ?yearUri)\n    BIND(URI(?yearRoutinelyUriStr) as ?yearRoutinelyUri)\n    BIND(URI(?yearRoutinelyFrequencyUriStr) as ?yearRoutinelyFrequencyUri)\n    BIND(URI(?yearIfClinicalyIndicatedUriStr) as ?yearIfClinicalyIndicatedUri) \n    BIND(concat(?procedureStr, \"--\", ?previousYear, \"-year\") as ?previousYearUriStr)\n    BIND(URI(?previousYearUriStr) as ?previousYearUri)    \n    BIND(IF (BOUND (?previousYear), ?yearUri, ?previousYear ) as ?yearUriCopy)\n}" ;
                              sp:where      ( [ a         sp:SubQuery ;
                                                sp:query  [ a                   sp:Select ;
                                                            sp:resultVariables  ( [ sp:varName  "year" ]
                                                                                  [ sp:varName  "previousYear" ]
                                                                                ) ;
                                                            sp:values           [ sp:bindings  ( ( "1" sp:undef ) ( "2" "1" ) ( "3" "2" ) ( "4" "3" ) ( "5" "4" ) ) ;
                                                                                  sp:varNames  ( "year" "previousYear" )
                                                                                ] ;
                                                            sp:where            ()
                                                          ]
                                              ]
                                              [ sp:object     [ sp:varName  "procedureUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    ff:follow-up-and-recurrence--follow-up-procedure
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a        sp:ne ;
                                                                 sp:arg1  [ sp:varName  "procedureUri" ] ;
                                                                 sp:arg2  ff:follow-up-and-recurrence--follow-up-procedure--others
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ a        sp:str ;
                                                                            sp:arg1  [ sp:varName  "year" ]
                                                                          ] ;
                                                                 sp:arg2  ". year"
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearLabel" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:str ;
                                                                 sp:arg1  [ sp:varName  "procedureUri" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "procedureStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "procedureStr" ] ;
                                                                 sp:arg2  "--" ;
                                                                 sp:arg3  [ sp:varName  "year" ] ;
                                                                 sp:arg4  "-year"
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "yearUriStr" ] ;
                                                                 sp:arg2  "--routinely"
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearRoutinelyUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "yearRoutinelyUriStr" ] ;
                                                                 sp:arg2  "--frequency"
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearRoutinelyFrequencyUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "yearUriStr" ] ;
                                                                 sp:arg2  "--if-clinically-indicated"
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearIfClinicalyIndicatedUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "yearUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "yearRoutinelyUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearRoutinelyUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "yearRoutinelyFrequencyUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearRoutinelyFrequencyUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "yearIfClinicalyIndicatedUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearIfClinicalyIndicatedUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "procedureStr" ] ;
                                                                 sp:arg2  "--" ;
                                                                 sp:arg3  [ sp:varName  "previousYear" ] ;
                                                                 sp:arg4  "-year"
                                                               ] ;
                                                sp:variable    [ sp:varName  "previousYearUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "previousYearUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "previousYearUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:if ;
                                                                 sp:arg1  [ a        sp:bound ;
                                                                            sp:arg1  [ sp:varName  "previousYear" ]
                                                                          ] ;
                                                                 sp:arg2  [ sp:varName  "yearUri" ] ;
                                                                 sp:arg3  [ sp:varName  "previousYear" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "yearUriCopy" ]
                                              ]
                                            )
                            ] ;
        sml:replace         true .

sp:reduced  a               rdf:Property ;
        rdfs:comment        "A property with true to indicate that a Select query has a REDUCED flag." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "reduced" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Min  a                rdfs:Class ;
        rdfs:comment     "Represents MIN aggregations." ;
        rdfs:label       "MIN" ;
        rdfs:subClassOf  sp:Aggregation .

arg:property  a             rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

spr:colCountFunction  a     rdf:Property ;
        rdfs:domain         spr:TableClass ;
        rdfs:label          "colCount function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sp:Select  a             rdfs:Class ;
        rdfs:comment     "A SELECT-type query that returns variable bindings as its result." ;
        rdfs:label       "Select query" ;
        rdfs:subClassOf  sp:Query .

spif:lowerCamelCase  a   spin:Function ;
        rdfs:comment     "Converts an input string into lower camel case.\nFor example, \"semantic web\" becomes \"semanticWeb\".\nAn optional matching expression can be given to only convert the matched characters." ;
        rdfs:label       "lower camel case" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

spl:RegexPropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:label          "Regex property constraint" ;
        rdfs:subClassOf     spl:PropertyConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b9
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b9
                                              ]
                                              [ sp:object     [ sp:varName  "property" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b9
                                              ]
                                              [ sp:object     [ sp:varName  "message" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b9
                                              ]
                                            ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "object" ] ;
                                                sp:predicate  [ sp:varName  "property" ] ;
                                                sp:subject    spin:_this
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a        sp:not ;
                                                                 sp:arg1  [ a        sp:regex ;
                                                                            sp:arg1  [ a        xsd:string ;
                                                                                       sp:arg1  [ sp:varName  "object" ]
                                                                                     ] ;
                                                                            sp:arg2  [ sp:varName  "pattern" ]
                                                                          ]
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  "Value " ;
                                                                 sp:arg2  [ sp:varName  "object" ] ;
                                                                 sp:arg3  " must match the regular expression \"" ;
                                                                 sp:arg4  [ sp:varName  "pattern" ] ;
                                                                 sp:arg5  "\""
                                                               ] ;
                                                sp:variable    [ sp:varName  "message" ]
                                              ]
                                            )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The regular expression to match." ;
                              spl:predicate  arg:pattern ;
                              spl:valueType  xsd:string
                            ] ;
        spin:labelTemplate  "Values of {?property} must match the regular expression {?pattern}" .

spif:Test-mod-1  a          spl:TestCase ;
        rdfs:label          "Test-mod-1" ;
        spl:testExpression  [ a        spif:mod ;
                              sp:arg1  3 ;
                              sp:arg2  2
                            ] ;
        spl:testResult      1 .

sp:_predicate  a    sp:Variable ;
        sp:varName  "predicate" .

sp:Command  a            rdfs:Class ;
        rdfs:comment     "A shared superclass for sp:Query and sp:Update that can be used to specify that the range of property can be either one." ;
        rdfs:label       "Command" ;
        rdfs:subClassOf  sp:SystemClass .

sp:lcase  a              spin:Function ;
        rdfs:comment     "Converts a string to lower case characters." ;
        rdfs:label       "LCASE" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-lcase> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "LCASE" .

spif:Test-parseDate-yyyyMMdd
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "yyyyMMdd" ;
                              sp:arg1      "20080213"
                            ] ;
        spl:testResult      "2008-02-13"^^xsd:date .

spin:RuleProperty  a     rdfs:Class ;
        rdfs:comment     "The metaclass of spin:rule and its subproperties. spin:RuleProperties can have additional metadata attached to them." ;
        rdfs:label       "Rule property" ;
        rdfs:subClassOf  rdf:Property .

spif:buildURI  a         spin:Function ;
        rdfs:comment     "Constructs a new URI resource by inserting the existing variable bindings into a template. The template can mention variable names in curly braces, such as \"my:Instance-{?index}\" would create \"my:Instance-42\" is ?index has the value 42. As an alternative to variable names, the function can take additional arguments after the template, the variables of which can be accessed using {?1}, {?2} etc. For example: smf:buildURI(\"my:Instance-{?1}-{?2}\", ?day, ?month) would insert day and month at places {?1} and {?2}." ;
        rdfs:label       "build URI" ;
        rdfs:subClassOf  spl:URIFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URI template such as \"<http://my.com/Instance-{?index}>\". If the template contains a full URI, then it must be wrapped by <...>, otherwise the system will treat it as a qname." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Resource .

sp:varNames  a              rdf:Property ;
        rdfs:comment        "The names of the variables (xsd:strings) of the variables declared for a VALUES element." ;
        rdfs:domain         sp:Values ;
        rdfs:label          "var names" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

spin:violationSource  a     rdf:Property ;
        rdfs:comment        "Can be used to link a spin:ConstraintViolation with the query or template call that caused it. This property is typically filled in automatically by the constraint checking engine and does not need to be set manually. However, it can be useful to learn more about the origin of a violation." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation source" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  spin:systemProperty .

sp:graphIRI  a              rdf:Property ;
        rdfs:comment        "Points to graph names (IRIs) in various sp:Update operations." ;
        rdfs:label          "graph IRI" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:path1  a                 rdf:Property ;
        rdfs:comment        "The first child path of a property path. Used by sp:AltPath and sp:SeqPath." ;
        rdfs:label          "path1" ;
        rdfs:range          sp:Path ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:graphName  a    rdf:Property ;
        rdfs:label  "graph name" ;
        rdfs:range  xsd:string .

spin:Functions  a        spin:Function ;
        rdfs:comment     "An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together." ;
        rdfs:label       "Functions" ;
        rdfs:subClassOf  spin:Modules ;
        spin:abstract    true ;
        spin:constraint  [ a                 spl:Attribute ;
                           rdfs:comment      "The name of the result variable. In SPARQLMotion, a result variable must be specified, but we leave the minCount constraint on 0 to remove clutter in constraint checking." ;
                           spl:defaultValue  "result" ;
                           spl:maxCount      1 ;
                           spl:minCount      0 ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

sp:varName  a               rdf:Property ;
        rdfs:comment        "The name of a Variable." ;
        rdfs:domain         sp:Variable ;
        rdfs:label          "varName" ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:sha256  a             spin:Function ;
        rdfs:comment     "Returns the SHA256 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case." ;
        rdfs:label       "sha256" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha256> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA256" .

sml:text  a         rdf:Property ;
        rdfs:label  "text" ;
        rdfs:range  xsd:string .

sml:path  a           rdf:Property ;
        rdfs:comment  "Can be used to represent path expressions such as /INBOX/TBC-MailingList" ;
        rdfs:label    "path" ;
        rdfs:range    xsd:string .

sp:OrderByCondition  a   rdfs:Class ;
        rdfs:comment     "An abstract base class for ascending or descending order conditions. Instances of this class (typically bnodes) must have a value for expression to point to the actual values." ;
        rdfs:label       "Order by condition" ;
        rdfs:subClassOf  sp:SystemClass .

spif:trim  a             spin:Function ;
        rdfs:comment     "Creates a new string value by trimming an input string. Leading and trailing whitespaces are deleted." ;
        rdfs:label       "trim" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the text to trim" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

km-sesame:p-sesame-context-iri
        a           rdf:Property ;
        rdfs:label  "Sesame context IRI" .

spin:_arg4  a       sp:Variable ;
        sp:varName  "arg4" .

sp:having  a                rdf:Property ;
        rdfs:comment        "Points from a SELECT query to a list of HAVING expressions." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "having" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:BindBySelect  a      sm:Module ;
        rdfs:comment     "Runs a SPARQL select query and binds all result variables of the first matching result set. The input RDF is simply passed through to the next module. For example, if you run SELECT ?name ?age WHERE { my:Person my:name ?name ; my:age ?age } then the variables name and age will be bound as output variables." ;
        rdfs:label       "Bind by select" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "A SPARQL Select query that is executed over the input triples. The result variables of the first result row will be bound in the succeeding modules." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:selectQuery
                         ] .


sp:NamedGraph  a         rdfs:Class ;
        rdfs:comment     "A named Graph element such as GRAPH <uri> {...}." ;
        rdfs:label       "Named graph" ;
        rdfs:subClassOf  sp:ElementGroup .

sp:TriplePattern  a      rdfs:Class ;
        rdfs:comment     "A triple pattern used in the body of a query." ;
        rdfs:label       "Triple pattern" ;
        rdfs:subClassOf  sp:Element , sp:Triple .

sml:CreateSPINResultSet
        a                sm:Module ;
        rdfs:comment     "Converts the result set of a given SPARQL SELECT query (sml:selectQuery) to an SPIN result set (SPR table resource). The resulting resource can then be queried using the SPR functions. The output graph of this module contains only table triples." ;
        rdfs:label       "Create SPIN Result Set" ;
        rdfs:seeAlso     <http://spinrdf.org/spr.html> ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The SELECT query to evaluate." ;
                           spl:predicate  sml:selectQuery
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the output variable that will point to the new spr:Table resource." ;
                           spl:defaultValue  "table" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

spin:ask  a              spin:Function ;
        rdfs:comment     "Executes a given ASK query and returns its boolean result. The first argument must point to an sp:Ask or a SPIN template call that has an ASK query as its body. All subsequent argument can come in pairs, with the first one being a variable name and the second its binding.\n\nExample:\n\n    BIND (spin:ask(?query, \"this\", owl:Thing) AS ?result) .\n\nwill execute the sp:Ask behind ?query with the variable ?this pre-bound to owl:Thing." ;
        rdfs:label       "ask" ;
        rdfs:subClassOf  spin:Functions .

sm:source  a                owl:AnnotationProperty ;
        rdfs:comment        "Can be used to link a resource to the SPARQLMotion script that generated it. For example, if a file has been automatically generated by a SPARQLMotion script then the owl:Ontology in the resulting file should point back to the script, so that others can re-run the generation if the input data has changed." ;
        rdfs:label          "source" ;
        rdfs:subPropertyOf  rdfs:seeAlso .

spr:colCells  a             spin:MagicProperty ;
        rdfs:comment        "Iterates over all rows of a given table (left side, ?arg1) at column ?arg2 and binds the variable on the right with the cell values. The second variable on the right may be bound to the row index as well." ;
        rdfs:label          "col cells" ;
        rdfs:subClassOf     spr:MagicProperties ;
        rdfs:subPropertyOf  spr:systemProperty ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "value" ]
                                                    [ sp:varName  "row" ]
                                                  ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "row" ] ;
                                                      sp:predicate  spr:rowIndices ;
                                                      sp:subject    spin:_arg1
                                                    ]
                                                    [ a              sp:Bind ;
                                                      sp:expression  [ a        spr:cell ;
                                                                       sp:arg1  spin:_arg1 ;
                                                                       sp:arg2  [ sp:varName  "row" ] ;
                                                                       sp:arg3  spin:_arg2
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "value" ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The spr:Table to get the values for." ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  spr:Table
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The column index, starting at zero." ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  xsd:integer
                            ] .

sp:bindings  a              rdf:Property ;
        rdfs:comment        "The actual bindings of a sp:Values element." ;
        rdfs:domain         sp:Values ;
        rdfs:label          "bindings" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:AssertTrue  a        sm:Module ;
        rdfs:comment     "Evaluates an ASK condition and stops the execution of the script and reports an error if the condition is false. This module is particularly useful for web services that simply cannot execute if unexpected situations are encountered. The module will simply pass through all variable bindings and RDF triples if no errors are found." ;
        rdfs:label       "Assert true" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The ASK query that must return true." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:askQuery ;
                           spl:valueType  sp:Ask
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the error message" ;
                           spl:optional   true ;
                           spl:predicate  sml:text ;
                           spl:valueType  xsd:string
                         ] .

km-sesame:p-is-replace
        a           rdf:Property ;
        rdfs:label  "Is replace" .

sp:SeqPath  a            rdfs:Class ;
        rdfs:comment     "A sequence of multiple paths." ;
        rdfs:label       "Seq path" ;
        rdfs:subClassOf  sp:Path .

spin:nextRuleProperty
        a                   rdf:Property ;
        rdfs:comment        "Can be used to link two sub-properties of spin:rule (or spin:rule itself) to instruct the SPIN engine to execute one set of rules before another one. The values of the subject property will be executed before those of the object property." ;
        rdfs:domain         spin:RuleProperty ;
        rdfs:label          "next rule property" ;
        rdfs:range          spin:RuleProperty ;
        rdfs:subPropertyOf  spin:systemProperty .

sp:Exists  a             rdfs:Class ;
        rdfs:comment     "An EXISTS element group." ;
        rdfs:label       "Exists" ;
        rdfs:subClassOf  sp:ElementGroup .

sp:ReverseLinkPath  a    rdfs:Class ;
        rdfs:label       "Reverse link path" ;
        rdfs:subClassOf  sp:Path .

sml:instancePattern  a  rdf:Property ;
        rdfs:label  "instancePattern" ;
        rdfs:range  xsd:string .

kbss-module:kbss-modules
        a                rdfs:Class ;
        rdfs:label       "KBSS modules" ;
        rdfs:subClassOf  sm:Modules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Condition on input graph of this module." ;
                           spl:optional   true ;
                           spl:predicate  kbss-module:has-input-graph-constraint
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Condition on output graph of this module." ;
                           spl:optional   true ;
                           spl:predicate  kbss-module:has-output-graph-constraint
                         ] .

spif:Test-parseDate-MM_dd_yyyy
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "MM/dd/yyyy" ;
                              sp:arg1      "2/13/2008"
                            ] ;
        spl:testResult      "2008-02-13"^^xsd:date .

sp:contains  a           spin:Function ;
        rdfs:comment     "Returns an xsd:boolean indicating whether or not the value of ?arg1 contains (at the beginning, at the end, or anywhere within) at least one sequence of collation units that provides a minimal match to the collation units in the value of ?arg2, according to the collation that is used." ;
        rdfs:label       "contains" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-contains> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The sub-string to search for in the input string." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:symbol      "CONTAINS" .

sp:arg5  a                  rdf:Property ;
        rdfs:comment        "The fifth argument of a function call. Further arguments are not common in SPARQL, therefore no sp:arg6, etc are defined here. However, they can be created if needed." ;
        rdfs:label          "arg5" ;
        rdfs:subPropertyOf  sp:arg .

spl:hasValueOfType  a    spin:Function ;
        rdfs:comment     "Checks whether a given subject (?arg1) has at least one value of a given type (?arg3) for a given property (?arg2) or one of its sub-properties." ;
        rdfs:label       "hasValueOfType" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subPropertyOf
                                                     ] ;
                                         sp:subject  [ sp:varName  "p" ]
                                       ]
                                       [ sp:object     [ sp:varName  "value" ] ;
                                         sp:predicate  [ sp:varName  "p" ] ;
                                         sp:subject    spin:_arg1
                                       ]
                                       [ a              sp:Filter ;
                                         sp:expression  [ a        spl:instanceOf ;
                                                          sp:arg1  [ sp:varName  "value" ] ;
                                                          sp:arg2  spin:_arg3
                                                        ]
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject that is expected to have the value" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the expected property" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the type to match against" ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  rdfs:Class
                         ] ;
        spin:returnType  xsd:boolean .

spl:TestCase  a          rdfs:Class ;
        rdfs:comment     "A test to verify that a SPIN function or magic property works as expected, and to generate documentation of example uses of the function. Each TestCase consists of a SPARQL function call or an expression that can be executed with spin:eval, and an expected result. The test framework only needs to execute spin:eval on the expression and compare it with the expected result." ;
        rdfs:label       "Test case" ;
        rdfs:subClassOf  rdfs:Resource ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The expected result of the test case, or nothing to indicate that an error is expected." ;
                           spl:optional   true ;
                           spl:predicate  spl:testResult
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The test expression or SELECT query (anything that can be evaluated with spin:eval)." ;
                           spl:predicate  spl:testExpression
                         ] .

kbss-module:generic-kbss-modules
        a                rdfs:Class ;
        rdfs:label       "Generic KBSS modules" ;
        rdfs:subClassOf  kbss-module:kbss-modules .

spl:InferDefaultValue
        a                   spin:ConstructTemplate ;
        rdfs:comment        "Can be used to infer default values for a given subject/predicate combination. This is typically assigned as spin:rule to a class. If ?this does not already have a value for a given property {?predicate}, then this will infer the value {?defaultValue}." ;
        rdfs:label          "Infer default value" ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "defaultValue" ] ;
                                                sp:predicate  [ sp:varName  "predicate" ] ;
                                                sp:subject    spin:_this
                                              ]
                                            ) ;
                              sp:where      ( [ a            sp:Optional ;
                                                sp:elements  ( [ sp:object     [ sp:varName  "anyValue" ] ;
                                                                 sp:predicate  [ sp:varName  "predicate" ] ;
                                                                 sp:subject    spin:_this
                                                               ]
                                                             )
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a        sp:not ;
                                                                 sp:arg1  [ a        sp:bound ;
                                                                            sp:arg1  [ sp:varName  "anyValue" ]
                                                                          ]
                                                               ]
                                              ]
                                            )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The default value to infer." ;
                              spl:predicate  spl:defaultValue
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The predicate to infer the default value of." ;
                              spl:predicate  spl:predicate ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:labelTemplate  "Default value for {?predicate}: {?defaultValue}" .

sml:oldFilePath  a  rdf:Property ;
        rdfs:label  "old file path" ;
        rdfs:range  xsd:string .

spin:symbol  a              rdf:Property ;
        rdfs:comment        "The symbol of a function, e.g. \"=\" for the eq function." ;
        rdfs:domain         spin:Function ;
        rdfs:label          "symbol" ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  spin:systemProperty .

sp:sha512  a             spin:Function ;
        rdfs:comment     "Returns the SHA512 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case." ;
        rdfs:label       "sha512" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha512> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA512" .

sp:node  a                  rdf:Property ;
        rdfs:domain         sp:ReverseLinkPath ;
        rdfs:label          "node" ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:mimeType  a       rdf:Property ;
        rdfs:comment  "(Reserved for future use.)" ;
        rdfs:label    "mimeType" ;
        rdfs:range    xsd:string .

sml:selectQuery  a          rdf:Property ;
        rdfs:label          "select query" ;
        rdfs:range          sp:Select ;
        rdfs:subPropertyOf  spin:query .

form-fss-gen-0.1:clone-fss-form
        a                sm:Function ;
        rdfs:subClassOf  sm:Functions ;
        sm:returnModule  <http://onto.fel.cvut.cz/ontologies/vfn-form-mod/clone-study-form_Return> .

spl:RangePropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:comment        "Represents a constraint that narrows down a property by a minimum and maximum value compared by <= and >=." ;
        rdfs:label          "Range property constraint" ;
        rdfs:subClassOf     spl:PropertyConstraintTemplates ;
        spin:abstract       true ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b10
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b10
                                              ]
                                              [ sp:object     [ sp:varName  "property" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b10
                                              ]
                                              [ sp:object     [ sp:varName  "message" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b10
                                              ]
                                            ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "object" ] ;
                                                sp:predicate  [ sp:varName  "property" ] ;
                                                sp:subject    spin:_this
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a        sp:or ;
                                                                 sp:arg1  [ a        sp:and ;
                                                                            sp:arg1  [ a        sp:bound ;
                                                                                       sp:arg1  [ sp:varName  "min" ]
                                                                                     ] ;
                                                                            sp:arg2  [ a        sp:lt ;
                                                                                       sp:arg1  [ sp:varName  "object" ] ;
                                                                                       sp:arg2  [ sp:varName  "min" ]
                                                                                     ]
                                                                          ] ;
                                                                 sp:arg2  [ a        sp:and ;
                                                                            sp:arg1  [ a        sp:bound ;
                                                                                       sp:arg1  [ sp:varName  "max" ]
                                                                                     ] ;
                                                                            sp:arg2  [ a        sp:gt ;
                                                                                       sp:arg1  [ sp:varName  "object" ] ;
                                                                                       sp:arg2  [ sp:varName  "max" ]
                                                                                     ]
                                                                          ]
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  "Value " ;
                                                                 sp:arg2  [ sp:varName  "object" ] ;
                                                                 sp:arg3  " must be in the interval [" ;
                                                                 sp:arg4  [ sp:varName  "min" ] ;
                                                                 sp:arg5  ", " ;
                                                                 sp:arg6  [ sp:varName  "max" ] ;
                                                                 sp:arg7  "]"
                                                               ] ;
                                                sp:variable    [ sp:varName  "message" ]
                                              ]
                                            )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The maximum value." ;
                              spl:optional   true ;
                              spl:predicate  arg:max ;
                              spl:valueType  rdfs:Literal
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The minimum value." ;
                              spl:optional   true ;
                              spl:predicate  arg:min ;
                              spl:valueType  rdfs:Literal
                            ] ;
        spin:labelTemplate  "Values of {?property} must be within the interval [ {?min} , {?max} ]" .

sml:columnQuery  a          rdf:Property ;
        rdfs:label          "columnQuery" ;
        rdfs:range          sp:Select ;
        rdfs:subPropertyOf  spin:query .

spr:colCount  a          spin:Function ;
        rdfs:comment     "Gets the number of columns of a given result set." ;
        rdfs:label       "column count" ;
        rdfs:subClassOf  spr:ColCountFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "function" ] ;
                                                   sp:predicate  spr:colCountFunction ;
                                                   sp:subject    [ sp:varName  "tableClass" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spif:invoke ;
                                                                    sp:arg1  [ sp:varName  "function" ] ;
                                                                    sp:arg2  spin:_arg1
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:returnType  xsd:integer .

spin:Column  a           rdfs:Class ;
        rdfs:comment     "Provides metadata about a column in the result set of a (SPARQL) query, for example of the body queries of SPIN templates. Columns can define human-readable labels that serve as column titles, using rdfs:label." ;
        rdfs:label       "Column" ;
        rdfs:subClassOf  rdfs:Resource .

spif:foreach  a          spin:MagicProperty ;
        rdfs:comment     "Can be used to \"iterate\" over a list of RDF nodes given as members of a list on the right. An unbound variable must be on the left side of the magic property. On the right side, a list of nodes with arbitrary length can be placed.\n\nFor example, ?subject spif:foreach (owl:Thing owl:Nothing) will bind ?subject to owl:Thing and then owl:Nothing." ;
        rdfs:label       "for each" ;
        rdfs:subClassOf  spin:MagicProperties .

sp:sameTerm  a           spin:Function ;
        rdfs:comment     "Returns TRUE if ?arg1 and ?arg2 are the same RDF term as defined in Resource Description Framework (RDF): Concepts and Abstract Syntax; returns FALSE otherwise." ;
        rdfs:label       "same term" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sameTerm> ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first argument" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second argument" ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "sameTerm" .

kbss-module:import-e5x
        a                sm:Module ;
        rdfs:comment     "Import E5X file by creating RDF representation of the file" ;
        rdfs:label       "Import E5X file" ;
        rdfs:subClassOf  sm:inbas-adapter-module ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Uri of a resource referencing content of an e5x file" ;
                           spl:optional   false ;
                           spl:predicate  km-param:has-resource-uri
                         ] .

form-fss-gen-0.1:retrieve-static-form
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "retrieve-static-form" ;
        sm:next             form-fss-gen-0.1:attach-possible-values-hook , form-fss-gen-0.1:create-delivery , form-fss-gen-0.1:create-follow-up-procedure ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "o" ] ;
                                                sp:predicate  [ sp:varName  "p" ] ;
                                                sp:subject    [ sp:varName  "s" ]
                                              ]
                                            ) ;
                              sp:text       "CONSTRUCT {\n    ?s ?p ?o .\n}\nWHERE {\n    SERVICE ?studyStaticFormServiceUrl {\n           ?s ?p ?o .\n    }\n}" ;
                              sp:where      ( [ a              sp:Service ;
                                                sp:elements    ( [ sp:object     [ sp:varName  "o" ] ;
                                                                   sp:predicate  [ sp:varName  "p" ] ;
                                                                   sp:subject    [ sp:varName  "s" ]
                                                                 ]
                                                               ) ;
                                                sp:serviceURI  [ sp:varName  "studyStaticFormServiceUrl" ]
                                              ]
                                            )
                            ] ;
        sml:replace         true .

sml:newFilePath  a  rdf:Property ;
        rdfs:label  "new file path" ;
        rdfs:range  xsd:string .

sp:exists  a             spin:Function ;
        rdfs:comment     "The filter function EXISTS. The graph pattern is stored in sp:elements." ;
        rdfs:label       "EXISTS" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "EXISTS" .

sp:strstarts  a          spin:Function ;
        rdfs:comment     "Returns true if the lexical form of ?arg1 begins with the lexical form of ?arg2, otherwise it returns false." ;
        rdfs:label       "strstarts" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-starts> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The sub-string that the input string is supposed to begin with." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "STRSTARTS" .

spl:max  a               spin:Function ;
        rdfs:comment     "Takes two arguments and returns the larger one of them." ;
        rdfs:label       "max" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:gt ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  spin:_arg2
                                                                             ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal .

spl:AllArguments  a         spin:SelectTemplate ;
        rdfs:comment        "Gets a list of all spl:Arguments declared at a given class and its superclasses." ;
        rdfs:label          "All arguments" ;
        rdfs:subClassOf     spin:SelectTemplates ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "arg" ]
                                                    [ sp:varName  "atClass" ]
                                                  ) ;
                              sp:where            ( [ a           sp:TriplePath ;
                                                      sp:object   [ sp:varName  "atClass" ] ;
                                                      sp:path     [ a           sp:ModPath ;
                                                                    sp:modMax   -2 ;
                                                                    sp:modMin   0 ;
                                                                    sp:subPath  rdfs:subClassOf
                                                                  ] ;
                                                      sp:subject  [ sp:varName  "class" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "arg" ] ;
                                                      sp:predicate  spin:constraint ;
                                                      sp:subject    [ sp:varName  "atClass" ]
                                                    ]
                                                    [ sp:object     spl:Argument ;
                                                      sp:predicate  rdf:type ;
                                                      sp:subject    [ sp:varName  "arg" ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The class to get the arguments of." ;
                              spl:predicate  spl:class ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:labelTemplate  "All spl:Arguments of {?class}" .

spr:colType  a           spin:Function ;
        rdfs:comment     "Gets the (data) type of a column, if this information is present. The datatype may be derived from spin:Columns attached to the table data provider." ;
        rdfs:label       "column type" ;
        rdfs:subClassOf  spr:ColTypeFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "function" ] ;
                                                   sp:predicate  spr:colTypeFunction ;
                                                   sp:subject    [ sp:varName  "tableClass" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spif:invoke ;
                                                                    sp:arg1  [ sp:varName  "function" ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:returnType  rdfs:Class .

spl:UntypedObjectPropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:comment        "A generic SPIN template that can be used to declare a constraint that all values of a given property must have an rdf:type." ;
        rdfs:label          "Untyped object property constraint" ;
        rdfs:subClassOf     spl:PropertyConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b11
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b11
                                              ]
                                              [ sp:object     [ sp:varName  "property" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b11
                                              ]
                                              [ sp:object     [ sp:varName  "message" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b11
                                              ]
                                            ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "object" ] ;
                                                sp:predicate  [ sp:varName  "property" ] ;
                                                sp:subject    spin:_this
                                              ]
                                              [ a              sp:Filter ;
                                                sp:expression  [ a            sp:notExists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "anyType" ] ;
                                                                                  sp:predicate  rdf:type ;
                                                                                  sp:subject    [ sp:varName  "object" ]
                                                                                ]
                                                                              )
                                                               ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  "Value " ;
                                                                 sp:arg2  [ sp:varName  "object" ] ;
                                                                 sp:arg3  " must have a type"
                                                               ] ;
                                                sp:variable    [ sp:varName  "message" ]
                                              ]
                                            )
                            ] ;
        spin:labelTemplate  "Values of {?property} must have a type" .

form-fss-gen-0.1:bind-saved-data-service-url
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "Bind saved data service url" ;
        sm:next            form-fss-gen-0.1:retrieve-saved-data ;
        sm:outputVariable  "studySavedDataServiceUrl" ;
        sml:value          [ a        sp:iri ;
                             sp:arg1  [ a        sp:concat ;
                                        sp:arg1  [ a        sp:str ;
                                                   sp:arg1  [ sp:varName  "formGenRepositoryUrl" ]
                                                 ] ;
                                        sp:arg2  "?default-graph-uri=" ;
                                        sp:arg3  [ a        sp:encode_for_uri ;
                                                   sp:arg1  [ a        sp:str ;
                                                              sp:arg1  [ sp:varName  "recordGraphId" ]
                                                            ]
                                                 ]
                                      ]
                           ] .

sml:snippet  a      rdf:Property ;
        rdfs:label  "snippet" .

sml:ReturnRDF  a         sm:Module ;
        rdfs:comment     "Represents the exit point of a function that returns RDF. The function can be referenced from the outside (e.g., as a web service) by its URI or local name. The RDF triples will be serialized into Turtle, JSON-LD or RDF/XML." ;
        rdfs:label       "Return RDF" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The base URI of the graph to serialize." ;
                           spl:optional   true ;
                           spl:predicate  sml:baseURI ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The serialization format - must be sml:JSONLD, sml:RDFXML or sml:Turtle." ;
                           spl:defaultValue  sml:RDFXML ;
                           spl:predicate     sml:serialization ;
                           spl:valueType     sm:ValueType
                         ] .

sp:Delete  a             rdfs:Class , owl:DeprecatedClass ;
        rdfs:comment     "Deprecated - use sp:Modify instead.\n\nRepresents a DELETE FROM (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:deletePattern. The WHERE clause is represented using sp:where." ;
        rdfs:label       "Delete" ;
        rdfs:subClassOf  sp:Modify .

composite:index  a    owl:DatatypeProperty ;
        rdfs:comment  "The index of the subject among its siblings. Note that this could in principle take arbitrary numbers (including floats). We recommend using xsd:ints starting at 0." ;
        rdfs:range    xsd:int .

sml:CreateUISPINDocument
        a                owl:DeprecatedClass , sm:Module ;
        rdfs:comment     "Deprecated: use sml:CreateSWPDocument instead." ;
        rdfs:label       "Create UISPIN document" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The UISPIN snippet to evaluate." ;
                           spl:predicate  sml:view ;
                           spl:valueType  <http://uispin.org/ui#Node>
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "True to only create a UISPIN snippet, e.g. without head/body." ;
                           spl:optional   true ;
                           spl:predicate  sml:snippet ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the output variable that will contain the resulting document (as a string)." ;
                           spl:defaultValue  "doc" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

sml:PerformUpdate  a     sm:Module ;
        rdfs:comment     "Performs a SPARQL UPDATE call to insert and/or delete triples.  This module differs from sml:ApplyConstruct (and other module types) by making persistent changes when the script runs.  Therefore this module should be used carefully.\n\nThe default graph of the WHERE clause is the input graph of the module, i.e. the result of its predecessors. However, these cannot be modified using INSERT or DELETE. Instead, a named graph needs to be provided there, e.g. using the GRAPH keyword in the INSERT or DELETE clauses.\n\nOnly one instance of sml:updateQuery will be executed.  For multiple SPARQL UPDATE statements use multiple PerformUpdate instances.\n\nEVN/RDM users note that performing an update on a graph under teamwork control (urn:x-evn-...) does not execute EVN-specific side effects: no edit rules will fire and no change history entry may be created. You should always use ui:update in conjunction with sml:CreateSWPDocument to modify such graphs." ;
        rdfs:label       "Perform update" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SPARQL 1.1 UPDATE request to perform.  Only one instance of this property will be executed." ;
                           spl:maxCount   "1"^^xsd:int ;
                           spl:minCount   "1"^^xsd:int ;
                           spl:predicate  sml:updateQuery ;
                           spl:valueType  sp:Update
                         ] .

sp:unaryMinus  a         spin:Function ;
        rdfs:comment     "Returns the operand ?arg1 with the sign reversed. If ?arg1 is positive, its negative is returned; if it is negative, its positive is returned." ;
        rdfs:label       "unary minus" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "-" .

spl:PropertyConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract superclass of constraint templates that constrain exactly one property." ;
        rdfs:label       "Property constraint templates" ;
        rdfs:subClassOf  spl:ConstraintTemplates ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The property being constrained." ;
                           spl:predicate  arg:property ;
                           spl:valueType  rdf:Property
                         ] .

sml:newFileName  a  rdf:Property ;
        rdfs:label  "new file name" ;
        rdfs:range  xsd:string .

spr:isEmpty  a           spin:Function ;
        rdfs:comment     "Checks whether a given SPR table has zero rows." ;
        rdfs:label       "is empty" ;
        rdfs:subClassOf  spr:RowCountFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a              sp:Filter ;
                                         sp:expression  [ a        sp:eq ;
                                                          sp:arg1  [ a        spr:rowCount ;
                                                                     sp:arg1  spin:_arg1
                                                                   ] ;
                                                          sp:arg2  0
                                                        ]
                                       ]
                                     )
                         ] ;
        spin:returnType  xsd:boolean .

spl:Test-object-noValue
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:object ;
                              sp:arg1  owl:versionInfo ;
                              sp:arg2  owl:versionInfo
                            ] .

spif:random  a           spin:Function ;
        rdfs:comment     "Creates a random xsd:double between 0 and 1." ;
        rdfs:label       "random" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:returnType  xsd:double .

sp:gt   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 > arg2." ;
        rdfs:label       "gt" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      ">" .

sp:datatype  a           spin:Function ;
        rdfs:comment     "Returns the datatype IRI of argument ?arg1; returns xsd:string if the parameter is a simple literal." ;
        rdfs:label       "datatype" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the literal to get the datatype of" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Class ;
        spin:symbol      "datatype" .

form-fss-gen-0.1:construct-possible-values
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "construct-possible-values" ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "label" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "value" ]
                                              ]
                                              [ sp:object     [ sp:varName  "explanation" ] ;
                                                sp:predicate  rdfs:comment ;
                                                sp:subject    [ sp:varName  "value" ]
                                              ]
                                            ) ;
                              sp:text       "prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> \nCONSTRUCT {\n     ?value rdfs:label ?label .\n     ?value rdfs:comment ?explanation .\n}\nWHERE {\n        ?value a ?questionOrigin .\n         ?value rdfs:label ?label .\n         OPTIONAL {\n             ?value rdfs:comment ?explanation .\n          }\n} VALUES (?questionOrigin) {\n    (<http://vfn.cz/ontologies/study-model/parity>)\n}" ;
                              sp:values     [ sp:bindings  ( ( <http://vfn.cz/ontologies/study-model/parity> ) ) ;
                                              sp:varNames  ( "questionOrigin" )
                                            ] ;
                              sp:where      ( [ sp:object     [ sp:varName  "questionOrigin" ] ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "value" ]
                                              ]
                                              [ sp:object     [ sp:varName  "label" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "value" ]
                                              ]
                                              [ a            sp:Optional ;
                                                sp:elements  ( [ sp:object     [ sp:varName  "explanation" ] ;
                                                                 sp:predicate  rdfs:comment ;
                                                                 sp:subject    [ sp:varName  "value" ]
                                                               ]
                                                             )
                                              ]
                                            )
                            ] ;
        sml:replace         true .

sp:strbefore  a          spin:Function ;
        rdfs:comment     "Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that precedes in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string." ;
        rdfs:label       "strbefore" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strbefore> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The pattern to find within the input string." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "STRBEFORE" .

sml:ImportRDFFromWorkspace
        a                sm:Module ;
        rdfs:comment     "Loads an RDF file from the workspace, based on its base URI (or a path to the file). If the file is already open, it will reuse the currently open model (including any changes that it has compared to the persistent version). The system will use which ever physical file has been registered for the given base URI.  This is the recommended module to load any file type supported by TopBraid, including file serializations (Turtle, RDF/XML and N-TRIPLE), data connectors, XML files (Semantic XML), Excel .xls or .xlsx files (Semantic Tables), etc.  If the file being opened is a file, the file is loaded into memory.  If it is a data connector (RDF or relational back-end), the data source is opened, but no data is loaded into memory. The output graph of this module is the loaded graph only, i.e. other input modules are not passed on." ;
        rdfs:label       "Import RDF from workspace" ;
        rdfs:subClassOf  sml:ImportFromLocalModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "An (optional) file path pointing to the file that shall be opened. The system will look up the base URI of that file and then open that base URI. This means that if the workspace contains multiple copies of that base URI then it may actually load a different file than the one specified here (it will always use the primary file)." ;
                           spl:optional   true ;
                           spl:predicate  sml:sourceFilePath ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The (optional) base URI of the model to open. Either this baseURI must be specified or the sourceFilePath. If both are present then the baseURI has priority." ;
                           spl:optional   true ;
                           spl:predicate  sml:baseURI ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "Indicates whether owl:imports shall be ignored. If false, then the union of the base graph plus its (transitive) imports will be returned." ;
                           spl:defaultValue  false ;
                           spl:optional      true ;
                           spl:predicate     sml:ignoreImports ;
                           spl:valueType     xsd:boolean
                         ] .

spl:UnionTemplate  a     rdfs:Class ;
        rdfs:comment     "This type can be used for templates that serve as the union (or \"collector\") of other templates. Union templates differ from other templates in that all spl:Arguments are optional. This means that union templates can be declared as subclasses of multiple other templates, yet when instantiated, only some of the arguments defined by the superclasses need to be filled in." ;
        rdfs:label       "Union template" ;
        rdfs:subClassOf  spin:Template .

composite:child  a     owl:ObjectProperty ;
        rdfs:comment   "The object is the child of the subject." ;
        owl:inverseOf  composite:parent .

spr:cell  a              spin:Function ;
        rdfs:comment     "Gets the cell value of a given Table (?arg1) at a given row (?arg2) and column (?arg3)." ;
        rdfs:label       "cell" ;
        rdfs:subClassOf  spr:CellFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "function" ] ;
                                                   sp:predicate  spr:cellFunction ;
                                                   sp:subject    [ sp:varName  "tableClass" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spif:invoke ;
                                                                    sp:arg1  [ sp:varName  "function" ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2 ;
                                                                    sp:arg4  spin:_arg3
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The spr:Table to get the cell value of." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The row index, starting at 0." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The column index, starting at 0." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] .

spin:UpdateTemplates  a  spin:UpdateTemplate ;
        rdfs:comment     "Suggested abstract base class for all UpdateTemplates." ;
        rdfs:label       "Update templates" ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

sml:schemaNamespace  a  rdf:Property ;
        rdfs:label  "schemaNamespace" ;
        rdfs:range  xsd:string .

spif:Test-parseDate-MMMMMMMMM_dd_yyyy
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "MMMMMMMMM dd yyyy" ;
                              sp:arg1      "February 13 2008"
                            ] ;
        spl:testResult      "2008-02-13"^^xsd:date .

spr:rowCountFunction  a     rdf:Property ;
        rdfs:domain         spr:TableClass ;
        rdfs:label          "rowCount function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sp:silent  a                rdf:Property ;
        rdfs:label          "silent" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:jmsDestination  a  rdf:Property ;
        rdfs:comment  "The name of the JMS queue to send the message to." ;
        rdfs:label    "jmssubject" ;
        rdfs:range    xsd:string .

sml:ReturnSPARQLResults
        a                sm:Module ;
        rdfs:comment     "Runs a SPARQL Select query and returns its result in the standard SPARQL output formats XML, JSON, CSV or TSV." ;
        rdfs:label       "Return SPARQL results" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SELECT query to execute." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:selectQuery
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "the serialization format such as XML or JSON" ;
                           spl:defaultValue  sm:XML ;
                           spl:optional      true ;
                           spl:predicate     sml:serialization ;
                           spl:valueType     sm:ValueType
                         ] .

spr:colWidthFunction  a     rdf:Property ;
        rdfs:domain         spr:TableClass ;
        rdfs:label          "colWidth function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sm:inbas-adapter-module
        a                sm:Module ;
        rdfs:label       "INBAS adapter module" ;
        rdfs:subClassOf  kbss-module:inbas-modules .

sml:ImportSystemTriples
        a                sm:Module ;
        rdfs:comment     "Imports the RDF Schema and OWL system triples, including the definitions of owl:Class, rdf:type, rdfs:label, rdfs:seeAlso etc. An example use case where this is needed is if you want to query for the rdfs:label of any property including system properties. Another use case is if you want to walk the class hierarchy (using rdfs:subClassOf) including metaclasses and other system classes." ;
        rdfs:label       "Import system triples" ;
        rdfs:subClassOf  sml:ImportFromVariousModules .

sml:CloneVariable  a     sm:Module ;
        rdfs:comment     "Clones a given variable value and assigns it to a new output variable. The input variable will keep its value.\n\nThis module can be useful to \"rename\" an existing variable so that it has a matching name that is expected by modules downstream in the script. For example, if you have a variable ?xmlFile but a next module expects an input argument ?xml (via an argument sml:xml), then you can use sml:CloneVariable to bind ?xml with the value of ?xmlFile. Note that in many (most?) cases, you can achieve the same by using inline SPARQL expressions: in TBC use \"Add SPARQL expression\" from the context menu of the property name and enter an expression such as ?xmlFile at the sml:xml property." ;
        rdfs:label       "Clone variable" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The name of the input variable that shall be cloned." ;
                           spl:predicate  sml:inputVariable ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The name of the output variable that will be created." ;
                           spl:predicate  sm:outputVariable ;
                           spl:valueType  xsd:string
                         ] .

spin:violationPath  a       rdf:Property ;
        rdfs:comment        "An optional attribute of ConstraintViolations to provide a path expression from the root resource to the value that is invalid. If this is a URI then the path represents the predicate of a subject/predicate combination. Otherwise it should be a blank node of type sp:Path." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation path" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  spin:systemProperty .

sml:selectInstanceClass
        a            rdf:Property ;
        rdfs:domain  sml:SelectInstance ;
        rdfs:label   "selectInstanceClass" ;
        rdfs:range   rdfs:Class .

sp:systemProperty  a  rdf:Property ;
        rdfs:comment  "An abstract base proprerty that groups together the SP system properties. Users typically don't need to see them anyway." ;
        rdfs:label    "SP system property" .

sp:ucase  a              spin:Function ;
        rdfs:comment     "Converts a string to upper case characters." ;
        rdfs:label       "UCASE" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-ucase> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "UCASE" .

sml:baseURI  a        rdf:Property ;
        rdfs:comment  "The base URI of an RDF model." ;
        rdfs:label    "baseURI" ;
        rdfs:range    xsd:string .

sp:and  a                spin:Function ;
        rdfs:comment     "Return the logical AND between two (boolean) operands." ;
        rdfs:label       "and" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand of the intersection" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand of the intersection" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "&&" .

sm:bodyScript  a      rdf:Property ;
        rdfs:comment  "Links a SPARQLMotion Function with the beginning of the linear SM script that shall be executed when the function is called." ;
        rdfs:domain   sm:Function ;
        rdfs:label    "body script" ;
        rdfs:range    sm:Modules .

spr:colTypeFunction  a      rdf:Property ;
        rdfs:domain         spr:TableClass ;
        rdfs:label          "colType function" ;
        rdfs:range          spin:Function ;
        rdfs:subPropertyOf  spr:systemProperty .

sp:separator  a             rdf:Property ;
        rdfs:comment        "Stores the separator=\"...\" value of a GROUP_CONCAT (sp:GroupConcat) aggregation." ;
        rdfs:domain         sp:GroupConcat ;
        rdfs:label          "separator" ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:buttonLabel  a  rdf:Property ;
        rdfs:label  "button label" ;
        rdfs:range  xsd:string .

sp:templates  a             rdf:Property ;
        rdfs:comment        "Points to a list of TripleTemplates that form the head of a Construct query." ;
        rdfs:domain         sp:Construct ;
        rdfs:label          "templates" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:add  a                spin:Function ;
        rdfs:comment     "Returns the arithmetic sum of its operands." ;
        rdfs:label       "add" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first number" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second number" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:symbol      "+" .

form-fss-gen-0.1:create-delivery
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "create-delivery" ;
        sm:next             form-fss-gen-0.1:attach-possible-values-hook ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "deliveryUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "allDeliveriesUri" ]
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "deliveryDateUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "deliveryMethodUri" ] ;
                                                sp:predicate  doc:has_related_question ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     "answerable" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     "checkbox" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     "section" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "deliveryLabel" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     _:b12 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b12
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b12
                                              ]
                                              [ sp:object     [ sp:varName  "allDeliveriesUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b12
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "deliveryMethodUri" ]
                                              ]
                                              [ sp:object     "type-ahead" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "deliveryMethodUri" ]
                                              ]
                                              [ sp:object     <http://vfn.cz/ontologies/study-model/method-of-delivery> ;
                                                sp:predicate  form:has-question-origin ;
                                                sp:subject    [ sp:varName  "deliveryMethodUri" ]
                                              ]
                                              [ sp:object     "Method of delivery" ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "deliveryMethodUri" ]
                                              ]
                                              [ sp:object     _:b13 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "deliveryMethodUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b13
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b13
                                              ]
                                              [ sp:object     [ sp:varName  "deliveryUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b13
                                              ]
                                              [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     "masked-input" ;
                                                sp:predicate  form-lt:has-layout-class ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     "MM/YYYY" ;
                                                sp:predicate  form:has-input-mask ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     <http://vfn.cz/ontologies/study-model/delivery-time> ;
                                                sp:predicate  form:has-question-origin ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     [ sp:varName  "deliveryMethodUri" ] ;
                                                sp:predicate  form:has-preceding-question ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     "Date of delivery (month/year)" ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     _:b14 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b14
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b14
                                              ]
                                              [ sp:object     [ sp:varName  "deliveryUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b14
                                              ]
                                              [ sp:object     _:b15 ;
                                                sp:predicate  form:is-relevant-if ;
                                                sp:subject    [ sp:varName  "deliveryUriCopy" ]
                                              ]
                                              [ sp:object     form:condition ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b15
                                              ]
                                              [ sp:object     true ;
                                                sp:predicate  form:accepts-answer-value ;
                                                sp:subject    _:b15
                                              ]
                                              [ sp:object     [ sp:varName  "previousDeliveryUri" ] ;
                                                sp:predicate  form:has-tested-question ;
                                                sp:subject    _:b15
                                              ]
                                            ) ;
                              sp:text       "CONSTRUCT {\n   ?allDeliveriesUri doc:has_related_question ?deliveryUri .\n   ?deliveryUri\n        rdf:type doc:question ;\n#        doc:has_related_question ?deliveryTimeUri ;\n        doc:has_related_question ?deliveryDateUri ;\n        doc:has_related_question ?deliveryMethodUri ;\n        form-lt:has-layout-class \"answerable\" ;\n        form-lt:has-layout-class \"checkbox\" ;\n        form-lt:has-layout-class \"section\" ; \n        rdfs:label ?deliveryLabel ;\n        form:is-relevant-if [\n            rdf:type form:condition ; \n            form:accepts-answer-value \"true\"^^xsd:boolean ;\n            form:has-tested-question ?allDeliveriesUri ;\n        ] ;\n  .\n#  ?deliveryTimeUri\n#        rdf:type doc:question ;\n#        form-lt:has-layout-class \"type-ahead\" ;\n#        form:has-question-origin stm:delivery-time ;\n#        rdfs:label \"Time\" ;\n#        form:is-relevant-if [\n#             rdf:type form:condition ;\n#             form:accepts-answer-value \"true\"^^xsd:boolean ;\n#             form:has-tested-question ?deliveryUri ;\n#        ] ;\n#  .\n  ?deliveryMethodUri \n        rdf:type doc:question ;\n        form-lt:has-layout-class \"type-ahead\" ;\n        form:has-question-origin stm:method-of-delivery ;\n        rdfs:label \"Method of delivery\" ;\n        form:is-relevant-if [\n              rdf:type form:condition ;\n              form:accepts-answer-value \"true\"^^xsd:boolean ;\n              form:has-tested-question ?deliveryUri ;\n        ] ;\n  .\n  ?deliveryDateUri\n        rdf:type doc:question ;\n        form-lt:has-layout-class \"masked-input\" ;\n        form:has-input-mask \"MM/YYYY\" ;\n        form:has-question-origin stm:delivery-time ;\n        form:has-preceding-question ?deliveryMethodUri ;\n        rdfs:label \"Date of delivery (month/year)\" ;\n        form:is-relevant-if [\n             rdf:type form:condition ;\n             form:accepts-answer-value \"true\"^^xsd:boolean ;\n             form:has-tested-question ?deliveryUri ;\n        ] ;\n  .\n# hiding if not previous year \n  ?deliveryUriCopy\n        form:is-relevant-if [\n              rdf:type form:condition ;\n              form:accepts-answer-value \"true\"^^xsd:boolean ;\n              form:has-tested-question ?previousDeliveryUri ;\n       ] ;\n  .\n}\nWHERE {\n    { \n         SELECT ?delivery ?previousDelivery \n         WHERE { }\n         VALUES (?delivery ?previousDelivery) {\n               (\"1\" UNDEF)\n               (\"2\" \"1\")\n               (\"3\" \"2\")\n               (\"4\" \"3\")\n               (\"5\" \"4\")\n          }\n    }\n    BIND(ff:follow-up-and-recurrence--pregnancy-after-primary-treatment--deliveries as ?allDeliveriesUri) .\n    BIND(str(?allDeliveriesUri) as ?allDeliveriesUriStr) .\n    BIND(concat(?allDeliveriesUriStr, \"--\", ?delivery, \"-delivery\")  as ?deliveryUriStr)\n    BIND(concat(str(?delivery), \". delivery\") as ?deliveryLabel)\n#    BIND(concat(?deliveryUriStr, \"--time\") as ?deliveryTimeUriStr)\n    BIND(concat(?deliveryUriStr, \"--date\") as ?deliveryDateUriStr)\n    BIND(concat(?deliveryUriStr, \"--method\") as ?deliveryMethodUriStr)\n# str -> uri\n    BIND(URI(?deliveryUriStr) as ?deliveryUri)\n#    BIND(URI(?deliveryTimeUriStr) as ?deliveryTimeUri)\n    BIND(URI(?deliveryDateUriStr) as ?deliveryDateUri)\n    BIND(URI(?deliveryMethodUriStr) as ?deliveryMethodUri)\n    BIND(concat(?procedureStr, \"--\", ?previousYear, \"-year\") as ?previousYearUriStr)\n    BIND(concat(?allDeliveriesUriStr, \"--\", ?previousDelivery, \"-delivery\")  as ?previousDeliveryUriStr)\n    BIND(URI(?previousDeliveryUriStr) as ?previousDeliveryUri)    \n    BIND(IF (BOUND (?previousDelivery), ?deliveryUri, ?previousDelivery ) as ?deliveryUriCopy)\n}" ;
                              sp:where      ( [ a         sp:SubQuery ;
                                                sp:query  [ a                   sp:Select ;
                                                            sp:resultVariables  ( [ sp:varName  "delivery" ]
                                                                                  [ sp:varName  "previousDelivery" ]
                                                                                ) ;
                                                            sp:values           [ sp:bindings  ( ( "1" sp:undef ) ( "2" "1" ) ( "3" "2" ) ( "4" "3" ) ( "5" "4" ) ) ;
                                                                                  sp:varNames  ( "delivery" "previousDelivery" )
                                                                                ] ;
                                                            sp:where            ()
                                                          ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  ff:follow-up-and-recurrence--pregnancy-after-primary-treatment--deliveries ;
                                                sp:variable    [ sp:varName  "allDeliveriesUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:str ;
                                                                 sp:arg1  [ sp:varName  "allDeliveriesUri" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "allDeliveriesUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "allDeliveriesUriStr" ] ;
                                                                 sp:arg2  "--" ;
                                                                 sp:arg3  [ sp:varName  "delivery" ] ;
                                                                 sp:arg4  "-delivery"
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ a        sp:str ;
                                                                            sp:arg1  [ sp:varName  "delivery" ]
                                                                          ] ;
                                                                 sp:arg2  ". delivery"
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryLabel" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "deliveryUriStr" ] ;
                                                                 sp:arg2  "--date"
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryDateUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "deliveryUriStr" ] ;
                                                                 sp:arg2  "--method"
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryMethodUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "deliveryUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "deliveryDateUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryDateUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "deliveryMethodUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryMethodUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "procedureStr" ] ;
                                                                 sp:arg2  "--" ;
                                                                 sp:arg3  [ sp:varName  "previousYear" ] ;
                                                                 sp:arg4  "-year"
                                                               ] ;
                                                sp:variable    [ sp:varName  "previousYearUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "allDeliveriesUriStr" ] ;
                                                                 sp:arg2  "--" ;
                                                                 sp:arg3  [ sp:varName  "previousDelivery" ] ;
                                                                 sp:arg4  "-delivery"
                                                               ] ;
                                                sp:variable    [ sp:varName  "previousDeliveryUriStr" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:uri ;
                                                                 sp:arg1  [ sp:varName  "previousDeliveryUriStr" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "previousDeliveryUri" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:if ;
                                                                 sp:arg1  [ a        sp:bound ;
                                                                            sp:arg1  [ sp:varName  "previousDelivery" ]
                                                                          ] ;
                                                                 sp:arg2  [ sp:varName  "deliveryUri" ] ;
                                                                 sp:arg3  [ sp:varName  "previousDelivery" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "deliveryUriCopy" ]
                                              ]
                                            )
                            ] ;
        sml:replace         true .

spif:indexOf  a          spin:Function ;
        rdfs:comment     "Gets the index of the first occurrence of a certain substring in a given search string. Returns an error if the substring is not found." ;
        rdfs:label       "index of" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The optional index to start with." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the string to search in" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the sub string to search for" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:integer .

spr:CellFunctions  a     spin:Function ;
        rdfs:label       "Cell functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true .

sp:if   a                spin:Function ;
        rdfs:comment     "The SPARQL 1.1 built-in function IF." ;
        rdfs:label       "IF" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A condition to evaluate - if true then the ?arg2 will be returned, otherwise ?arg3." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The function result if ?arg1 is true." ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The function result if ?arg1 is false." ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:symbol      "IF" .

sp:strends  a            spin:Function ;
        rdfs:comment     "Returns true if the lexical form of ?arg1 ends with the lexical form of ?arg2, otherwise it returns false." ;
        rdfs:label       "strends" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-ends> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The sub-string that the input string is supposed to end with." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "STRENDS" .

sml:ProcessingModules
        a                sm:Module ;
        rdfs:comment     "Modules that process data, e.g. to transform, filter and map it." ;
        rdfs:label       "Processing" ;
        rdfs:subClassOf  sm:Modules ;
        spin:abstract    true ;
        composite:index  "1"^^xsd:int .

sp:ge   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 >= ?arg2." ;
        rdfs:label       "ge" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      ">=" .

spif:lastIndexOf  a      spin:Function ;
        rdfs:comment     "Gets the index of the last occurrence of a certain substring in a given search string. Returns an error if the substring is not found." ;
        rdfs:label       "last index of" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the string to search in" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the sub string to search for" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The optional index to start with." ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:returnType  xsd:integer .

sp:DeleteData  a         rdfs:Class ;
        rdfs:comment     "An Update operation to delete specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs." ;
        rdfs:label       "Delete data" ;
        rdfs:subClassOf  sp:Update .

sp:AltPath  a            rdfs:Class ;
        rdfs:comment     "An alternative path with the union of sp:path1 and sp:path2." ;
        rdfs:label       "Alt path" ;
        rdfs:subClassOf  sp:Path .

sp:elements  a              rdf:Property ;
        rdfs:comment        "Points to an ElementList, for example in an Optional element." ;
        rdfs:label          "elements" ;
        rdfs:range          sp:ElementList ;
        rdfs:subPropertyOf  sp:systemProperty .

spin:Template  a         rdfs:Class ;
        rdfs:comment     "The metaclass of SPIN templates. Templates are classes that are instances of this class. A template represents a reusable SPARQL query or update request that can be parameterized with arguments. Templates can be instantiated in places where normally a SPARQL query or update request is used, in particular as spin:rules and spin:constraints." ;
        rdfs:label       "Template" ;
        rdfs:subClassOf  spin:Module ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "the body of the Template" ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body
                         ] .

sm:nodeY  a           rdf:Property ;
        rdfs:comment  "The y coordinate of a module on a diagram." ;
        rdfs:label    "node y" ;
        rdfs:range    xsd:integer .

sml:DeleteFile  a        sm:Module ;
        rdfs:label       "Delete file" ;
        rdfs:subClassOf  sml:FileProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The file to delete." ;
                           spl:predicate  sml:filePath ;
                           spl:valueType  xsd:string
                         ] .

sm:else  a                  rdf:Property ;
        rdfs:comment        "Links a branching module with its \"false\" branch, i.e. the branch that shall be executed if the condition is false." ;
        rdfs:label          "else" ;
        rdfs:range          spin:Modules ;
        rdfs:subPropertyOf  sm:child .

sml:contentType  a  rdf:Property ;
        rdfs:label  "content type" .

spif:for  a              spin:MagicProperty ;
        rdfs:comment     "Can be used to iterate over a range of (integer) numbers similar to a for loop in iterative programming languages. An unbound variable must be placed on the left side of this magic property. On the right side, a list of two numbers needs to be placed.\n\nFor example, ?index spif:for (1 10) binds ?index to all xsd:integers >= 1 and <= 10." ;
        rdfs:label       "for" ;
        rdfs:subClassOf  spin:MagicProperties .

spif:lowerTitleCase  a   spin:Function ;
        rdfs:comment     "Converts an input string into lower title case. \nFor example, \"semantic web\" becomes \"semantic Web\".\nAn optional matching expression can be given to only convert the matched characters." ;
        rdfs:label       "lower title case" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The match expression" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string .

sp:isIRI  a              spin:Function ;
        rdfs:comment     "Checks whether a given node is a IRI node." ;
        rdfs:label       "isIRI" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node being tested" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isIRI" .

spin:Fatal  a         spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is a severe error that must be fixed. Constraint checking engines may decide to stop further evaluation once a fatal error has been detected." ;
        rdfs:label    "Fatal" .

spr:visitCol  a          spin:Function ;
        rdfs:comment     "Visits a given column ?arg2 of Table ?arg1 with a given spr:AggregatorStepFunction (?arg5) and then calls itself recursively until the last value index (?arg4) has been reached. ?arg6 is the result of the previous step." ;
        rdfs:label       "visit row" ;
        rdfs:subClassOf  spr:Functions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  [ a        spr:cell ;
                                                                    sp:arg1  spin:_arg1 ;
                                                                    sp:arg2  spin:_arg3 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "value" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:bound ;
                                                                               sp:arg1  [ sp:varName  "value" ]
                                                                             ] ;
                                                                    sp:arg2  [ a        spif:invoke ;
                                                                               sp:arg1  spin:_arg5 ;
                                                                               sp:arg2  [ sp:varName  "arg6" ] ;
                                                                               sp:arg3  [ sp:varName  "value" ]
                                                                             ] ;
                                                                    sp:arg3  [ sp:varName  "arg6" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "next" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:lt ;
                                                                               sp:arg1  spin:_arg3 ;
                                                                               sp:arg2  spin:_arg4
                                                                             ] ;
                                                                    sp:arg2  [ a        spr:visitCol ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  spin:_arg2 ;
                                                                               sp:arg3  [ a        sp:add ;
                                                                                          sp:arg1  spin:_arg3 ;
                                                                                          sp:arg2  1
                                                                                        ] ;
                                                                               sp:arg4  spin:_arg4 ;
                                                                               sp:arg5  spin:_arg5 ;
                                                                               sp:arg6  [ sp:varName  "next" ]
                                                                             ] ;
                                                                    sp:arg3  [ sp:varName  "next" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The step function." ;
                           spl:predicate  sp:arg5 ;
                           spl:valueType  spin:Function
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The current aggregate value." ;
                           spl:predicate  sp:arg6
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The spr:Table to iterate over." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The row to iterate over." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The current step index." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The max number of steps to make." ;
                           spl:predicate  sp:arg4 ;
                           spl:valueType  xsd:integer
                         ] .

spr:Avg  a                  spr:Aggregator ;
        rdfs:label          "Avg" ;
        spr:resultFunction  sp:divide ;
        spr:startValue      "0"^^xsd:double ;
        spr:stepFunction    sp:add .

spin:eval  a             spin:Function ;
        rdfs:comment     "Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression." ;
        rdfs:label       "eval" ;
        rdfs:subClassOf  spin:Functions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The expression to evaluate. Should be a sp:Select, sp:Ask, a sp:Variable or an instance of a SPARQL function class, but may also be a simple RDF value." ;
                           spl:predicate  sp:arg1
                         ] .

spl:Test-instanceOf-rdfsLiteral-false
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:Thing ;
                              sp:arg2  rdfs:Literal
                            ] ;
        spl:testResult      false .

spl:ConstructDefaultValues
        a                   spin:ConstructTemplate ;
        rdfs:comment        "This template can be attached as spin:constructor to a root class such as rdfs:Resource to ensure that SPIN processors assign default values to certain properties. Looks for any templates attached as spin:constraints to the types of ?this and then assigns their declared spl:defaultValues." ;
        rdfs:label          "Construct default values" ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "defaultValue" ] ;
                                                sp:predicate  [ sp:varName  "predicate" ] ;
                                                sp:subject    spin:_this
                                              ]
                                            ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "directType" ] ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    spin:_this
                                              ]
                                              [ a           sp:TriplePath ;
                                                sp:object   [ sp:varName  "type" ] ;
                                                sp:path     [ a           sp:ModPath ;
                                                              sp:modMax   -2 ;
                                                              sp:modMin   0 ;
                                                              sp:subPath  rdfs:subClassOf
                                                            ] ;
                                                sp:subject  [ sp:varName  "directType" ]
                                              ]
                                              [ sp:object     [ sp:varName  "attribute" ] ;
                                                sp:predicate  spin:constraint ;
                                                sp:subject    [ sp:varName  "type" ]
                                              ]
                                              [ sp:object     [ sp:varName  "defaultValue" ] ;
                                                sp:predicate  spl:defaultValue ;
                                                sp:subject    [ sp:varName  "attribute" ]
                                              ]
                                              [ sp:object     [ sp:varName  "predicate" ] ;
                                                sp:predicate  spl:predicate ;
                                                sp:subject    [ sp:varName  "attribute" ]
                                              ]
                                            )
                            ] ;
        spin:labelTemplate  "Construct default values" .

sml:ConvertXMLToRDF  a   sm:Module ;
        rdfs:comment     "Converts an arbitrary XML input document into an RDF graph using the Semantic XML mapping approach. The input graph of this module may contain class definitions that have sxml: declarations attached to them and these will be used for the instances. For more, see Help > Import and Export > Creating, Importing, Querying, Saving XML documents with Semantic XML." ;
        rdfs:label       "Convert XML to RDF" ;
        rdfs:seeAlso     <http://composing-the-semantic-web.blogspot.com/2007/11/xmap-mapping-arbitrary-xml-documents-to.html> ;
        rdfs:subClassOf  sml:XMLProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The XML document that shall be converted to RDF. To avoid character encoding issues, we strongly recommend this value to be a reference to an already parsed XML document, and not a literal. In other words, use \"Add SPARQL expression\" from the drop down menu and enter ?varName and do not use a string value such as {?varName}. The actual document parsing should be handled by predecessing modules such as sml:ImportXMLFromURL." ;
                           spl:predicate  sml:xml
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The base URI of the new RDF (for the creation of the new class and property names)." ;
                           spl:predicate  sml:baseURI
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "If true then the resulting output graph will not include the input graph, i.e. only the new triples will be returned." ;
                           spl:optional   true ;
                           spl:predicate  sml:replace ;
                           spl:valueType  xsd:boolean
                         ] .

sml:ExportToRDFFile  a   sm:Module ;
        rdfs:comment     "Creates a new RDF file at the specified path inside the workspace and with the specified base URI. The serialization is derived from the file name according to TopBraid's conventions, e.g. files ending with .ttl will be written in Turtle format.\n\nNote that if an existing file is overwritten (with matching base URI), and the graph of this file has already been loaded, then the system will not reload the new graph. I.e. if the URI specified in sml:baseURI is the same baseURI of a graph currently open in TBC or TBL, the old graph will remain open and the export will only have an effect after closing the other copies.  A consequence of this is that you cannot overwrite a file and reload its new content within the same session, e.g. sml:ImportRDFFromWorkspace will still deliver the old graph. In order to modify an existing graph, the recommended approach is to use sml:PerformUpdate." ;
        rdfs:label       "Export to RDF file" ;
        rdfs:subClassOf  sml:ExportToLocalModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The base URI under which the resulting file will be registered in the workspace." ;
                           spl:predicate  sml:baseURI
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path of the file to create. The path can be relative to the current script's folder (e.g., myFolder/test.rdf) or absolute to the workspace root /myProject/myFolder/test.rdf. Can be left blank if the base URI already has a representation in the workspace. In that case, the primary file in the workspace will be overwritten." ;
                           spl:optional   true ;
                           spl:predicate  sml:targetFilePath
                         ] .

sml:stackTraceVariable
        a           rdf:Property ;
        rdfs:label  "stack trace variable" ;
        rdfs:range  xsd:string .

sp:Bind  a               rdfs:Class ;
        rdfs:comment     "A BIND element." ;
        rdfs:label       "Bind" ;
        rdfs:subClassOf  sp:Element .

sml:JSONLD  a       sml:RDFSerialization ;
        rdfs:label  "JSON-LD" .

sp:month  a              spin:Function ;
        rdfs:comment     "Extracts the month from a date/time literal." ;
        rdfs:label       "month" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The date or dateTime argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "month" .

spl:relevantPropertyAtClass
        a                spin:MagicProperty ;
        rdfs:comment     "A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are \"relevant\" for the class. Relevant means that they have the class in their domain and/or restrictions, including superclasses and sub-properties (unless they define their own domain). Domains consisting of an owl:unionOf are also handled.\n\nNote that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept ." ;
        rdfs:label       "relevant property at class" ;
        rdfs:subClassOf  spin:MagicProperties ;
        spin:body        [ a                   sp:Select ;
                           sp:distinct         true ;
                           sp:resultVariables  ( [ sp:varName  "class" ]
                                               ) ;
                           sp:where            ( [ a           sp:TriplePath ;
                                                   sp:object   [ sp:varName  "superClass" ] ;
                                                   sp:path     [ a           sp:ModPath ;
                                                                 sp:modMax   -2 ;
                                                                 sp:modMin   0 ;
                                                                 sp:subPath  rdfs:subClassOf
                                                               ] ;
                                                   sp:subject  [ sp:varName  "class" ]
                                                 ]
                                                 [ a            sp:Union ;
                                                   sp:elements  ( ( [ sp:object     [ sp:varName  "superClass" ] ;
                                                                      sp:predicate  rdfs:domain ;
                                                                      sp:subject    [ sp:varName  "property" ]
                                                                    ]
                                                                  ) ( [ sp:object     [ sp:varName  "property" ] ;
                                                                        sp:predicate  owl:onProperty ;
                                                                        sp:subject    [ sp:varName  "superClass" ]
                                                                      ]
                                                                    ) ( [ sp:object     [ sp:varName  "superClass" ] ;
                                                                          sp:predicate  rdf:first ;
                                                                          sp:subject    [ sp:varName  "listSegment" ]
                                                                        ]
                                                                        [ a           sp:TriplePath ;
                                                                          sp:object   [ sp:varName  "listSegment" ] ;
                                                                          sp:path     [ a           sp:ModPath ;
                                                                                        sp:modMax   -2 ;
                                                                                        sp:modMin   0 ;
                                                                                        sp:subPath  rdf:rest
                                                                                      ] ;
                                                                          sp:subject  [ sp:varName  "list" ]
                                                                        ]
                                                                        [ a           sp:TriplePath ;
                                                                          sp:object   [ sp:varName  "list" ] ;
                                                                          sp:path     [ a         sp:SeqPath ;
                                                                                        sp:path1  rdfs:domain ;
                                                                                        sp:path2  owl:unionOf
                                                                                      ] ;
                                                                          sp:subject  [ sp:varName  "property" ]
                                                                        ]
                                                                      ) )
                                                 ]
                                                 [ a           sp:TriplePath ;
                                                   sp:object   [ sp:varName  "property" ] ;
                                                   sp:path     [ a           sp:ModPath ;
                                                                 sp:modMax   -2 ;
                                                                 sp:modMin   0 ;
                                                                 sp:subPath  rdfs:subPropertyOf
                                                               ] ;
                                                   sp:subject  spin:_arg1
                                                 ]
                                                 [ a              sp:Filter ;
                                                   sp:expression  [ a        sp:or ;
                                                                    sp:arg1  [ a        sp:eq ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  [ sp:varName  "property" ]
                                                                             ] ;
                                                                    sp:arg2  [ a            sp:notExists ;
                                                                               sp:elements  ( [ sp:object     [ sp:varName  "anyDomain" ] ;
                                                                                                sp:predicate  rdfs:domain ;
                                                                                                sp:subject    spin:_arg1
                                                                                              ]
                                                                                            )
                                                                             ]
                                                                  ]
                                                 ]
                                                 [ a              sp:Filter ;
                                                   sp:expression  [ a        sp:isIRI ;
                                                                    sp:arg1  [ sp:varName  "class" ]
                                                                  ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The property." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  rdfs:Class .

sm:Modules  a             rdfs:Class ;
        rdfs:comment      "The abstract base class for the various types of SPARQLMotion data processing modules." ;
        rdfs:label        "Modules" ;
        rdfs:subClassOf   spin:Modules ;
        spin:abstract     true ;
        spin:constraint   [ a              spl:Argument ;
                            rdfs:comment   "Condition on output graph of this module." ;
                            spl:optional   true ;
                            spl:predicate  kbss-module:has-output-graph-constraint
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            rdfs:comment   "Indicates whether this module should be executed as target module in debug environment." ;
                            spl:optional   true ;
                            spl:predicate  kbss-module:has-target-module-flag ;
                            spl:valueType  xsd:boolean
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            rdfs:comment   "Condition on input graph of this module." ;
                            spl:optional   true ;
                            spl:predicate  kbss-module:has-input-graph-constraint
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            rdfs:comment   "Indicates whether this module should be in debug mode." ;
                            spl:optional   true ;
                            spl:predicate  kbss-module:has-debug-mode-flag ;
                            spl:valueType  xsd:boolean
                          ] ;
        spin:constructor  [ a  spl:ConstructDefaultValues ] .

spl:Test-object-labelOfArgument
        a                   spl:TestCase ;
        spl:testExpression  [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "value" ]
                                                  ) ;
                              sp:where            ( [ a                 sp:NamedGraph ;
                                                      sp:elements       ( [ a              sp:Bind ;
                                                                            sp:expression  [ a        spl:object ;
                                                                                             sp:arg1  spl:Argument ;
                                                                                             sp:arg2  rdfs:label
                                                                                           ] ;
                                                                            sp:variable    [ sp:varName  "value" ]
                                                                          ]
                                                                        ) ;
                                                      sp:graphNameNode  <http://spinrdf.org/spl>
                                                    ]
                                                  )
                            ] ;
        spl:testResult      "Argument" .

spif:buildStringFromRDFList
        a                spin:Function ;
        rdfs:comment     "Builds a string from the members of a given rdf:List (?arg1). The function iterates over all members of the list (which must be well-formed according to the RDF syntax rules). For each member, a string template (?arg2) is applied where the expression {?member} will be substituted with the current member. Optionally, a separator (?arg3) can be inserted between the list members in the result string, e.g. to insert a comma." ;
        rdfs:label       "build string from RDF list" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the separator to insert between each string" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the template string" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the head of the rdf:List to convert to string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:List
                         ] ;
        spin:returnType  xsd:string .

sp:isBlank  a            spin:Function ;
        rdfs:comment     "Checks whether a given node is a blank node." ;
        rdfs:label       "isBlank" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node being checked" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isBlank" .

kbss-module:has-input-graph-constraint
        a                   rdf:Property ;
        rdfs:label          "has input graph constraint" ;
        rdfs:subPropertyOf  spin:query .

sml:uri  a          rdf:Property ;
        rdfs:label  "uri" ;
        rdfs:range  xsd:string .

sp:values  a                rdf:Property ;
        rdfs:comment        "The VALUES block at the end of a query. The object may just be an untyped blank node, i.e. the sp:Values type triple is optional." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "values" ;
        rdfs:range          sp:Values ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:subject  a               rdf:Property ;
        rdfs:comment        "A resource or Variable describing the subject of a triple." ;
        rdfs:domain         sp:Tuple ;
        rdfs:label          "subject" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:TextProcessingModules
        a                sm:Module ;
        rdfs:label       "Text Processing" ;
        rdfs:subClassOf  sml:ProcessingModules ;
        spin:abstract    true .

sml:encoding  a     rdf:Property ;
        rdfs:label  "encoding" ;
        rdfs:range  xsd:string .

sml:newGraph  a     rdf:Property ;
        rdfs:label  "new graph" ;
        rdfs:range  spin:Modules .

sml:oldGraph  a     rdf:Property ;
        rdfs:label  "old graph" ;
        rdfs:range  spin:Modules .

sp:unaryPlus  a          spin:Function ;
        rdfs:comment     "Returns the operand ?arg1 with the sign unchanged. Semantically, this operation performs no operation." ;
        rdfs:label       "unary plus" ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "+" .

sp:sha1  a               spin:Function ;
        rdfs:comment     "Returns the SHA1 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case." ;
        rdfs:label       "sha1" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha1> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA1" .

sp:serviceURI  a            rdf:Property ;
        rdfs:comment        "Used by sp:Service to specify the URI of the SPARQL end point to invoke. Must point to a URI node." ;
        rdfs:domain         sp:Service ;
        rdfs:label          "service URI" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

<http://vfn.cz/ontologies/fss-form-generation-0.123>
        a            owl:Ontology ;
        owl:imports  <http://onto.fel.cvut.cz/ontologies/form-layout> , <http://onto.fel.cvut.cz/ontologies/lib/sm-module-adapter> , <http://onto.fel.cvut.cz/ontologies/vfn-form-mod> , <http://vfn.cz/ontologies/fss-form-static> .

spr:AggregatorResultFunctions
        a                spin:Function ;
        rdfs:label       "Aggregator result functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The end result after stepping through the values." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The total number of steps." ;
                           spl:predicate  sp:arg2
                         ] .

spr:ColWidthFunctions
        a                spin:Function ;
        rdfs:label       "Column width functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The table to get the column name for." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The column index, starting at zero." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] .

sp:query  a                 rdf:Property ;
        rdfs:comment        "Links a SubQuery resource with the nested Query." ;
        rdfs:domain         sp:SubQuery ;
        rdfs:label          "query" ;
        rdfs:range          sp:Query ;
        rdfs:subPropertyOf  sp:systemProperty .

kbss-module:deploy  a    sm:Module ;
        rdfs:label       "Deploy" ;
        rdfs:subClassOf  sm:kbss-adapter-module ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Replace context flag" ;
                           spl:predicate  km-sesame:p-is-replace ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Server URL" ;
                           spl:optional   false ;
                           spl:predicate  km-sesame:p-sesame-server-url
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Repository name" ;
                           spl:optional   false ;
                           spl:predicate  km-sesame:p-sesame-repository-name
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Context IRI" ;
                           spl:optional   false ;
                           spl:predicate  km-sesame:p-sesame-context-iri
                         ] .

spin:_arg2  a       sp:Variable ;
        sp:varName  "arg2" .

sp:notIn  a              spin:Function ;
        rdfs:comment     "Checks whether the value on the left (?arg1) is none of the values on the right (?arg2, ?arg3 ...)." ;
        rdfs:label       "NOT IN" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The value to find." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "NOT IN" .

sml:hidden  a       rdf:Property ;
        rdfs:label  "hidden" ;
        rdfs:range  xsd:boolean .

sp:subPath  a               rdf:Property ;
        rdfs:comment        "The child path of a property path expression. This is used by ReversePath and ModPath." ;
        rdfs:label          "sub path" ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Asc  a                rdfs:Class ;
        rdfs:comment     "Marker to indicate ascending order." ;
        rdfs:label       "Asc" ;
        rdfs:subClassOf  sp:OrderByCondition .

spl:OntologyFunctions
        a                spin:Function ;
        rdfs:comment     "A collection of functions performing ontology-related operations." ;
        rdfs:label       "Ontology functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spif:Test-parseDate-dd_MM_yyyy
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "dd/MM/yyyy" ;
                              sp:arg1      "13/2/2008"
                            ] ;
        spl:testResult      "2008-02-13"^^xsd:date .

sp:Drop  a               rdfs:Class ;
        rdfs:comment     "An Update operation that removes a specified graph from the Graph Store. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent." ;
        rdfs:label       "Drop" ;
        rdfs:subClassOf  sp:Update .

spl:testExpression  a       rdf:Property ;
        rdfs:label          "test expression" ;
        rdfs:subPropertyOf  sp:arg .

sp:Service  a            rdfs:Class ;
        rdfs:comment     "A SERVICE call that matches a nested sub-pattern against a SPARQL end point specified by a URI." ;
        rdfs:label       "Service" ;
        rdfs:subClassOf  sp:ElementGroup .

spl:predicate  a            rdf:Property ;
        rdfs:label          "predicate" ;
        rdfs:subPropertyOf  sp:arg .

sml:ImportXMLFromURL  a  sm:Module ;
        rdfs:comment     "Gets XML from a given URL and binds the resulting XML document to a specified output variable. Note that this could either be used to load static XML files from the web, or to call web services that return XML." ;
        rdfs:label       "Import XML from URL" ;
        rdfs:subClassOf  sml:ImportFromRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URL to the XML file. May contain variables such as {?varName}." ;
                           spl:predicate  sml:url
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The username if using BASIC authentication. If specified this module will attempt to make an HTTP basic auth call before pulling the XML from the source. Leave empty if calling a server without authentication." ;
                           spl:optional   true ;
                           spl:predicate  sml:userName ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The password if using BASIC authentication. If specified this module will attempt to make an HTTP basic auth call before pulling the XML from the source. Leave empty if calling a server without authentication." ;
                           spl:optional   true ;
                           spl:predicate  sml:password ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The output variable that will hold the loaded XML. Default: xml." ;
                           spl:defaultValue  "xml" ;
                           spl:predicate     sm:outputVariable
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "An (optional) indicator to ignore the XML document type.  This will allow for opening documents where the DTD or schema may not be available." ;
                           spl:defaultValue  false ;
                           spl:optional      true ;
                           spl:predicate     sml:ignoreDoctype ;
                           spl:valueType     xsd:boolean
                         ] .

spin:construct  a        spin:MagicProperty ;
        rdfs:comment     "Evaluates a given sp:Construct or SPIN template call (first argument on the left hand side) and binds the resulting triples to the variables on the right hand side.\n\nExample:\n\n    (?query \"this\" owl:Thing) spin:construct (?s ?p ?o)\n\nwill execute the sp:Construct ?query using the binding of owl:Thing to ?this. The resulting triples will be bound to ?s, ?p and ?o. If any of ?s ?p ?o are bound, it will only return the matching triples." ;
        rdfs:label       "construct" ;
        rdfs:subClassOf  spin:MagicProperties .

sp:ne   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 != ?arg2." ;
        rdfs:label       "ne" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "!=" .

sml:IterateOverSelect
        a                sm:Module ;
        rdfs:comment     "Repeats a given sub-script for each matching result set for the SPARQL Select query in the module's selectQuery property.\n\nThe start of the sub-script is specified by the body property. There can only be one body property that invokes a single sub-script.  The sub-script must have one target module -- that is, the sub-script cannot have multiple termination points.\n\nThe input RDF for each iteration is the same as the input of the iteration module itself. The result variables of the Select query will be bound inside the body in each iteration of the sub-script. Also, if the sml:IterateOverSelect module itself receives input variable bindings, and the value of these variables are changed inside the body sub-script (e.g. using sml:AppendText or sml:BindLiteralVariable), then the end value of each iteration will be used in the sub-script itself, and thus also passed into the next iteration's body. This allows scripts to incrementally modify variables.  The property sml:iterationVariable can be used to name a variable that will keep an iteration count.\n\nThe result of this module are the accumulated triples from the end node of the body sub-script. No internal variable bindings of the body will be used outside of the body, unless they have had values before (see above).\n\nIn many cases, a better alternative to creating \"loops\" is to use SPARQL directly, and embed some of the control logic into the WHERE clause, possibly through a CONSTRUCT or UPDATE query.\n\nIt is possible to run the iterations in separate threads, e.g. to reduce the amount of time spent waiting on external network resources. This mode, activated by setting sml:maxThreadCount > 2, has some limitations (see description of sml:maxThreadCount) and should be considered by experienced users only." ;
        rdfs:label       "Iterate over select" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "A SPARQL Select query that determines the variable bindings for the body in each iteration." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sml:selectQuery
                         ] ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The body of the iteration loop." ;
                           spl:maxCount   1 ;
                           spl:minCount   1 ;
                           spl:predicate  sm:body
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Can be used to have the engine execute multiple iterations in parallel threads. The values should be between 2 and a reasonable max value such as 10. If set > 1, the engine will spawn off a new thread for each iteration. Note that some features of SPARQLMotion may not be available in this mode, and that care should be taken when using this feature. In particular, sml:ImportCurrentRDF (when used from TBE) will not work." ;
                           spl:optional   true ;
                           spl:predicate  sml:maxThreadCount ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The name of a variable which will contain the iteration index in each loop, starting with 0." ;
                           spl:optional   true ;
                           spl:predicate  sml:iterationVariable ;
                           spl:valueType  xsd:string
                         ] .

spr:Product  a            spr:Aggregator ;
        rdfs:label        "Product" ;
        spr:startValue    "1"^^xsd:double ;
        spr:stepFunction  sp:mul .

spin:ConstraintViolation
        a                rdfs:Class ;
        rdfs:comment     "An object that can be created by spin:constraints to provide information about a constraint violation." ;
        rdfs:label       "Constraint violation" ;
        rdfs:subClassOf  rdfs:Resource .

sp:arg3  a                  rdf:Property ;
        rdfs:comment        "The third argument of a function call." ;
        rdfs:label          "arg3" ;
        rdfs:subPropertyOf  sp:arg .

arg:minCount  a             rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sml:needsTidy  a    rdf:Property ;
        rdfs:label  "needs tidy" .

spif:Test-parseDate-yyyyMMddhhmm
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "yyyyMMddhhmm" ;
                              sp:arg1      "200802131830"
                            ] ;
        spl:testResult      "2008-02-13T18:30:00"^^xsd:dateTime .

spl:SPINOverview  a         spin:SelectTemplate ;
        rdfs:comment        "Finds all constraints and rules attached to classes in the current graph, using spin:constraint, spin:constructor, spin:rule or their sub-properties. The result set will contain the associated class, the predicate, and the SPIN rule." ;
        rdfs:label          "SPIN Overview" ;
        rdfs:subClassOf     spin:SelectTemplates ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "class" ]
                                                    [ sp:varName  "property" ]
                                                    [ sp:varName  "rule" ]
                                                  ) ;
                              sp:where            ( ( [ a            sp:Union ;
                                                        sp:elements  ( ( [ a              sp:Bind ;
                                                                           sp:expression  spin:constraint ;
                                                                           sp:variable    [ sp:varName  "bp" ]
                                                                         ]
                                                                       ) ( [ a              sp:Bind ;
                                                                             sp:expression  spin:constructor ;
                                                                             sp:variable    [ sp:varName  "bp" ]
                                                                           ]
                                                                         ) ( [ a              sp:Bind ;
                                                                               sp:expression  spin:rule ;
                                                                               sp:variable    [ sp:varName  "bp" ]
                                                                             ]
                                                                           ) )
                                                      ]
                                                    )
                                                    [ a           sp:TriplePath ;
                                                      sp:object   [ sp:varName  "bp" ] ;
                                                      sp:path     [ a           sp:ModPath ;
                                                                    sp:modMax   -2 ;
                                                                    sp:modMin   0 ;
                                                                    sp:subPath  rdfs:subPropertyOf
                                                                  ] ;
                                                      sp:subject  [ sp:varName  "property" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "rule" ] ;
                                                      sp:predicate  [ sp:varName  "property" ] ;
                                                      sp:subject    [ sp:varName  "class" ]
                                                    ]
                                                    [ a              sp:Filter ;
                                                      sp:expression  [ a        sp:ne ;
                                                                       sp:arg1  [ sp:varName  "class" ] ;
                                                                       sp:arg2  spin:Modules
                                                                     ]
                                                    ]
                                                    [ a              sp:Filter ;
                                                      sp:expression  [ a            sp:notExists ;
                                                                       sp:elements  ( [ sp:object     spl:Argument ;
                                                                                        sp:predicate  rdf:type ;
                                                                                        sp:subject    [ sp:varName  "rule" ]
                                                                                      ]
                                                                                    )
                                                                     ]
                                                    ]
                                                    [ a              sp:Filter ;
                                                      sp:expression  [ a            sp:notExists ;
                                                                       sp:elements  ( [ sp:object     spl:Attribute ;
                                                                                        sp:predicate  rdf:type ;
                                                                                        sp:subject    [ sp:varName  "rule" ]
                                                                                      ]
                                                                                    )
                                                                     ]
                                                    ]
                                                  )
                            ] ;
        spin:labelTemplate  "SPIN Overview" .

sml:ReturnNode  a        sm:Module ;
        rdfs:comment     "Returns an RDF node as a result of a script. This module is typically used as exit point of a user-defined SPIN function and web service. The sm:returnModule of the function will point to this." ;
        rdfs:label       "Return node" ;
        rdfs:subClassOf  sml:ExportToRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the result, usually passed in from a previous module" ;
                           spl:predicate  sml:result
                         ] .

sml:schemaFilePath  a  rdf:Property ;
        rdfs:label  "schema file path" ;
        rdfs:range  xsd:string .

sp:ceil  a               spin:Function ;
        rdfs:comment     "Returns the smallest (closest to negative infinity) number with no fractional part that is not less than the value of arg. An error is raised if ?arg1 is not a numeric value." ;
        rdfs:label       "ceil" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-ceil> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The number to get the ceiling of." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "ceil" .

form-fss-gen-0.1:bind-sample-form-uri
        a                  sm:Modules , sml:BindWithConstant ;
        rdfs:label         "bind sample form uri" ;
        sm:next            <http://onto.fel.cvut.cz/ontologies/vfn-form-mod/deploy-sample-form> , form-fss-gen-0.1:bind-fss-sample-service-url ;
        sm:outputVariable  "studySampleFormUri" ;
        sml:value          "http://vfn.cz/ontologies/fss-form-sample" .

sm:body  a                  rdf:Property ;
        rdfs:comment        "Links an iterator modules with its body, i.e. the start of a module chain that is executed as part of the loop." ;
        rdfs:label          "body" ;
        rdfs:range          spin:Modules ;
        rdfs:subPropertyOf  sm:child .

sp:concat  a             spin:Function ;
        rdfs:comment     "The CONCAT built-in function. Creates a single string by concatenating all arguments from left to right. Note that if any one of the arguments is unbound (null) then the whole result string will be unbound." ;
        rdfs:label       "concat" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:returnType  xsd:string ;
        spin:symbol      "CONCAT" .

sml:addedPrefix  a  rdf:Property ;
        rdfs:label  "addedPrefix" ;
        rdfs:range  xsd:string .

sp:timezone  a           spin:Function ;
        rdfs:comment     "Returns the timezone part of ?arg1 as an xsd:dayTimeDuration. Raises an error if there is no timezone." ;
        rdfs:label       "timezone" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-timezone> ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input time." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:dateTime
                         ] ;
        spin:returnType  xsd:duration ;
        spin:symbol      "TIMEZONE" .

form-fss-gen-0.1:attach-possible-values-hook
        a                   sm:Modules , sml:ApplyConstruct ;
        rdfs:label          "Attach possible values hook" ;
        sm:next             <http://onto.fel.cvut.cz/ontologies/vfn-form-mod/form-generator-sink> ;
        sml:constructQuery  [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "downloadString" ] ;
                                                sp:predicate  form:has-possible-values-query ;
                                                sp:subject    [ sp:varName  "question" ]
                                              ]
                                            ) ;
                              sp:text       "CONSTRUCT {\n    ?question form:has-possible-values-query ?downloadString .\n#   ?question form-lt:has-layout-class \"type-ahead\" .\n}\nWHERE {\n    ?question a doc:question ;\n               form:has-question-origin ?questionOrigin .\n    BIND(CONCAT(str(?studyModelServiceUrl), \"&query=\") as ?dowloadPrefix)    \n    BIND(replace(?attributePossibleValuesQueryTemplate, \"XXX_QO\", str(?questionOrigin)) as ?downloadSuffixRaw)\n# N/A value\n    OPTIONAL {\n          ?question form:has-possible-na-value ?naValueUri .\n     }\n    BIND(COALESCE(str(?naValueUri), \"http://null\") as ?naValue)\n    BIND(replace(?downloadSuffixRaw, \"XXX_NAValue\", ?naValue) as ?downloadSuffixRaw1)\n# None value\n     OPTIONAL {\n          ?question form:has-possible-none-value ?noneValueUri .\n     }\n    BIND(COALESCE(str(?noneValueUri), \"http://null\") as ?noneValue)\n    BIND(replace(?downloadSuffixRaw1, \"XXX_NoneValue\", ?noneValue) as ?downloadSuffixRaw2)\n    BIND(ENCODE_FOR_URI(?downloadSuffixRaw2) as ?downloadSuffix)\n    BIND(concat(?dowloadPrefix, ?downloadSuffix) as ?downloadString)\n}" ;
                              sp:where      ( [ sp:object     doc:question ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    [ sp:varName  "question" ]
                                              ]
                                              [ sp:object     [ sp:varName  "questionOrigin" ] ;
                                                sp:predicate  form:has-question-origin ;
                                                sp:subject    [ sp:varName  "question" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ a        sp:str ;
                                                                            sp:arg1  [ sp:varName  "studyModelServiceUrl" ]
                                                                          ] ;
                                                                 sp:arg2  "&query="
                                                               ] ;
                                                sp:variable    [ sp:varName  "dowloadPrefix" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:replace ;
                                                                 sp:arg1  [ sp:varName  "attributePossibleValuesQueryTemplate" ] ;
                                                                 sp:arg2  "XXX_QO" ;
                                                                 sp:arg3  [ a        sp:str ;
                                                                            sp:arg1  [ sp:varName  "questionOrigin" ]
                                                                          ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "downloadSuffixRaw" ]
                                              ]
                                              [ a            sp:Optional ;
                                                sp:elements  ( [ sp:object     [ sp:varName  "naValueUri" ] ;
                                                                 sp:predicate  form:has-possible-na-value ;
                                                                 sp:subject    [ sp:varName  "question" ]
                                                               ]
                                                             )
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:coalesce ;
                                                                 sp:arg1  [ a        sp:str ;
                                                                            sp:arg1  [ sp:varName  "naValueUri" ]
                                                                          ] ;
                                                                 sp:arg2  "http://null"
                                                               ] ;
                                                sp:variable    [ sp:varName  "naValue" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:replace ;
                                                                 sp:arg1  [ sp:varName  "downloadSuffixRaw" ] ;
                                                                 sp:arg2  "XXX_NAValue" ;
                                                                 sp:arg3  [ sp:varName  "naValue" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "downloadSuffixRaw1" ]
                                              ]
                                              [ a            sp:Optional ;
                                                sp:elements  ( [ sp:object     [ sp:varName  "noneValueUri" ] ;
                                                                 sp:predicate  form:has-possible-none-value ;
                                                                 sp:subject    [ sp:varName  "question" ]
                                                               ]
                                                             )
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:coalesce ;
                                                                 sp:arg1  [ a        sp:str ;
                                                                            sp:arg1  [ sp:varName  "noneValueUri" ]
                                                                          ] ;
                                                                 sp:arg2  "http://null"
                                                               ] ;
                                                sp:variable    [ sp:varName  "noneValue" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:replace ;
                                                                 sp:arg1  [ sp:varName  "downloadSuffixRaw1" ] ;
                                                                 sp:arg2  "XXX_NoneValue" ;
                                                                 sp:arg3  [ sp:varName  "noneValue" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "downloadSuffixRaw2" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:encode_for_uri ;
                                                                 sp:arg1  [ sp:varName  "downloadSuffixRaw2" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "downloadSuffix" ]
                                              ]
                                              [ a              sp:Bind ;
                                                sp:expression  [ a        sp:concat ;
                                                                 sp:arg1  [ sp:varName  "dowloadPrefix" ] ;
                                                                 sp:arg2  [ sp:varName  "downloadSuffix" ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "downloadString" ]
                                              ]
                                            )
                            ] ;
        sml:replace         false .

sml:loadBodies  a   rdf:Property ;
        rdfs:label  "loadBodies" ;
        rdfs:range  xsd:boolean .

sml:Turtle  a       sml:RDFSerialization ;
        rdfs:label  "Turtle" .

sp:groupBy  a               rdf:Property ;
        rdfs:comment        "Points from a Query to the list of GROUP BY expressions." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "group by" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

spr:ColCountFunctions
        a                spin:Function ;
        rdfs:label       "Column count functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The table to get the number of columns of." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:TableClass
                         ] .

sml:ImportFromRemoteModules
        a                sm:Module ;
        rdfs:label       "Import from Remote" ;
        rdfs:subClassOf  sml:ImportModules ;
        spin:abstract    true .

sp:GroupConcat  a        rdfs:Class ;
        rdfs:comment     "Represents GROUP_CONCAT aggregations." ;
        rdfs:label       "GROUP_CONCAT" ;
        rdfs:subClassOf  sp:Aggregation .

spif:Test-parseDate-dd.MM.yyyy
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "dd.MM.yyyy" ;
                              sp:arg1      "13.02.2008"
                            ] ;
        spl:testResult      "2008-02-13"^^xsd:date .

sml:flatten  a      rdf:Property ;
        rdfs:label  "flatten" .

arg:min  a                  rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

spr:aggregateCol  a      spin:Function ;
        rdfs:comment     "Applies the spr:Aggregator ?arg1 to all rows of column ?arg3 of spr:Table ?arg2." ;
        rdfs:label       "aggregate row" ;
        rdfs:subClassOf  spr:AggregatorFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "stepFunction" ] ;
                                                   sp:predicate  spr:stepFunction ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "startValue" ] ;
                                                   sp:predicate  spr:startValue ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ a            sp:Optional ;
                                                   sp:elements  ( [ sp:object     [ sp:varName  "resultFunction" ] ;
                                                                    sp:predicate  spr:resultFunction ;
                                                                    sp:subject    spin:_arg1
                                                                  ]
                                                                )
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spr:rowCount ;
                                                                    sp:arg1  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "rowCount" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spr:visitCol ;
                                                                    sp:arg1  spin:_arg2 ;
                                                                    sp:arg2  spin:_arg3 ;
                                                                    sp:arg3  0 ;
                                                                    sp:arg4  [ a        sp:sub ;
                                                                               sp:arg1  [ sp:varName  "rowCount" ] ;
                                                                               sp:arg2  1
                                                                             ] ;
                                                                    sp:arg5  [ sp:varName  "stepFunction" ] ;
                                                                    sp:arg6  [ sp:varName  "startValue" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "stepped" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:bound ;
                                                                               sp:arg1  [ sp:varName  "resultFunction" ]
                                                                             ] ;
                                                                    sp:arg2  [ a        spif:invoke ;
                                                                               sp:arg1  [ sp:varName  "resultFunction" ] ;
                                                                               sp:arg2  [ sp:varName  "stepped" ] ;
                                                                               sp:arg3  [ sp:varName  "rowCount" ]
                                                                             ] ;
                                                                    sp:arg3  [ sp:varName  "stepped" ]
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The column index." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] .

sp:from  a                  rdf:Property ;
        rdfs:comment        "Specifies an RDF Dataset used by a Query (FROM syntax in SPARQL). Values of this property must be URI resources." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "from" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sm:JSON  a          sm:ValueType ;
        rdfs:label  "JSON" .

sml:cached  a       rdf:Property ;
        rdfs:label  "cached" ;
        rdfs:range  xsd:boolean .

sml:ValidateXMLAgainstXSD
        a                sm:Module ;
        rdfs:comment     "Validates an existing XML document against a given XML Schema. The XML Schema must be present in the workspace. The output of this module is a new graph containing instances of sxml:XSDValidationError or sxml:XSDValidationWarning. The rdfs:labels of those will contain more information on the error." ;
        rdfs:label       "Validate XML against XSD" ;
        rdfs:subClassOf  sml:XMLProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The XML document that shall be validated. If this is represented as a string, then the errors will contain line numbers. Note that the output of modules such as sml:ImportXMLFromFile is not a string but an XML DOM, producing no line numbers." ;
                           spl:predicate  sml:xml
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to an XSD file. The path can be relative to the current script's folder (e.g., myFolder/test.xsd) or absolute to the workspace root /myProject/myFolder/test.xsd." ;
                           spl:predicate  sml:schemaFilePath ;
                           spl:valueType  xsd:string
                         ] .

spr:colIndices  a           spin:MagicProperty ;
        rdfs:comment        "Iterates over all columns of a given table (left side, ?arg1) and binds the variable on the right with the index of the columns." ;
        rdfs:label          "row indices" ;
        rdfs:subClassOf     spr:MagicProperties ;
        rdfs:subPropertyOf  spr:systemProperty ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "index" ]
                                                  ) ;
                              sp:where            ( [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:sub ;
                                                                       sp:arg1  [ a        spr:colCount ;
                                                                                  sp:arg1  spin:_arg1
                                                                                ] ;
                                                                       sp:arg2  1
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "lastIndex" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "?0" ] ;
                                                      sp:predicate  <http://www.topbraid.org/tops#for> ;
                                                      sp:subject    [ sp:varName  "index" ]
                                                    ]
                                                    [ sp:object     0 ;
                                                      sp:predicate  rdf:first ;
                                                      sp:subject    [ sp:varName  "?0" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "?1" ] ;
                                                      sp:predicate  rdf:rest ;
                                                      sp:subject    [ sp:varName  "?0" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "lastIndex" ] ;
                                                      sp:predicate  rdf:first ;
                                                      sp:subject    [ sp:varName  "?1" ]
                                                    ]
                                                    [ sp:object     () ;
                                                      sp:predicate  rdf:rest ;
                                                      sp:subject    [ sp:varName  "?1" ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The spr:Table to get the row indexes of." ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  spr:Table
                            ] .

sp:eq   a                spin:Function ;
        rdfs:comment     "Returns true if both arguments are equal." ;
        rdfs:label       "eq" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first value to compare" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second value to compare" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "=" .

sml:separator  a    rdf:Property ;
        rdfs:label  "separator" ;
        rdfs:range  xsd:string .

spin:constraint  a          rdf:Property ;
        rdfs:comment        "Links a class with constraints on its instances. The values of this property are \"axioms\" expressed as CONSTRUCT or ASK queries where the variable ?this refers to the instances of the surrounding class. ASK queries must evaluate to false for each member of this class - returning true means that the instance ?this violates the constraint. CONSTRUCT queries must create instances of spin:ConstraintViolation to provide details on the reason for the violation." ;
        rdfs:domain         rdfs:Class ;
        rdfs:label          "constraint" ;
        rdfs:subPropertyOf  spin:query .

spin:returnType  a          rdf:Property ;
        rdfs:comment        "The return type of a Function, e.g. xsd:string." ;
        rdfs:domain         spin:Function ;
        rdfs:label          "return type" ;
        rdfs:range          rdfs:Class ;
        rdfs:subPropertyOf  spin:systemProperty .

spl:defaultValue  a         rdf:Property ;
        rdfs:label          "default value" ;
        rdfs:subPropertyOf  sp:arg .

sp:in   a                spin:Function ;
        rdfs:comment     "Checks whether the value on the left (?arg1) is one of the values on the right (?arg2, ?arg3 ...)." ;
        rdfs:label       "IN" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The value to find." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "IN" .

spin:TableDataProvider
        a                rdfs:Class ;
        rdfs:comment     "An abstraction of objects that can produce tabular data. This serves as a base class of spin:SelectTemplate, because SELECT queries can produce tables with columns for each result variable. However, other types of TableDataProviders are conceivable by other frameworks, and this class may prove as a useful shared foundation.\n\nTableDataProviders can link to definitions of columns via spin:column, and these definitions can inform rendering engines." ;
        rdfs:label       "Table data provider" ;
        rdfs:subClassOf  rdfs:Class .

sp:Count  a              rdfs:Class ;
        rdfs:comment     "Counts the number of times a variable is used. The variable is stored in the variable property. This might be left blank to indicate COUNT(*)." ;
        rdfs:label       "COUNT" ;
        rdfs:subClassOf  sp:Aggregation .

sp:struuid  a            spin:Function ;
        rdfs:comment     "Returns a string that is the scheme specific part of UUID. That is, as a simple literal, the result of generating a UUID, converting to a simple literal and removing the initial urn:uuid:." ;
        rdfs:label       "struuid" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:returnType  xsd:string ;
        spin:symbol      "STRUUID" .

spr:Sum  a                spr:Aggregator ;
        rdfs:label        "Sum" ;
        spr:startValue    "0"^^xsd:double ;
        spr:stepFunction  sp:add .

sp:seconds  a            spin:Function ;
        rdfs:comment     "Extracts the seconds from a date/time literal." ;
        rdfs:label       "seconds" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The dateTime or time argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "seconds" .

sp:modMin  a                rdf:Property ;
        rdfs:domain         sp:ModPath ;
        rdfs:label          "mod min" ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  sp:systemProperty .

spin:Rule  a             rdfs:Class ;
        rdfs:comment     "Groups together the kinds of SPARQL commands that can appear as SPIN rules and constructors: CONSTRUCT, DELETE WHERE and DELETE/INSERT. This class is never to be instantiated directly." ;
        rdfs:label       "Rule" ;
        rdfs:subClassOf  sp:Command .

sml:view  a         rdf:Property ;
        rdfs:label  "view" .

sp:Triple  a             rdfs:Class ;
        rdfs:comment     "A base class for TriplePattern and TripleTemplate. This basically specifies that subject, predicate and object must be present." ;
        rdfs:label       "Triple" ;
        rdfs:subClassOf  sp:Tuple .

kbss-module:form-generator
        a                sm:Module ;
        rdfs:label       "Form generator" ;
        rdfs:subClassOf  sm:kbss-adapter-module .

sml:iterationVariable
        a             rdf:Property ;
        rdfs:comment  "The name of a variable that shall contain the iteration index in a loop, starting at zero." ;
        rdfs:label    "iteration variable" ;
        rdfs:range    xsd:string .

sp:_defaultValue  a  sp:Variable ;
        sp:varName  "defaultValue" .

sml:RDFSerialization  a  rdfs:Class ;
        rdfs:comment     "The various serialization formats of RDF/OWL files, including RDF/XML and Turtle." ;
        rdfs:label       "RDF Serialization" ;
        rdfs:subClassOf  sm:ValueType .

sp:using  a                 rdf:Property ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "using" ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

spl:Test-instanceOf-rdfsLiteral
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test" ;
                              sp:arg2  rdfs:Literal
                            ] ;
        spl:testResult      true .

spl:BooleanFunctions  a  spin:Function ;
        rdfs:comment     "A collection of functions that return a boolean value (true or false)." ;
        rdfs:label       "Boolean functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spif:Test-parseDate-MMMMMMMMM_dd__yyyy
        a                   spl:TestCase ;
        spl:testExpression  [ a            spif:parseDate ;
                              arg:pattern  "MMMMMMMMM dd, yyyy" ;
                              sp:arg1      "February 13, 2008"
                            ] ;
        spl:testResult      "2008-02-13"^^xsd:date .

spif:generateUUID  a     spin:Function ;
        rdfs:comment     "Generates a new unique ID as a string literal. This is often useful for creating \"random\" URIs and other identifiers." ;
        rdfs:label       "generate UUID" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:returnType  xsd:string .

sml:title  a        rdf:Property ;
        rdfs:label  "title" ;
        rdfs:range  xsd:string .

sml:userName  a     rdf:Property ;
        rdfs:label  "userName" ;
        rdfs:range  xsd:string .

sml:replace  a        rdf:Property ;
        rdfs:comment  "Specifies whether a module shall overwrite all triples from its predecessors. If set to true (default is false), then the triples from the predecessors shall not be passed through." ;
        rdfs:label    "replace" ;
        rdfs:range    xsd:boolean .

sp:DeleteWhere  a        rdfs:Class ;
        rdfs:comment     "An Update operation where the triples matched by the WHERE clause (sp:where) will be the triples deleted." ;
        rdfs:label       "Delete where" ;
        rdfs:subClassOf  spin:Rule , sp:Update .

spin:columnWidth  a         rdf:Property ;
        rdfs:comment        "The preferred width of the associated Column, for display purposes. Values in pixels (rendering engines may multiply the values depending on resolution)." ;
        rdfs:domain         spin:Column ;
        rdfs:label          "column width" ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  spin:systemProperty .

sml:CreateSpreadsheet
        a                sm:Module ;
        rdfs:comment     "Creates a spreadsheet text from all bindings of a SPARQL SELECT query. The resulting text will be bound to a variable and can then be saved to a file or further processed." ;
        rdfs:label       "Create spreadsheet" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The SPARQL Select query that delivers the rows of the spreadsheet. The columns will be the result variables of the query." ;
                           spl:predicate  sml:selectQuery ;
                           spl:valueType  sp:Select
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The separator between each column. Default is the tab character, but a typical alternative is \",\"." ;
                           spl:optional   true ;
                           spl:predicate  sml:separator ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the variable that will hold the resulting spreadsheet string. Default: text." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable
                         ] .

sml:ResetSPINCaches  a   sm:Module ;
        rdfs:comment     "Clears any cached results from SPIN functions marked as spin:cachable. This can be used to reset the cache after \"background data\" has been changed by a script. If such updates only happen periodically, spin:cachable can improve overall performance." ;
        rdfs:label       "Reset SPIN caches" ;
        rdfs:subClassOf  sml:ControlFlowModules .

sp:strafter  a           spin:Function ;
        rdfs:comment     "Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that proceeds in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string." ;
        rdfs:label       "strafter" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strafter> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The pattern to find within the input string." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "STRAFTER" .

spif:cast  a             spin:Function ;
        rdfs:comment     "Creates a new literal from an existing literal, but with a different datatype. This can, for example, be used to convert between floating point values and int values." ;
        rdfs:label       "cast" ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The target datatype, e.g. xsd:integer. Leave blank for untyped literals." ;
                           spl:optional   true ;
                           spl:predicate  arg:datatype ;
                           spl:valueType  rdfs:Datatype
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the \"old\" literal that shall be converted" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal .

spin:MagicProperties  a     spin:MagicProperty ;
        rdfs:comment        "An abstract superclass that can be used to group all spin:MagicProperty instances under a single parent class." ;
        rdfs:label          "Magic properties" ;
        rdfs:subClassOf     spin:Functions ;
        rdfs:subPropertyOf  spin:systemProperty ;
        spin:abstract       true .

sml:ImportFromVariousModules
        a                sm:Module ;
        rdfs:label       "Import from Various" ;
        rdfs:subClassOf  sml:ImportModules ;
        spin:abstract    true .

sml:jmsConnectionFactory
        a       rdf:Property .

sp:deletePattern  a         rdf:Property ;
        rdfs:comment        "Points to a list of sp:TripleTemplates and sp:NamedGraphs in a modify operation." ;
        rdfs:domain         sp:Update ;
        rdfs:label          "delete pattern" ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:result  a       rdf:Property ;
        rdfs:label  "result" .

spin:Modules  a           rdfs:Class ;
        rdfs:comment      "An \"artificial\" parent class for all Functions and Templates." ;
        rdfs:label        "Modules" ;
        rdfs:subClassOf   rdfs:Resource ;
        spin:constructor  [ a  spl:ConstructDefaultValues ] .

sml:targetFilePath  a  rdf:Property ;
        rdfs:label  "targetFilePath" ;
        rdfs:range  xsd:string .

sp:tz   a                spin:Function ;
        rdfs:comment     "Returns the timezone part of ?arg1 as a simple literal. Returns the empty string if there is no timezone." ;
        rdfs:label       "tz" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-tz> ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:symbol      "TZ" .

sml:rowQuery  a             rdf:Property ;
        rdfs:label          "rowQuery" ;
        rdfs:range          sp:Select ;
        rdfs:subPropertyOf  spin:query .

sm:Function  a           rdfs:Class ;
        rdfs:comment     "A SPIN Function backed by a SPARQLMotion script. When the function is called, the body script will be executed. Can also be called as web service using a SM servlet container such as the TopBraid Live.\n\nThere are two ways of defining the body script:\n- sm:bodyScript for linear scripts (and XML Syntax)\n- sm:returnModule for any other style (and graphical notation)" ;
        rdfs:label       "Function" ;
        rdfs:subClassOf  spin:Function .

spr:hasCell  a           spin:Function ;
        rdfs:comment     "Checks if there is a cell value in a given Table (?arg1) at a given row (?arg2) and column (?arg3)." ;
        rdfs:label       "hasCell" ;
        rdfs:subClassOf  spr:CellFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                         sp:predicate  rdf:type ;
                                         sp:subject    spin:_arg1
                                       ]
                                       [ sp:object     [ sp:varName  "function" ] ;
                                         sp:predicate  spr:cellFunction ;
                                         sp:subject    [ sp:varName  "tableClass" ]
                                       ]
                                       [ a              sp:Bind ;
                                         sp:expression  [ a        spif:invoke ;
                                                          sp:arg1  [ sp:varName  "function" ] ;
                                                          sp:arg2  spin:_arg1 ;
                                                          sp:arg3  spin:_arg2 ;
                                                          sp:arg4  spin:_arg3
                                                        ] ;
                                         sp:variable    [ sp:varName  "result" ]
                                       ]
                                       [ a              sp:Filter ;
                                         sp:expression  [ a        sp:bound ;
                                                          sp:arg1  [ sp:varName  "result" ]
                                                        ]
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The spr:Table to get the cell value of." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The row index, starting at 0." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The column index, starting at 0." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:returnType  xsd:boolean .

sml:BindWithConstant  a  sm:Module ;
	    sm:icon	         "bath" ;
        rdfs:comment     "Binds a variable with a given RDF node." ;
        rdfs:label       "Bind with constant" ;
        rdfs:subClassOf  sml:ControlFlowModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The constant value (either a resource or a literal)." ;
                           spl:predicate  sml:value
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the variable that will hold the constant. Default: text." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable
                         ] .

sml:ExportToTextFile  a  sm:Module ;
        sm:icon	         "free-code-camp" ;
        rdfs:comment     "Saves text to a file. The text must be the value of the specified input variable." ;
        rdfs:label       "Export to text file" ;
        rdfs:subClassOf  sml:ExportToLocalModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The text that shall be written into the file." ;
                           spl:predicate  sml:text
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to the file that shall be created. The path can be relative to the current script's folder (e.g., myFolder/test.txt) or absolute to the workspace root /myProject/myFolder/test.txt." ;
                           spl:predicate  sml:targetFilePath
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Specifies whether this will overwrite a file with the same name (true) or whether it will append to an existing file (false)." ;
                           spl:optional   true ;
                           spl:predicate  sml:replace ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The file encoding such as UTF-8. If left blank, then the platform's default encoding will be used." ;
                           spl:optional   true ;
                           spl:predicate  sml:encoding ;
                           spl:valueType  xsd:string
                         ] .

spr:rowCells  a             spin:MagicProperty ;
        rdfs:comment        "Iterates over all colums of a given table (left side, ?arg1) at row ?arg2 and binds the variable on the right with the cell values. The second variable on the right may be bound to the column index as well." ;
        rdfs:label          "row cells" ;
        rdfs:subClassOf     spr:MagicProperties ;
        rdfs:subPropertyOf  spr:systemProperty ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "value" ]
                                                    [ sp:varName  "col" ]
                                                  ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "col" ] ;
                                                      sp:predicate  spr:colIndices ;
                                                      sp:subject    spin:_arg1
                                                    ]
                                                    [ a              sp:Bind ;
                                                      sp:expression  [ a        spr:cell ;
                                                                       sp:arg1  spin:_arg1 ;
                                                                       sp:arg2  spin:_arg2 ;
                                                                       sp:arg3  [ sp:varName  "col" ]
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "value" ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The spr:Table to get the values for." ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  spr:Table
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The row index, starting at zero." ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  xsd:integer
                            ] .

spl:valueType  a            rdf:Property ;
        rdfs:label          "value type" ;
        rdfs:subPropertyOf  sp:arg .

sp:Query  a              rdfs:Class ;
        rdfs:comment     "Abstract base class of the various types of supported queries. Common to all types of queries is that they can have a body (\"WHERE clause\")." ;
        rdfs:label       "Query" ;
        rdfs:subClassOf  sp:Command .

spin:command  a       rdf:Property ;
        rdfs:comment  "Can be used to link a resource with a SPARQL query or update request (sp:Command)." ;
        rdfs:label    "command" ;
        rdfs:range    sp:Command .

sml:useVerbatim  a  rdf:Property ;
        rdfs:label  "useVerbatim" ;
        rdfs:range  xsd:boolean .

sp:path2  a                 rdf:Property ;
        rdfs:comment        "The second child path of a property path. Used by sp:AltPath and sp:SeqPath." ;
        rdfs:label          "path2" ;
        rdfs:range          sp:Path ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:sha384  a             spin:Function ;
        rdfs:comment     "Returns the SHA384 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case." ;
        rdfs:label       "sha384" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha384> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA384" .

sml:url  a          rdf:Property ;
        rdfs:label  "url" ;
        rdfs:range  xsd:string .

sp:variable  a              rdf:Property ;
        rdfs:comment        "The variable of a Bind element." ;
        rdfs:domain         sp:Bind ;
        rdfs:label          "variable" ;
        rdfs:range          sp:Variable ;
        rdfs:subPropertyOf  sp:systemProperty .

sml:ignoreImports  a  rdf:Property ;
        rdfs:label  "ignore imports" ;
        rdfs:range  xsd:boolean .

spl:Test-instanceOf-typedString-false
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test" ;
                              sp:arg2  xsd:integer
                            ] ;
        spl:testResult      false .

spl:URIFunctions  a      spin:Function ;
        rdfs:comment     "A collection of functions that create URI resources." ;
        rdfs:label       "URI functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:Values  a             rdfs:Class ;
        rdfs:comment     "A VALUES element. sp:varNames points to an rdf:List of strings for the variables, sp:values to an rdf:List of rdf:Lists with nodes for each variable, in the order defined by the variables list." ;
        rdfs:label       "Values" ;
        rdfs:subClassOf  sp:Element .

sp:Ask  a                rdfs:Class ;
        rdfs:comment     "An ASK query that returns true if the condition in the body is met by at least one result set." ;
        rdfs:label       "Ask" ;
        rdfs:subClassOf  sp:Query .

sml:ApplyTopSPIN  a      sm:Module ;
        sm:icon	         "birthday-cake" ;
        rdfs:comment     "Applies the TopSPIN rules inference engine on the input graph. This assumes that the input graph contains one or more SPIN rules (stored using the property specified under sml:predicate, which defaults to spin:rule)." ;
        rdfs:label       "Apply TopSPIN" ;
        rdfs:subClassOf  sml:RDFProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Specifies whether only a single pass over all rules shall be made. By default (false), TopSPIN will iterate until no further inferences have been made." ;
                           spl:optional   true ;
                           spl:predicate  sml:singlePass ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Specifies whether the resulting inferred triples shall replace the input. If false, the union of inferred triples and old triples are returned. Note that this flag is not supported if sml:flatten = true." ;
                           spl:optional   true ;
                           spl:predicate  sml:replace ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "If set to true, the engine will copy all input triples into a single in-memory graph, and then operate on that (faster) graph. In some cases, this option has improved performance by a factor of 8. Note that this option may not make sense if one of the input graphs is a (large) database. Setting this option to true will also lead to ignore the value of sml:replace, and only the flattened graph will be forwarded into the next steps of the script (i.e. sml:replace=true)." ;
                           spl:optional   true ;
                           spl:predicate  sml:flatten ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The predicate to get the rules from. Usually spin:rule, but can be any SPIN property (subPropertyOf spin:query)" ;
                           spl:defaultValue  spin:rule ;
                           spl:optional      true ;
                           spl:predicate     sml:predicate ;
                           spl:valueType     rdf:Property
                         ] .

spr:ColTypeFunctions  a  spin:Function ;
        rdfs:label       "Column type functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The table to get the column name for." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  spr:Table
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The column index, starting at zero." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] .

spin:_arg5  a       sp:Variable ;
        sp:varName  "arg5" .

spin:ConstructTemplate
        a                rdfs:Class ;
        rdfs:label       "Construct template" ;
        rdfs:subClassOf  spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The CONSTRUCT query wrapped by this template." ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Construct
                         ] .

sml:serialization  a  rdf:Property ;
        rdfs:label  "serialization" ;
        rdfs:range  sml:RDFSerialization .

sml:XMLProcessingModules
        a                sm:Module ;
        sm:icon	         "hard-of-hearing" ;
        rdfs:label       "XML Processing" ;
        rdfs:subClassOf  sml:ProcessingModules ;
        spin:abstract    true .

spin:thisUnbound  a         rdf:Property ;
        rdfs:comment        "Can be set to true for SPIN rules and constraints that do not require pre-binding the variable ?this with all members of the associated class. This flag should only be set to true if the WHERE clause is sufficiently strong to only bind instances of the associated class, or its subclasses. In those cases, the engine can greatly improve performance of query execution, because it does not need to add clauses to narrow down the WHERE clause." ;
        rdfs:domain         sp:Construct ;
        rdfs:label          "this unbound" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

spl:MathematicalFunctions
        a                spin:Function ;
        rdfs:comment     "A collection of functions operating on numbers." ;
        rdfs:label       "Mathematical functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:Minus  a              rdfs:Class ;
        rdfs:comment     "A MINUS element group." ;
        rdfs:label       "Minus" ;
        rdfs:subClassOf  sp:ElementGroup .

sml:ExportToXMLFile  a   sm:Module ;
        sm:icon	         "free-code-camp" ;
        rdfs:comment     "Creates an XML file from the value of the input variable." ;
        rdfs:label       "Export to XML file" ;
        rdfs:subClassOf  sml:ExportToLocalModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The XML document that shall be written to the file." ;
                           spl:predicate  sml:xml
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to the output file. The path can be relative to the current script's folder (e.g., myFolder/test.xml) or absolute to the workspace root /myProject/myFolder/test.xml." ;
                           spl:predicate  sml:targetFilePath
                         ] .

spl:hasArgument  a       spin:Function ;
        rdfs:comment     "Checks if a given module class (?module) has at least one declared spl:Argument." ;
        rdfs:label       "has argument" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   [ sp:varName  "superClass" ] ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subClassOf
                                                     ] ;
                                         sp:subject  [ sp:varName  "class" ]
                                       ]
                                       [ sp:object     [ sp:varName  "con" ] ;
                                         sp:predicate  spin:constraint ;
                                         sp:subject    [ sp:varName  "superClass" ]
                                       ]
                                       [ sp:object     spl:Argument ;
                                         sp:predicate  rdf:type ;
                                         sp:subject    [ sp:varName  "con" ]
                                       ]
                                     )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The module class to check." ;
                           spl:predicate  spl:class ;
                           spl:valueType  spin:Module
                         ] ;
        spin:returnType  xsd:boolean .

kbss-module:void  a      sm:Module ;
        rdfs:label       "VOID" ;
        rdfs:subClassOf  sm:kbss-adapter-module .

sp:day  a                spin:Function ;
        rdfs:comment     "Extracts the day from a date/time literal." ;
        rdfs:label       "day" ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The date or dateTime argument." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "day" .

kbss-module:has-debug-mode-flag
        a                   rdf:Property ;
        rdfs:label          "has debug mode flag" ;
        rdfs:subPropertyOf  spin:query .

spr:AggregatorStepFunctions
        a                spin:Function ;
        rdfs:label       "Aggregator step functions" ;
        rdfs:subClassOf  spr:Functions ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The old value to start with, e.g. 0 for SUM." ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The current cell value that shall be aggregated on top of ?arg1." ;
                           spl:predicate  sp:arg2
                         ] .

sp:strlen  a             spin:Function ;
        rdfs:comment     "Computes the length of a given input string." ;
        rdfs:label       "strlen" ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strlen> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "STRLEN" .

spin:violationLevel  a      rdf:Property ;
        rdfs:comment        "An optional attribute of ConstraintViolations to point at a violation level (such as Error and Warning). Defaults to spin:Error." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation level" ;
        rdfs:range          spin:ConstraintViolationLevel ;
        rdfs:subPropertyOf  spin:systemProperty .

sp:isLiteral  a          spin:Function ;
        rdfs:comment     "Checks whether a given node is a literal." ;
        rdfs:label       "isLiteral" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node being tested" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isLiteral" .

spl:DateFunctions  a     spin:Function ;
        rdfs:comment     "A collection of functions that operate on date/time literals." ;
        rdfs:label       "Date functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:Aggregation  a        rdfs:Class ;
        rdfs:comment     "Base class of aggregation types (not part of the SPARQL 1.0 standard but supported by ARQ and other engines)." ;
        rdfs:label       "Aggregation" ;
        rdfs:subClassOf  sp:SystemClass .

sml:updateQuery  a    rdf:Property ;
        rdfs:comment  "A SPARQL UPDATE query (can be used to insert or delete triples from a graph)." ;
        rdfs:label    "update query" ;
        rdfs:range    sp:Update .

sml:RDFXMLAbbrev  a  sml:RDFSerialization ;
        rdfs:label  "RDF/XML-ABBREV" .

kbss-module:tarql  a     sm:Module ;
        rdfs:comment     "Runs one or more TARQL Construct queries on the input triples. The output RDF will consist of the constructed triples and (unless sml:replace is true) the input triples." ;
        rdfs:label       "TARQL" ;
        rdfs:subClassOf  sm:kbss-adapter-module ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The TARQL Construct queries that deliver the triples that shall be added." ;
                           spl:minCount   1 ;
                           spl:predicate  sml:constructQuery
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Source CSV file." ;
                           spl:predicate  sml:sourceFilePath
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "If set to true, the output triples will only contain the constructed triples. If no values or false are specified, the output will be the union of the input triples and the constructed triples." ;
                           spl:optional   true ;
                           spl:predicate  sml:replace
                         ] .

spl:testResult  a           rdf:Property ;
        rdfs:label          "testResult" ;
        rdfs:subPropertyOf  sp:arg .

sml:ImportTextFromURL
        a                sm:Module ;
        rdfs:comment     "Imports a text stream from a URL and writes the result string into a given output variable. Among others, this module can be used to read JSON from REST-based web services." ;
        rdfs:label       "Import text from URL" ;
        rdfs:subClassOf  sml:ImportFromRemoteModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The URL to load from." ;
                           spl:predicate  sml:url ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           spl:optional   true ;
                           spl:predicate  sml:userName ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           spl:optional   true ;
                           spl:predicate  sml:password ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The output variable to contain the text." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] .

sm:next  a            owl:ObjectProperty , rdf:Property ;
        rdfs:comment  "Links a source module (subject) with a target module (object), describing a chain of execution and evaluation." ;
        rdfs:domain   spin:Modules ;
        rdfs:label    "next" ;
        rdfs:range    spin:Modules .

sp:not  a                spin:Function ;
        rdfs:comment     "Returns the boolean negation of the argument." ;
        rdfs:label       "not" ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the operand to negate" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "!" .

spr:rowCount  a          spin:Function ;
        rdfs:comment     "Gets the number of rows in a given table." ;
        rdfs:label       "row count" ;
        rdfs:subClassOf  spr:RowCountFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result" ]
                                               ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "tableClass" ] ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    spin:_arg1
                                                 ]
                                                 [ sp:object     [ sp:varName  "function" ] ;
                                                   sp:predicate  spr:rowCountFunction ;
                                                   sp:subject    [ sp:varName  "tableClass" ]
                                                 ]
                                                 [ a              sp:Bind ;
                                                   sp:expression  [ a        spif:invoke ;
                                                                    sp:arg1  [ sp:varName  "function" ] ;
                                                                    sp:arg2  spin:_arg1
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result" ]
                                                 ]
                                               )
                         ] ;
        spin:returnType  xsd:integer .

spin:AskTemplates  a     spin:AskTemplate ;
        rdfs:comment     "Suggested abstract base class for all AskTemplates." ;
        rdfs:label       "Ask templates" ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spr:TableClass  a        rdfs:Class ;
        rdfs:comment     "Metaclass of classes that can represent tabular data. The classes that have this metaclass as their type need to specify SPARQL/SPIN functions for various look up tasks." ;
        rdfs:label       "Table class" ;
        rdfs:subClassOf  rdfs:Class .

sp:arg6  a                  rdf:Property ;
        rdfs:comment        "The sixth argument of a function call." ;
        rdfs:label          "arg6" ;
        rdfs:subPropertyOf  sp:arg .

sml:singlePass  a   rdf:Property ;
        rdfs:label  "single pass" ;
        rdfs:range  xsd:boolean .

spr:MagicProperties  a      spin:MagicProperty ;
        rdfs:label          "Magic SPR properties" ;
        rdfs:subClassOf     spin:MagicProperties ;
        rdfs:subPropertyOf  spr:systemProperty ;
        spin:abstract       true .

sml:AppendText  a        sm:Module ;
        rdfs:comment     "Appends a given text (possibly containing template expressions, sml:template) to the value of a given variable (sml:variable) and binds the concatenation of the old value plus the new text to the same variable. This can be used to incrementally build up a string." ;
        rdfs:label       "Append text" ;
        rdfs:subClassOf  sml:TextProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The (template) string to append to the variable value." ;
                           spl:predicate  sml:template ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the variable to append to." ;
                           spl:defaultValue  "text" ;
                           spl:predicate     sml:variable ;
                           spl:valueType     xsd:string
                         ] .

spr:Aggregator  a     rdfs:Class ;
        rdfs:comment  "A pair of SPARQL functions that can be used to aggregate values of a SPR table. Instances of this class can be passed into the various aggregateXY functions." ;
        rdfs:label    "Aggregator" .

spr:rowIndices  a           spin:MagicProperty ;
        rdfs:comment        "Iterates over all rows of a given table (left side, ?arg1) and binds the variable on the right with the index of the rows." ;
        rdfs:label          "row indices" ;
        rdfs:subClassOf     spr:MagicProperties ;
        rdfs:subPropertyOf  spr:systemProperty ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "index" ]
                                                  ) ;
                              sp:where            ( [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:sub ;
                                                                       sp:arg1  [ a        spr:rowCount ;
                                                                                  sp:arg1  spin:_arg1
                                                                                ] ;
                                                                       sp:arg2  1
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "lastIndex" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "?0" ] ;
                                                      sp:predicate  <http://www.topbraid.org/tops#for> ;
                                                      sp:subject    [ sp:varName  "index" ]
                                                    ]
                                                    [ sp:object     0 ;
                                                      sp:predicate  rdf:first ;
                                                      sp:subject    [ sp:varName  "?0" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "?1" ] ;
                                                      sp:predicate  rdf:rest ;
                                                      sp:subject    [ sp:varName  "?0" ]
                                                    ]
                                                    [ sp:object     [ sp:varName  "lastIndex" ] ;
                                                      sp:predicate  rdf:first ;
                                                      sp:subject    [ sp:varName  "?1" ]
                                                    ]
                                                    [ sp:object     () ;
                                                      sp:predicate  rdf:rest ;
                                                      sp:subject    [ sp:varName  "?1" ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The spr:Table to get the row indexes of." ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  spr:Table
                            ] .

spin:Templates  a        spin:Template ;
        rdfs:comment     "Suggested abstract base class for all Templates." ;
        rdfs:label       "Templates" ;
        rdfs:subClassOf  spin:Modules ;
        spin:abstract    true .

sp:lang  a               spin:Function ;
        rdfs:comment     "Returns the language tag of ?arg1, if it has one. It returns \"\" if the literal has no language tag. Node that the RDF data model does not include literals with an empty language tag." ;
        rdfs:label       "lang" ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the literal to get the language of" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "lang" .

sml:ApplyResourceConstructors
        a                sm:Module ;
        rdfs:comment     "Executes all spin:constructors for the instances in the input graph, and returns the union of the constructed triples and the input graph." ;
        rdfs:label       "Apply resource constructors" ;
        rdfs:subClassOf  sml:RDFProcessingModules .

spl:Argument  a             spin:ConstructTemplate ;
        rdfs:comment        "Provides metadata about an argument of a SPIN Function or Template. Arguments wrap a given rdf:Property (predicate) and specify its value type and whether the argument is optional. When used as spin:constraint, the body of this template will verify that a non-optional value exists and that it has the specified value type. Arguments that have been declared spl:optional true become optional if the type of ?this is spl:UnionTemplate. " ;
        rdfs:label          "Argument" ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b16
                                              ]
                                              [ sp:object     spin:_this ;
                                                sp:predicate  spin:violationRoot ;
                                                sp:subject    _:b16
                                              ]
                                              [ sp:object     [ sp:varName  "predicate" ] ;
                                                sp:predicate  spin:violationPath ;
                                                sp:subject    _:b16
                                              ]
                                              [ sp:object     [ sp:varName  "label" ] ;
                                                sp:predicate  rdfs:label ;
                                                sp:subject    _:b16
                                              ]
                                            ) ;
                              sp:where      ( ( [ a              sp:Filter ;
                                                  sp:expression  [ a        sp:isIRI ;
                                                                   sp:arg1  spin:_this
                                                                 ]
                                                ]
                                              )
                                              [ a            sp:Union ;
                                                sp:elements  ( ( ( ( [ a              sp:Filter ;
                                                                       sp:expression  [ a        sp:or ;
                                                                                        sp:arg1  [ a        sp:not ;
                                                                                                   sp:arg1  [ a        sp:bound ;
                                                                                                              sp:arg1  [ sp:varName  "optional" ]
                                                                                                            ]
                                                                                                 ] ;
                                                                                        sp:arg2  [ a        sp:eq ;
                                                                                                   sp:arg1  [ sp:varName  "optional" ] ;
                                                                                                   sp:arg2  false
                                                                                                 ]
                                                                                      ]
                                                                     ]
                                                                   )
                                                                   [ a              sp:Filter ;
                                                                     sp:expression  [ a            sp:notExists ;
                                                                                      sp:elements  ( [ sp:object     [ sp:varName  "value" ] ;
                                                                                                       sp:predicate  [ sp:varName  "predicate" ] ;
                                                                                                       sp:subject    spin:_this
                                                                                                     ]
                                                                                                   )
                                                                                    ]
                                                                   ]
                                                                   [ a              sp:Filter ;
                                                                     sp:expression  [ a            sp:notExists ;
                                                                                      sp:elements  ( [ sp:object     [ sp:varName  "template" ] ;
                                                                                                       sp:predicate  rdf:type ;
                                                                                                       sp:subject    spin:_this
                                                                                                     ]
                                                                                                     [ a              sp:Filter ;
                                                                                                       sp:expression  [ a        spl:instanceOf ;
                                                                                                                        sp:arg1  [ sp:varName  "template" ] ;
                                                                                                                        sp:arg2  spl:UnionTemplate
                                                                                                                      ]
                                                                                                     ]
                                                                                                   )
                                                                                    ]
                                                                   ]
                                                                 )
                                                                 [ a              sp:Bind ;
                                                                   sp:expression  [ a        sp:concat ;
                                                                                    sp:arg1  "Missing value for argument " ;
                                                                                    sp:arg2  [ a        afn:localname ;
                                                                                               sp:arg1  [ sp:varName  "predicate" ]
                                                                                             ]
                                                                                  ] ;
                                                                   sp:variable    [ sp:varName  "label" ]
                                                                 ]
                                                               ) ( ( ( [ a              sp:Filter ;
                                                                         sp:expression  [ a        sp:bound ;
                                                                                          sp:arg1  [ sp:varName  "valueType" ]
                                                                                        ]
                                                                       ]
                                                                     )
                                                                     [ sp:object     [ sp:varName  "value" ] ;
                                                                       sp:predicate  [ sp:varName  "predicate" ] ;
                                                                       sp:subject    spin:_this
                                                                     ]
                                                                     [ a              sp:Filter ;
                                                                       sp:expression  [ a        sp:and ;
                                                                                        sp:arg1  [ a        sp:not ;
                                                                                                   sp:arg1  [ a        spl:instanceOf ;
                                                                                                              sp:arg1  [ sp:varName  "value" ] ;
                                                                                                              sp:arg2  [ sp:varName  "valueType" ]
                                                                                                            ]
                                                                                                 ] ;
                                                                                        sp:arg2  [ a        sp:or ;
                                                                                                   sp:arg1  [ a        sp:ne ;
                                                                                                              sp:arg1  [ sp:varName  "valueType" ] ;
                                                                                                              sp:arg2  rdfs:Resource
                                                                                                            ] ;
                                                                                                   sp:arg2  [ a        sp:isLiteral ;
                                                                                                              sp:arg1  [ sp:varName  "value" ]
                                                                                                            ]
                                                                                                 ]
                                                                                      ]
                                                                     ]
                                                                   )
                                                                   [ a              sp:Bind ;
                                                                     sp:expression  [ a        sp:concat ;
                                                                                      sp:arg1  "Incorrect type of argument " ;
                                                                                      sp:arg2  [ a        afn:localname ;
                                                                                                 sp:arg1  [ sp:varName  "predicate" ]
                                                                                               ] ;
                                                                                      sp:arg3  " (expected: " ;
                                                                                      sp:arg4  [ a        afn:localname ;
                                                                                                 sp:arg1  [ sp:varName  "valueType" ]
                                                                                               ] ;
                                                                                      sp:arg5  ")"
                                                                                    ] ;
                                                                     sp:variable    [ sp:varName  "label" ]
                                                                   ]
                                                                 ) )
                                              ]
                                            )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "a comment describing the argument" ;
                              spl:optional   true ;
                              spl:predicate  rdfs:comment ;
                              spl:valueType  xsd:string
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the value type of the argument" ;
                              spl:optional   true ;
                              spl:predicate  spl:valueType ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the default value for the argument" ;
                              spl:optional   true ;
                              spl:predicate  spl:defaultValue
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the property holding the values of each function call" ;
                              spl:predicate  spl:predicate ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "indicates whether the argument is optional" ;
                              spl:optional   true ;
                              spl:predicate  spl:optional ;
                              spl:valueType  xsd:boolean
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "Indicates whether this is a \"hidden\" argument. Hidden arguments will not be presented to the user in input dialogs but instead always have their defaultValue." ;
                              spl:optional   true ;
                              spl:predicate  sml:hidden ;
                              spl:valueType  xsd:boolean
                            ] ;
        spin:labelTemplate  "Argument {?predicate} : {?valueType}" .

spl:ConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract superclass of templates that can be used as spin:constraints. The subclasses are expected to construct spin:ConstraintViolations and use ?this to talk about the instances of the associated class." ;
        rdfs:label       "Constraint templates" ;
        rdfs:subClassOf  spin:ConstructTemplates ;
        spin:abstract    true .

sp:named  a                 rdf:Property ;
        rdfs:comment        "Used in DROP and CLEAR." ;
        rdfs:label          "named" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

spl:PropertyPairConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract base class for templates that take two properties as arguments and establish a relationship between them." ;
        rdfs:label       "Property pair constraint templates" ;
        rdfs:subClassOf  spl:PropertyConstraintTemplates ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The \"other\" property." ;
                           spl:predicate  arg:otherProperty ;
                           spl:valueType  rdf:Property
                         ] .

sml:content  a      rdf:Property ;
        rdfs:label  "content" .

sp:arg1  a                  rdf:Property ;
        rdfs:comment        "The first argument of a function call." ;
        rdfs:label          "arg1" ;
        rdfs:subPropertyOf  sp:arg .

sml:ImportXMLFile  a     sm:Module ;
        rdfs:comment     "Loads an XML file, specified by a file path and binds the resulting document as an XML DOM tree to the specified output variable. This module is often the starting point of XML processing steps such as XSLT transformations or XPath queries." ;
        rdfs:label       "Import XML file" ;
        rdfs:seeAlso     sml:ExportToXMLFile ;
        rdfs:subClassOf  sml:ImportFromLocalModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to the XML file in the workspace. The path can be relative to the current script's folder (e.g., myFolder/test.xml) or absolute to the workspace root /myProject/myFolder/test.xml." ;
                           spl:predicate  sml:sourceFilePath ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "The name of the variable containing the XML data. Default: xml." ;
                           spl:defaultValue  "xml" ;
                           spl:predicate     sm:outputVariable ;
                           spl:valueType     xsd:string
                         ] ;
        spin:constraint  [ a                 spl:Argument ;
                           rdfs:comment      "An (optional) indicator to ignore the XML document type.  This will allow for opening documents offline where the DTD or schema may not be available." ;
                           spl:defaultValue  false ;
                           spl:optional      true ;
                           spl:predicate     sml:ignoreDoctype ;
                           spl:valueType     xsd:boolean
                         ] .

sml:deletedPrefix  a  rdf:Property ;
        rdfs:label  "deletedPrefix" ;
        rdfs:range  xsd:string .

sml:ExportToRemoteModules
        a                sm:Module ;
        rdfs:label       "Export to Remote" ;
        rdfs:subClassOf  sml:ExportModules ;
        spin:abstract    true .

spl:minCount  a             rdf:Property ;
        rdfs:subPropertyOf  spl:count .

spl:objectInGraph  a     spin:Function ;
        rdfs:comment     "Gets the object of a given subject (?arg1) / predicate (?arg2) combination in a given graph ?arg3. Note that if multiple values are present then the result might be unpredictably random." ;
        rdfs:label       "object in graph" ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "object" ]
                                               ) ;
                           sp:where            ( [ a                 sp:NamedGraph ;
                                                   sp:elements       ( [ sp:object     [ sp:varName  "object" ] ;
                                                                         sp:predicate  spin:_arg2 ;
                                                                         sp:subject    spin:_arg1
                                                                       ]
                                                                     ) ;
                                                   sp:graphNameNode  spin:_arg3
                                                 ]
                                               )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The subject to get the object from." ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate to get the object of." ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The graph to query in." ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  rdfs:Resource
                         ] .

sml:CopyFile  a          sm:Module ;
        rdfs:comment     "Creates a copy of a given file within the workspace." ;
        rdfs:label       "Copy file" ;
        rdfs:subClassOf  sml:FileProcessingModules ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path to the source file." ;
                           spl:predicate  sml:oldFilePath ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The path for the target file." ;
                           spl:predicate  sml:newFilePath ;
                           spl:valueType  xsd:string
                         ] .

spin:abstract  a            rdf:Property ;
        rdfs:comment        "Can be set to true to indicate that this module shall not be instantiated. Abstract modules are only there to organize other modules into hierarchies." ;
        rdfs:domain         spin:Module ;
        rdfs:label          "abstract" ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .
